<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Key Shift in Cmd]]></title>
  <link href="http://greena13.github.io/atom.xml" rel="self"/>
  <link href="http://greena13.github.io/"/>
  <updated>2014-08-29T17:20:23+01:00</updated>
  <id>http://greena13.github.io/</id>
  <author>
    <name><![CDATA[Aleck Greenham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Spaced Repetition to Learn Programming Languages]]></title>
    <link href="http://greena13.github.io/blog/2014/08/28/using-spaced-repetition-to-learn-programming-languages/"/>
    <updated>2014-08-28T09:58:41+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/28/using-spaced-repetition-to-learn-programming-languages</id>
    <content type="html"><![CDATA[<p>I have already written on <a href="blog/2014/08/26/creating-cards-for-spaced-repetition">tips for creating spaced repetition cards</a>, but here I hope to summarise a few of Jack Kinsella&rsquo;s tips specific to <a href="http://www.jackkinsella.ie/2011/12/05/janki-method.html">memorising programming languages</a> (and <a href="http://www.oxbridgenotes.co.uk/articles/janki_method_refined">here</a> also).</p>

<h2>Use Screenshots</h2>

<p>Rather than typing out code manually onto your cards, screenshots should be used. Aside from the obvious and significant time saving, screenshots provide you with syntax highlighting with no additional effort, creating a richer image for the brain to process and remember, with the salient parts already highlighted. Kinsella also claims - perhaps rightly so - that taking screenshots of the original source may draw upon situational memory to help aid in recollection.</p>

<h2>Focus on What&rsquo;s Available - Not How to Use It</h2>

<p>When you are committing functions and methods to memory, focus on what they are called and what they do rather than concerning yourself with details of parameter order and return types. When you come to committing a second or third language to memory, this information will likely become conflicting content and cause you endless problems as you recall information for the wrong language.</p>

<p>When you sit down to program, what is of greatest use is what functions or methods are available in the language. This is to avoid naively reimplementing functionality already on offer, or recreating an existing and well-known solution. Once you know what functions you wish to use, a decent IDE will help you out with the rest.</p>

<h2>Make Clear What is Language Agnostic</h2>

<p>Often there are functions and methods with the same or similar names and functionality offered by different languages and libraries. Make sure to encode what these functions are, and any differences they may have between languages. It is often helpful to define other language&rsquo;s implementations relative to one you are already very familiar with.</p>

<h2>Create Cards From Good Code</h2>

<p>When you encounter a good piece of code - perhaps from a well-maintained open source repository or a well-reviewed tutorial - create cards from it and quiz yourself on its merits, or even pitfalls if you are able to find them. This will help with you ability to read and analyse code and will impart good practices with concrete examples.</p>

<h2>Process Information Can Be Difficult to Encode</h2>

<p>Processes and ordered information is difficult to store and remember in Anki because it suffers from the same problems as sets and enumerations. The process should be encoded as clozed deletions, or care should be taken to encoding a clear link between each step in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Cards for Spaced Repetition]]></title>
    <link href="http://greena13.github.io/blog/2014/08/26/creating-cards-for-spaced-repetition/"/>
    <updated>2014-08-26T14:44:22+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/26/creating-cards-for-spaced-repetition</id>
    <content type="html"><![CDATA[<p><em>Spaced repetition</em> is a revision technique that minimises the number of exposures to a piece of subject matter required to commit it to longterm memory. This is achieved by altering the frequency in which items of revision material are shown to the user based on how easily it was recalled last time; the content is shown to the user right before he or she is due to forget it - and not before, avoiding wasting time on premature revision. <a href="http://ankisrs.net/">Anki</a> is a free and popular tool available on Windows, Mac and mobile devices that allows you to synchronise your progress between all your devices via <a href="https://ankiweb.net">Ankiweb</a>.</p>

<p>Anki works by showing a user a series of <em>flash cards</em> in a <em>deck</em> and prompting for a response for each one. When the user comes up with an answer (or gives up), they press a button to reveal the correct response. The user then selects whether they wish to be quizzed on this again soon (because they got it wrong, or were not satisfied with how quickly they came up with the answer) or some time further in the future (because it was too easy). The algorithm for managing what material is presented and when, is very effective and can be customised based on the user&rsquo;s preferred amount of material and time available for revision each day. Anki also includes a number of more advanced features that won&rsquo;t really be covered here.</p>

<p>I have recently been looking into spaced repetition to <a href="http://www.smashingmagazine.com/2014/08/19/mastering-a-programming-language-using-spaced-repetition/">improve my recall of a number of programming languages</a>. I have encountered good advice on maximising the effectiveness of spaced repetition by ensuring the content and format of flashcards is conducive to fast and meaningful memorisation. Here is a summary of the advice that stood out to me, taken primarily from Mattan Griffel&rsquo;s <a href="http://www.smashingmagazine.com/2014/08/19/mastering-a-programming-language-using-spaced-repetition/">Tips For Mastering A Programming Language Using Spaced Repetition</a>, Jack Kinsella&rsquo;s <a href="http://www.jackkinsella.ie/2011/12/05/janki-method.html">Janki Method</a>, Derek Sivers&#8217; <a href="http://sivers.org/srs">Memorizing a programming language using spaced repetition software</a> and Dr Piotr Wozniak&rsquo;s <a href="http://www.supermemo.com/articles/20rules.htm">Twenty rules of formulating knowledge</a>. Each should be consulted in addition to reading this article for further examples and discussion.</p>

<h2>Common Memorisation Mistakes</h2>

<h3>Avoiding Activated Ignorance</h3>

<p>Spaced repetition and flash cards are for remembering things, <em>not learning them</em>. Subject material should only ever been encoded in cards after you have understood it. Committing anything that is poorly comprehended or misunderstood can be very damaging and will likely lead to <em>activated ignorance</em>, or information that has been memorised but is false or not completely true. This is a waste of time and will lead to the wrong information making itself available in your mind when it matters most; it also has the secondary and perhaps more damaging effect of providing you with a erroneous foundation in which to receive and process new information, creating more far-reaching errors in comprehension.</p>

<h3>Avoiding Inert Information</h3>

<p>Only add cards to your deck for knowledge you understand to avoid <em>inert information</em>, or information that is although memorised, has not been correctly understood &ndash; despite being under the impression you understand it. These facts or figures sit in your memory and dutifully present themselves when recalled, but when push comes to shove, offer no deeper understanding. An example of this would be slavishly memorising that TCP stands for <em>Transmission Control Protocol</em>, but having no knowledge of how this protocol actually functions or its place in communication.</p>

<p>To avoid this, you should develop a sound understanding of the full context of a subject before settling down to memorise its finer points. Particular attention and time should be spent on understanding the fundamentals to ensure a strong mental framework is in place to receive and evaluate new knowledge as it is encountered and memorised.</p>

<p>Spaced repetition should not be performed alone and content should not be memorised in isolation - learning without practicing the skills and information you are committing to memory will divorce the knowledge from its use and make it difficult to reconcile with how to make it work for you in your work and life. You need to use what you learn to discover important nuances or details in applying what you&rsquo;re memorising.</p>

<h2>Encoding Knowledge</h2>

<h3>Abstraction and Chunking</h3>

<p>Effectively encoding knowledge into Anki cards is vital to optimising how effective your revision sessions are. It is no surprise that simple material is easier to commit to memory and recall once its there, and so information should be formulated as simply and succinctly as possible. The number of words and concepts involved in each card should be kept to an absolute minimum.</p>

<p>It is possible to break a complicated concept up into smaller conceptual units through a process known as <em>chunking</em>. Your goal should be to create simple, unambiguous mental associations and neural pathways to follow each time you wish to recall something. Note that this is not the same as creating a single representation or association of a concept in your mind. On the contrary, it is beneficial to have as many of these simple pathways to the same concept as possible, to increase your chances and the number of contexts in which it is easy to recall the material.</p>

<p>Further to this end, concrete examples of concepts are better to encode on your cards than the abstract concepts themselves. Concrete examples stick in memory longer and if a series of examples are chosen wisely, it should be easier to induce the abstract concept when required rather than having to memorise it and use it to deduce applications later on. However, several similar cards should be created with slightly different answers when there is an important or subtle conceptual distinction or <em>gotcha</em> that you should know.</p>

<p>Not only does breaking up concepts into their smallest constituents benefit your brain&rsquo;s ability to recall it later, but it actually helps Anki&rsquo;s algorithm perform  more effectively because simple concepts are easier to schedule efficiently than larger, more abstract ones. This is because Anki is able to remind you of ony the concepts you have likely forgotten, leaving the ones you have memorised out. You are also more likely to forget all or part of a complicated idea and will need to be reminded of it more frequently, despite knowing some or most of the concept.</p>

<h3>Things You Should Avoid Memorising</h3>

<p>Sets, or groupings of items without a clear or predefined order, are very difficult to remember and encode. Where possible, these should be converted to <em>enumerations</em>, or ordered sets, by linking items up in a predefined and consistent order. Enumerations are easier to recall than sets because a clear link between consecutive items exists that you brain can easily traverse to retrieve all items in the group.  Order should be chosen carefully, however, as it is more difficult to retrieve individual items in an order different to the one you have encoded. This order can be arbitrary, but should be easy to remember and preferably have meaning within the context of the material you are memorising, or match the order in which you are likely to need to retrieve them.</p>

<p>Enumerations are still difficult to memorise and should be avoided. Where possible, enumerations should be converted to <em>cloze deletions</em>, or sentences where some words have been omitted and you must fill in the blanks. These are typically easier to remember than sets and enumerations and are based on the concept of <a href="http://www.supermemo.com/help/read.htm"><em>incremental reading</em></a>.</p>

<h3>Memory Conflicts</h3>

<p>When memorising many concepts, you need to be aware of inadvertantly memorising something that may conflict with something you already know. This often happens when memorising a lot of numbers, whether dates or quantities, people often find a long-held memory difficult or impossible to retrieve after learning a new peice of information. These conflicts are difficult to predict and are better to be avoided by making concepts you memorised as unambiguous and explicit as possible to minimise the chance of inadvertently reallocating a particular neural pathway to new conflicting information.</p>

<h3>Strengthening Memories</h3>

<p>A number of techniques exist for strengthening memories and increasing their intensity and duration. There is a great body of literature on mnemonics available for associating and linking items to make them easier to recall at later date. Alternatively, you may attempt to consciously integrate a new piece of information into you memory by linking it to a memory or memories you already have. Concepts are often easier to recall when they are defined relative to things we are already familiar with.</p>

<p>Furthermore, you can personalise information with experience or examples from your own life. The brain gives highest priority to information that has the greatest relevance to your life and relationships. By hooking a new piece of information to an existing memory with special significance or associated emotion, you are capitalising on this inherent prioritisation.</p>

<p>Memories can also be linked to contexts by creating something akin to different modes or domains for which your brain should draw memories from, given a certain environment or context. This often allows concepts to be expressed in fewer words and relative to other concepts already in a given context&rsquo;s conceptual landscape.</p>

<h3>Formatting</h3>

<p>The formatting of cards should aim to convey concepts as quickly and richly as possible. Key concepts or words should be <strong>emboldened</strong> to help them stand out and create a unique visual stimulus the brain can recognise from previous revision sessions and automatically retrieve the memory of what is on the card.</p>

<p>The usage of imagery enriches stimulus where text cannot and produces memories that are not only more evocative but more easily recalled due to the added sensory dimensions of sight embedded in the memory. Sounds and short video clips can be used to capitalise on this effect even further. Many individuals have predilections for certain sense and you may find, for example, auditory memories are stronger than visual ones.</p>

<h3>Prompts (Front of the Card)</h3>

<p>The question or prompt on the front of each card should be phrased to mimic how it will likely be retrieved when needed. The solution to a problem should be encoded with a prompt that matches how you are likely to encounter that problem during your day-to-day work, rather than extracted into an abstraction that is likely to require cognitive effort to rework it into actionable knowledge. This is a corollary of the fact that memories stored using simple and strong neural pathways are easiest to retrieve.</p>

<p>Jack Kinsella <a href="http://www.oxbridgenotes.co.uk/articles/janki_method_refined">suggests</a> that before creating a card, brainstorm possible uses for the knowledge and use this insight to cater how you record the information. This can be particularly effective when combined with cloze deletion; phrases can be created based on problems or situations you are likely face where you will need the information you are encoding. If it is proving difficult to come up with a situation where the material will be needed - it is probably the case that this information will not be worth remembering.</p>

<h3>Answer (Back of the Card)</h3>

<p>The amount of cognitive effort required to decide if you got the correct answer or not on a card should be kept at a minimum. Answers that take too long to confirm as correct (usually because of ambiguity or concepts expressed in a wordy way) will eat into your cognitive reserves and draw out revision sessions to be longer than they need to. It is also an indication that the concept being encoded is too complicated and should be broken down into smaller, simpler ones.</p>

<p>If the material cannot be simplified and it is still taking too long to confirm as correct, try putting the important parts in <strong>bold</strong> or a larger font size to stand out more.</p>

<h2>What to Encode</h2>

<h3>Finding Things to Remember</h3>

<p>To get the most out of revising, you should first decide what material is most useful to have memorised. This is usually things that will save you time and resources you would otherwise spend to look it up or find out; it is a good idea to save things you would normally have to bookmark or search for on a regular basis, or insights that save you considerable time but are difficult to remember because they are rarely used.</p>

<p>It is good to get into the habit of creating new Anki cards for every time you learn something new or are reminded of something important. It is often worth tagging these cards to describe their content to allow for focused review when the need later arrives.</p>

<p>It is also a good idea to create cards with what you learn from your mistakes; performing a post-mortem after a big project to identify what went well and what did not is a good way to identify lessons to be learnt (and remembered) to put in your Anki deck. It is an even better idea to analyse progress during regular intervals throughout a project to make sure you have not lost sight of a greater picture and add these insights to your deck. A similar approach can be applied to errors encountered in every day work; solutions to common or time-consuming problems are terrifically useful things to have memorised.</p>

<p>Restricting what you memorise to only what you need to complete a particular project is a good way to help focus your memorisation and avoid wasting time on material that will ultimately prove of little or no use.</p>

<h2>Practicing</h2>

<p>Spaced repetition software works by offering you a reminder of information just before you are most likely to forget it, both preventing you from wasting time revising the material before you need to, and avoiding you forgetting the concept completely and having to relearn it. In order for the algorithm to be the most effective, you must complete the suggested revision <em>every day</em>. This is less challenging than it sounds when you incorporate checking your deck into your daily routine. If left neglected for too long, the number of items due to be revised grows and it quickly becomes too difficult to catch up.</p>

<h2>Deck Maintenance</h2>

<p>A spaced repetition deck should not be thought of as a static resource, but instead should be maintained continuously. Cards should be updated that are no longer true or, given new insight, can be improved, split or merged.</p>

<p>Material that is proving difficult to memorise should be rephrased, reformatted or reworked to try and make it easier to remember. Conceptual links to related material should be highlighted to strengthen associations. The content should be carefully considered, practiced or tested to help find more effective ways of encoding it in the deck and make it easier to remember.</p>

<p>When creating cards, it is a good idea to provide references to the sources you used and the date you last checked or review it. This is to record where to go to get more information and to clarify or expand your knowledge of a given subject  and to guage how stable or obsolete a particular piece of knowledge is.</p>

<h2>Prioritising What You Should Practice</h2>

<p>Unless you want to be spending hours each day reviewing - and likely not even then - you will not have enough time to memorised every piece of knowledge you ever wanted at your fingertips. Material must be prioritised and those priorities, like the deck itself, should be regularly reviewed and adjusted. Anki&rsquo;s tags system can be used to filter out which cards are included or filtered out of your deck.</p>

<p>Material that is used regularly or is important for only a given period - perhaps while you complete a particular project - should be retired from your deck in favour of information more likely to be useful in the future. The excluded material can be re-included and rapidly re-learnt using Anki&rsquo;s drill feature, should there come a time when the material is required once more.</p>

<p>You will need to find your own balance of how long you are prepared to spend revising each day, and how useful the information you&rsquo;re committing to memory is likely to be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Separating Classes Into Smaller Ones]]></title>
    <link href="http://greena13.github.io/blog/2014/08/22/separating-classes-into-smaller-ones/"/>
    <updated>2014-08-22T09:05:53+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/22/separating-classes-into-smaller-ones</id>
    <content type="html"><![CDATA[<p>One of the more useful things I took from Steve McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a> is a procedure for systematically extracting smaller classes from a large one.</p>

<p>A common object oriented antipattern is the <em>God Class</em> or <em>Blob Class</em> which occurs when a class grows to become a large, monolithic blob with no clear single responsibility, leading to problems with maintenance and understandability. At this point, the corrective course of action is to refine the single unwieldy class into multiple smaller ones with a more manageable size and clear responsibility. The exact number and shape of these refined classes is not always immediately apparent, however it is possible to break the process up into smaller steps, allowing you to focus on one stage at a time.</p>

<ol>
<li><p>Begin by looking at the methods themselves rather than the class and identify any that are particularly long or deal with multiple responsibilities. Separate them out into smaller self-contained chunks using vertical whitespace (empty lines); it may be necessary to shift the order of statements, particularly moving the initialisation of variables to just before they are first used &ndash; be careful not to inadvertently change system behaviour here.</p></li>
<li><p>The whitespace-separated chunks of functionality can now be extracted into their own methods. It can be helpful to first type out the reference to this new method immediately above the statements that it will contain. This makes it easier to see what parameters the method will need by going through its statements. Once you are comfortable with the method&rsquo;s name and parameters, copy the reference and method statements onto the class and convert it to a valid method definitions with an appropriate access modifier (usually <code>private</code> should be your first choice).</p></li>
<li><p>Once you have extracted as much code as possible into class or instance methods, examine each method&rsquo;s parameters and try to remove as many of them as possible by promoting local variables and arguments to instance or class variables so they will not need to be passed around between methods.</p></li>
<li><p>Once again, you should now attempt to separate out concerns, this time by grouping methods and instance and class variables concerned with the same functionality. Usually these can be identified simply as the methods that reference these variables.</p></li>
<li><p>Once you have identified one or more separate concerns, define a new class to encapsulate the related methods and variables. Define an instance of the new class on the blob class and instantiate it an appropriate place so you will be able to evoke the functionality of the new class from the blob class. Begin moving methods and instance variables to the new class, searching each time in the blob class for any references you may need to update (by pointing to the variable containing the instance of the new class). Continue this until you have extracted all the methods and instance variables you need to simplify the blob class.</p></li>
</ol>


<p>Ideally, all refactoring should be completed with a set of comprehensive unit tests at your back to verify no functionality was changed or lost in the restructuring. This is often not the case, in no small part because God Classes are notoriously difficult to write tests for. However, the same is not true of the new, slimmer classes and it is a good idea to see the refactoring as an opportunity to outfit the new classes with the full unit test treatment; you will thank yourself when it comes time to maintain them in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reducing Code Complexity]]></title>
    <link href="http://greena13.github.io/blog/2014/08/21/reducing-code-complexity/"/>
    <updated>2014-08-21T16:00:53+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/21/reducing-code-complexity</id>
    <content type="html"><![CDATA[<p>I have already covered what I picked up from Steve McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a> and Robert C. Martin&rsquo;s <a href="http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a> on <a href="blog/2014/08/21/ordering-and-labelling-code">packaging and labeling blocks of code</a> and <a href="blog/2014/08/20/reducing-a-routines-parameters/">simplifying their inputs</a>. Now I intend to cover what the two volumes offer in regards to reducing the complexity of the shape of, and relationships between, code segments. As is consistently emphasised through McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a>, the author of a piece of code is beholden to its reader and should write for readability and maintainability, as if often ends up being the same person or a colleague.</p>

<p>To understand how a piece of code works, the reader must often hold in their mind the several steps they traversed along a particular execution path to reach a given point in the code. It is difficult to mentally retain these preconditions while juggling the cognitive task of interpreting the commands at the point the reader is currently at in parsing the code. A way of making this easier is to reduce the levels of nesting of conditional statements, or keeping the code as <em>flat</em> and as close to linear as possible; this better matches how the human brain works and plays to its strengths and aptitude for linear storytelling and reasoning patterns.</p>

<p>One way to simplify a series of deeply nested conditions with many variables is to introduce a helpful level of abstraction by bundling up as many of those conditions as possible in descriptively named query methods or functions; <code>if isWeekDay(day)</code> is preferrable to <code>if(day != 'Saturday' &amp;&amp; day != 'Sunday')</code>.</p>

<p>Another method is to attempt to simplify nested conditions using logic axioms such as <em>Demorgan&rsquo;s Law</em>. A series of if statements is often easier to navigate than a single chunk of nested logic. It also reduces the number of inputs to the block, providing greater opportunity to extract it out into separate methods or functions with clearer indications of what data influences its behaviour.</p>

<p>When unwrapping nested conditional statements, the preconditions for an extracted piece of code may become less clear. This should be address by making any dependencies explicit. To illustrate: if one function must be called before another, have the first function return a data type that the second one requires as a parameter. For example, if a function <code>throwRock()</code> must be called before another <code>breakGlass()</code>, make <code>throwRock()</code> return an instance of <code>WallPosition</code> and have <code>breakGlass()</code> require an argument of type <code>WallPosition</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ordering and Labelling Code]]></title>
    <link href="http://greena13.github.io/blog/2014/08/21/ordering-and-labelling-code/"/>
    <updated>2014-08-21T14:53:17+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/21/ordering-and-labelling-code</id>
    <content type="html"><![CDATA[<p>Reading Steve McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a> and Robert C. Martin&rsquo;s <a href="http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a>, I encountered a subject that I previously hadn&rsquo;t given much thought to but is of great importance. McConnel talks of reducing the cognitive load of reading and understanding code by writing for humans first, computers second; where the reader of a piece of code should be the author&rsquo;s highest priority - if not only because these often end up being one and the same. An important part of this is facilitating quick code navigation to allow the reader to find what they need, and providing useful levels of abstraction so the reader need not concern themselves with irrelevant details.</p>

<p>This is achieved by making considered choices with code order and placement. Two units of code that are related in some way - the most important and obvious being references between them or shared execution paths - should be placed nearby to each other. This is to allow a reader to easily refer between the two without having to jump between separate locations in a file. McConnel offers the analogy of a newspaper for guidance on how code should be ordered: the important concepts are featured at the top while the refinements or details can be found towards the bottom.</p>

<p>Vertical whitespace should be used wisely to separate different ideas or functions in the code. Statements that perform actions that are part of the same larger action should be grouped together, while those that are not should be separated visually by one or more lines of whitespace. If a clear enough conceptual gap exists between a group of statements and the rest of the code, it can and often should be extracted out into a well-named method or function (and given the appropriate access modifier to correctly observe <em>Encapsulation</em>).</p>

<p>Care should be taken when naming methods and functions to the make the reader&rsquo;s task easier. A well-named block of code should make clear what it is the code does, what input it expects or requires and in the case of <a href="blog/2014/08/20/reducing-a-routines-parameters/">multiple parameters</a>, what order the arguments should be given in. If named wisely, a function or method should require little or no further documentation.</p>

<p>It is paramount that a piece of code only perform the functionality suggested by its name, free of hidden side effects or behaviour. To ignore this is to surely guarantee bugs that are difficult to diagnose and fix. However, something greater is at stake: if violated, the trust between the code&rsquo;s author and reader is broken and the reader is forced to then check every method or function for similarly concealed behaviour.</p>

<p>If it is proving difficult to accurately name a method or function succinctly, often it is an indication of an inappropriate level of abstraction or confused intentions behind the code. For example, functions that perform queries or return a system status should be separated from those that execute and action, or alter the system state.</p>

<p>Naming conventions can be used to imbue code with consistency and reduce the number of surprises the reader must negotiate in parsing the code. The merits of specific conventions are secondary to the benefits of consistency itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reducing a Routine's Parameters]]></title>
    <link href="http://greena13.github.io/blog/2014/08/20/reducing-a-routines-parameters/"/>
    <updated>2014-08-20T21:04:08+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/20/reducing-a-routines-parameters</id>
    <content type="html"><![CDATA[<p>Steve McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a> provides a great insight into understanding some of the common function forms and how to go about simplifying wayward parameter lists into something that clearly conveys intention and is easier to remember and use. McConnel writes, software should be written for people first and foremost and focus should be given to improving readability and maintainability, rather than performance.</p>

<p>First, a brief note on terminology: I will be using <em>routine</em>, <em>method</em> and <em>function</em> interchangeably to refer to a <em>piece of code that accepts or requires a given number of inputs, or parameters</em>.</p>

<p>McConnel points out that code with a long list of parameters present problems to those who need to understand, maintain and use it. Multiple parameters are difficult to remember when the function needs to be called - as is the correct order to use them in. Code compliant with the mandates of <em>Defensive Programming</em> will also need to check the arguments have been provided in the correct order and have sensible values. While many IDEs and languages will do the recording of correct parameter order and type checking, this should not been seen as excuse for bad practices. Long parameter lists provide further headaches for maintenance if the method&rsquo;s signature needs to be later modified.</p>

<p>A function can usually be improved by reducing the number of parameters it requires. <em>Polyadic functions</em> (with 3 or more parameters) should almost always be refactored to require fewer arguments. One way of achieving this is by breaking the function up into smaller ones that perform simpler chunks of functionality and need less information to execute; this change in abstraction can often add clarity to the intention behind the code. Another strategy for reducing a function&rsquo;s parameters is to wrap them up in a single data structure, removing the need to remember the parameter order completely and freeing up the reader to focus on what&rsquo;s pertinent to the function of the code.</p>

<p>Good code should consist primarily of <em>monadic</em> and <em>dyadic</em> functions, or those with 1 and 2 parameters, respectively. Monadic functions typically take one of three forms:</p>

<ul>
<li>Asking a question or testing a particular condition. eg. <code>isRed(ball)</code></li>
<li>Performing an action or transformation on a particular parameter. eg. <code>fileOpen(myFile)</code></li>
<li>Handling an event where the function uses the argument to update the system&rsquo;s state. eg. <code>registerMouseEvent(mouseEvent)</code></li>
</ul>


<p>It should be noted that the first form need not return a boolean value. A function that returns a particular characteristic is also of this form. eg. <code>averageGrade(reportCard)</code>. Functions of the second form should also return the result of the action or transform wherever possible. <em>Output arguments</em>, or where functions perform an action on the argument instance itself and return either <code>null</code>/<code>void</code> or another value, are more difficult to follow. In the case of an action being performed on an instance, an object-oriented paradigm is better suited eg. <code>ball.bounce()</code> is clearer than a function <code>bounce(ball)</code> that returns the instance of <code>ball</code>.</p>

<p>If a function or method meets one of the above descriptions and has more than a single parameter, it is a good sign that it is a candidate for refactoring.</p>

<p>Dyadic functions are not as easily classified into categories and can perform many actions. Care should be taken with the ordering of the parameters when defining a function or method&rsquo;s signature so that is natural and easy to remember and should be evident from the name of the routine. If at all possible, the pairing of the two parameters should be wrapped in single argument to convert to a monadic function.</p>

<p>The ideal function is a <em>niliadic function</em>, or a function without any parameters.</p>
]]></content>
  </entry>
  
</feed>
