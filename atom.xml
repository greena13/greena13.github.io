<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Key Shift in Cmd]]></title>
  <link href="http://greena13.github.io/atom.xml" rel="self"/>
  <link href="http://greena13.github.io/"/>
  <updated>2015-02-01T10:35:43+00:00</updated>
  <id>http://greena13.github.io/</id>
  <author>
    <name><![CDATA[Aleck Greenham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SourceTree Keyboard Shortcuts]]></title>
    <link href="http://greena13.github.io/blog/2015/02/01/sourcetree-keyboard-shortcuts/"/>
    <updated>2015-02-01T09:32:42+00:00</updated>
    <id>http://greena13.github.io/blog/2015/02/01/sourcetree-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<p>After wasting hours in search of a good list of keyboard shortcuts available in Atlassian&rsquo;s SourceTree and feeling utter despair at <a href="https://answers.atlassian.com/questions/238357/where-can-i-find-a-list-of-mac-keyboard-shortcuts-for-sourcetree">how slow Atlassian is being at delivering this information</a>, I thought I&rsquo;d share the ones that I discovered through brute force and determination.</p>

<p>These were discovered and are only applicable on a Mac (although I am sure the Windows equivalents are easy to deduce), at the Commit All.. Screen (cmd + shift + c).</p>

<p>I would be <em>extremely</em> interested in hearing about any that are not already listed. Please post in the comments below.</p>

<h2>Navigation &amp; Menus</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>File Status Screen</strong> </td>
<td style="text-align:right;"> cmd + 1 </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Log Screen</strong> </td>
<td style="text-align:right;"> cmd + 2 </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Search Screen</strong> </td>
<td style="text-align:right;"> cmd + 3 </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Repo select window</strong>  </td>
<td style="text-align:right;">  cmd + b  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>New repo</strong>  </td>
<td style="text-align:right;">  cmd + n  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Command history</strong>  </td>
<td style="text-align:right;">  cmd + shift + w </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Hide/show sidebar</strong>  </td>
<td style="text-align:right;">  cmd + shift + k </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Spelling and grammar</strong>  </td>
<td style="text-align:right;">  cmd + shift + ; </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Settings</strong>  </td>
<td style="text-align:right;">  cmd + ,  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Help</strong>  </td>
<td style="text-align:right;">  cmd + shift + / </td>
</tr>
</tbody>
</table>


<h2>Staging &amp; Commit Operations</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>Commit All&hellip; Screen</strong>  </td>
<td style="text-align:right;">  cmd + shift + c </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Commit options</strong>  </td>
<td style="text-align:right;">  cmd + shift + o </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Reset Selected File</strong> </td>
<td style="text-align:right;">  cmd + shift + r </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Diff</strong>  </td>
<td style="text-align:right;">  cmd + d  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Remove Selected File</strong> </td>
<td style="text-align:right;"> cmd + delete </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Search</strong>  </td>
<td style="text-align:right;">  cmd + shift + h </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Refresh</strong>  </td>
<td style="text-align:right;">  cmd + r  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Find</strong>  </td>
<td style="text-align:right;">  cmd + f  </td>
</tr>
</tbody>
</table>


<h2>Branch  Operations</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>Stash</strong>  </td>
<td style="text-align:right;">  cmd + shift + s </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Add Tag</strong>  </td>
<td style="text-align:right;">  cmd + shift + t </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Branch</strong>  </td>
<td style="text-align:right;">  cmd + shift + b </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Merge</strong>  </td>
<td style="text-align:right;">  cmd + shift + m </td>
</tr>
</tbody>
</table>


<h2>Repository Operations</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>Fetch</strong>  </td>
<td style="text-align:right;">  cmd + shift + f </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Pull from repository</strong>  </td>
<td style="text-align:right;">  cmd + shift + l </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Remotes</strong>  </td>
<td style="text-align:right;">  cmd + shift + , </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Open Working Copy</strong>  </td>
<td style="text-align:right;">  cmd + o  </td>
</tr>
</tbody>
</table>


<h2>Window (Normal Mac Shortcuts)</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>Quit</strong>  </td>
<td style="text-align:right;">  cmd + q  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Close window</strong>  </td>
<td style="text-align:right;">  cmd + w  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Hide</strong>  </td>
<td style="text-align:right;">  cmd + h  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Minimise</strong>  </td>
<td style="text-align:right;">  cmd + m  </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Questions for a Development Job]]></title>
    <link href="http://greena13.github.io/blog/2015/01/17/interview-questions-for-a-development-job/"/>
    <updated>2015-01-17T08:35:20+00:00</updated>
    <id>http://greena13.github.io/blog/2015/01/17/interview-questions-for-a-development-job</id>
    <content type="html"><![CDATA[<p>Last year I went through the rather exciting process of interviewing for a series of positions in search of a new development job. Having sat down and thought about what I had gained from my previous working environments, I compiled a list of questions that I thought would help me gauge the type of work I would be doing and the environment I would be a part of if I took the position.</p>

<p>In the hope that they may assist others, I have decided to document them here. I do not claim to have come up with them all myself (some are from friends and family, others I ran across somewhere on the web), but most were inspired by my own previous experience.</p>

<h2>People &amp; Company</h2>

<ul>
<li>What projects are currently on-going?</li>
<li>What is the current team like?</li>
<li>What sort of working environment do you offer?</li>
<li>How does the company support people of different personality types and empower them to get the best from themselves within your working environment?</li>
<li>How do you meet and communicate information within the company?</li>
<li>How do you share knowledge and resources within the company?</li>
<li>What sort of office hierarchy does the company use? How flexible is it?</li>
<li>What parts about how the office is organised and run are open to suggestions? What things are not?</li>
<li>What sized teams do people work in? How often do those teams change? How are they organised?</li>
<li>How do you invest in and support your developers?</li>
<li>What’s important to the company&rsquo;s culture?</li>
<li>What is the company’s goals or road map for the next 12 months?</li>
<li>What attracted you to the company?</li>
<li>How do most people choose to get to work each morning?</li>
</ul>


<h2>Job Responsibilities</h2>

<ul>
<li>Does this position involve design as well as development?</li>
<li>How much technical and creative freedom is to be expected?</li>
<li>What would be my role here in the company for the first few weeks and how will it change in 3 months time?</li>
<li>What is your best guess at the relative time spent developing new features and performing maintenance or bug fixing?</li>
</ul>


<h2>Technical</h2>

<ul>
<li>What technology could this role offer me the chance to work with?</li>
<li>What sort of testing and quality management measures do you have in place?</li>
<li>What software do you use in the office for version control, communication, deployment, data storage and bug tracking?</li>
<li>What hardware do you use for development, networking, storage and presenting?</li>
</ul>


<h2>Procedures</h2>

<ul>
<li>How do you plan work, estimate risk and agree on deadlines and milestones?</li>
<li>How involved are clients in the design process and in offering feedback?</li>
<li>What sort of review opportunities do you offer, both technical and performance?</li>
<li>How do you track development progress and allow developers to identify and raise problems early?</li>
<li>How do you handle work that is not going to plan, is late or not going to meet a deadline?</li>
<li>How does the company use data and data analysis in its day-to-day operation?</li>
<li>How flexible are the work hours?</li>
<li>Do you offer the freedom to occasionally work from home?</li>
</ul>


<h2>Feedback</h2>

<ul>
<li>Do you have any concerns with my ability to fulfil this role that I can address right now?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving Typing Speed]]></title>
    <link href="http://greena13.github.io/blog/2014/09/08/improving-typing-speed/"/>
    <updated>2014-09-08T16:01:41+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/08/improving-typing-speed</id>
    <content type="html"><![CDATA[<p>Always in search of productivity gains in my programming work, recently I have been looking into improving my typing speed. I read Jeff Atwood&rsquo;s <a href="http://blog.codinghorror.com/we-are-typists-first-programmers-second/">We Are Typists First, Programmers Second</a> and was enthused, despite a few commenters pointing out that typing speed is rarely the bottleneck when it comes to coding. Atwood rightly responded that it is a matter of mental &ldquo;bandwidth&rdquo;: ideally, typing should be a function performed entirely autonomously without error or disruption - the mental interference of having to consider which keys should be pressed or what corrective action is needed to rectify a mistype can be detrimental to productivity and creativity. This mirrors a similar sentiment discussed in the highly recommended <a href="http://www.amazon.co.uk/Practice-Perfect-Rules-Getting-Better-ebook/dp/B007ZQ34V4">Practice Perfect</a> by Doug Lemov, Erica Woolway and Katie Yezzi. Lemov and his co-authors discuss practicing monotonous, formulaic and repetitive skills to the point of being able to execute them effortlessly and flawlessly provides more cognitive horsepower for creativity and efficacy.</p>

<p>From working with colleague and peers, I gained the impression I had a pretty average typing speed for a regular computer user and programmer, but I wanted to try and find out a base line. I encountered many figures of average and exceptional typing speeds online, including some <a href="http://en.wikipedia.org/wiki/Words_per_minute">rather unbelievable world records</a>, but I could not find any information on the sort typing I was interested in: programming, using just about every key on the keyboard and not just the alphanumeric and punctuation keys. Unable to find the information I wanted, I resigned myself to using what I had. I took a few free typing tests I found online and got an average of about 60 WPM. This is, from what I can gather, above average and more than adequate to produce code efficiently.</p>

<p>However, I knew that my typing speed slowed considerably when I had to code as opposed to writing an email but I was unsure by exactly how much. So I went in search of a tool that might help me find out. I found <a href="https://typing.io/">typing.io</a>, a service that allows you to type code from open source repositories for a number of different languages and frameworks while it measures your typing speed and error rate. Each code excerpt is broken down into chunks called <em>lessons</em>. The free version of the tool was enough to tell me my average typing speed for programming was close to 30 WPM - a rather concerning reduction of 50%. What wasn&rsquo;t available in the free version, however, was exactly which keys it was that was dragging down my typing speed.</p>

<p>I decided to invest in the paid subscription to gain greater access to the lessons and more importantly, to identify which keystrokes were causing me the most problems. I thought if I could find the worst culprits, I could correct the <a href="http://en.wikipedia.org/wiki/Pareto_principle">fabled 20%</a> and get my 80% improvement.</p>

<p>So, I started working through the lessons and one of the most interesting things I discovered was how I seem to deviated from the prescribed correct finger placements to suit my preferred style of typing. Typing.io provides a virtual keyboard on the bottom of the screen while you are typing, illustrating key placement on your keyboard and the correct fingers that should be used to press it. I have quite long fingers and I oftentimes use this length to my advantage by favouring the longer index and middle fingers to reach keys that are technically designated as the responsibility of the shorter, ring and little fingers.</p>

<p>I wondered if perhaps this overuse of the fingers that sat in the center of the keyboard was contributing to the slower execution of keystrokes attached to keys located towards the outer edge of the board. So within the first 30 minutes of practice, after seeing no improvement in speed - and an increasing error rate as I tried to push myself out of frustration - I decided I would focus on returning to the correct form I had first learnt in highschool to see if it had any effect on my speed.</p>

<p>Initially my error rate soared to around 35%, but gradually it began to come down as I focused on addressing each problem key individually and after more than 11 hours of practice over a period of a week or so, I began to arrive back at levels of ease similar to those I experienced before adjusting my technique and a nice little boost in my speed of 3 - 5 WPM.</p>

<p>After almost 12 hours of use, I had a few observations of typing.io. While the report at the end of each &lsquo;lesson&rsquo; is helpful, it doesn&rsquo;t really tell me what I want to know and can be misleading at times. An infographic of a keyboard is shown and each key is coloured in increasingly warmer colours, with bright red being reserved for the keys you had mistyped the greatest percentage of times. This means that if you typed a key twice and mistyped it once, it appears redder than a key you typed 17 times and mistyped 8 times. This is obviously not useful for identifying the keys that you most often mistype. It would be more useful if data from previous lessons were included as well - perhaps weighted appropriately so the most recent previous lessons had a greater significance.</p>

<p>The infographic also doesn&rsquo;t appear to display any information about how long it takes to press particular keys and therefor where improvement could to be made. It would be further helpful if the tool provided you the top five or ten slowest key transitions, so that you knew which sequences of keys to practice - assuming they occurred frequently enough to justify the effort.</p>

<p>Another gripe is with the virtual keyboard that appears while you are typing, showing you the key and finger combination necessary to achieve the next keystroke. Often I mistyped something and was left confused as to where I had gone wrong; it would have been very helpful if the virtual keyboard had shown what key I had actually pressed so I could correct my form without having to glance down at the actual keyboard.</p>

<p>Typing.io also did not distinguish between which shift key was being pressed and it accepted keystrokes that had been generated with the incorrect shift key. This made it especially difficult to recognise mistakes and correct them because the tool was giving feedback indicating they were correct.</p>

<p>An interesting observation was that the greatest determinant of speed and error rate, was which language I was typing code for. It seems there are languages which lend themselves to be typed much quicker and with less errors. High-level languages with CamelCase variable and method naming conventions were by far the easiest to transcribe. They generally included less operator keystrokes, less opening and closing brackets and none of the dreaded shift + underscore key combination that is so slow and difficult to reach with you little finger. It has left with me with an interesting (but ultimately minor) consideration when selecting suitable languages for future projects.</p>

<p>Overall, this was an curious experience that I would tentatively claim as a measured success. It remains unclear whether adjusting my technique to be more consistent with the suggested finger configurations has improved my typing speed, or whether I just got more accustom to the nuances of the program. I intend to continue with the program with a less intensive regime to see if more clearer results emerge after a longer time period.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factories]]></title>
    <link href="http://greena13.github.io/blog/2014/09/06/factories/"/>
    <updated>2014-09-06T18:24:52+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/06/factories</id>
    <content type="html"><![CDATA[<p>The finer points of the different factory design patterns has always escaped me, so I decided to look it up recently and found <a href="http://stackoverflow.com/questions/4209791/design-patterns-abstract-factory-vs-factory-method">this rather helpful stackoverflow answer</a>. I thought I&rsquo;d summarise what I learnt below (all diagrams were generated using <a href="www.yuml.me">yUML</a>).</p>

<p>A factory design pattern in the most general sense is one that entrusts a class or object with the creation or instantiation of another object. Commonly, the class or object that does the creating is called the Factory object and the object being created is called the Product object. Bare this in mind when viewing the diagrams that follow.</p>

<h2>Static Factories</h2>

<p>A <em>Static Factory</em> is a class that defines a static method that generates various subtypes of a Product. It accepts an argument to determine which Product subtype to generate (shown as a string here, but it could be just about anything). The static factory does not need to be instantiated in order to generate a Product subtype. In some languages, Product&rsquo;s constructor is typically made private so it can only be called within the Product class and thereby prevent the factory from being bypassed.</p>

<p>If the system is later updated and a new Product subtypes is added, the static factory class must be updated to include the new Product subtype.</p>

<p><strong>NB:</strong> I&rsquo;ve used underscore here to indicate a static method as yUML doesn&rsquo;t appear to be able to underline text.</p>

<p><img src="http://www.yuml.me/1e74d10f" alt="Static Factory" /></p>

<h2>Simple Factories</h2>

<p>While static factories define a static method for generating Product subtypes, a <em>Simple Factory</em> is a <em>separate</em> class that defines an <em>instance</em> method to generate instances of Product subtypes. Again, the method typically accepts an argument to indicate which Product subtype to generate. The Product constructor&rsquo;s visibility can be restricted to <em>package</em> if the simple factory and product are packaged together.</p>

<p>The simple factory class must first be instantiated before it can be used to generate a Product instance. Similar to static factories, if a new Product subtype is added, the simple factory class needs to be updated to include it.</p>

<p><img src="http://www.yuml.me/b1f57365" alt="Simple Factory" /></p>

<h2>Factory Method</h2>

<p>A <em>Factory Method</em> class introduces another level of abstraction by defining a <em>Factory Method</em> interface that includes a method to produce Product subtypes. Concrete factory method classes implement this interface and define the factory method to generate Product subtypes related to its (the concrete Factory Method class) own type. Again, you need to create an instance of the concrete Factory Method class before you can create an instance of a Product subtype.</p>

<p>If a new Product subtype is added, each concrete factory method class that needs to be able to generate the new Product subtype, will need to be updated.</p>

<p><img src="http://www.yuml.me/d7f2e8c3" alt="Factory Method" /></p>

<h2>Abstract Factories</h2>

<p>The <em>Abstract Factories</em> is useful when when you have several Product objects that are related conceptually, but not through inheritance. It adds a factory method to the interface for each Product object (each of which has its own set of Product subtypes). It can be thought of as overlapping two or more Factory Methods on top of each other.</p>

<p><img src="http://www.yuml.me/989345bf" alt="Abstract Factory Method" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inversion of Control]]></title>
    <link href="http://greena13.github.io/blog/2014/09/03/inversion-of-control/"/>
    <updated>2014-09-03T08:52:19+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/03/inversion-of-control</id>
    <content type="html"><![CDATA[<p>Popularised by Robert C. Martin and Martin Fowler, <em>Inversion of Control</em> is a design principle where <em>custom code components</em> receive the control flow from general <em>library components</em>, similar to custom code modules being written for a larger general-purpose framework. This is an inversion of the traditional control flow found in <a href="http://greena13.github.io/blog/2014/08/31/procedural-programming">procedural programming</a> where the custom components encode the program&rsquo;s functionality in terms of general purpose libraries. The pattern offers the advantage of making the program more modular and extendable.</p>

<p>Inversion of control is related to Martin&rsquo;s <a href="http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming">dependency inversion principle</a>, which is concerned with having high and low level code depend an abstraction, rather than directly on each other, thereby inverting the direction of dependency. This is analogous to the way high-level, general components yield control to the low-level specific code in Inversion of Control, thereby inverting the traditional flow of control.</p>

<p>Although the term is most often used in the context of object-oriented programming, there are design patterns with wider applications that follow the Inversion of Control principle, such as software frameworks, callbacks and <a href="http://greena13.github.io/blog/2014/09/02/dependency-injection">dependency injection</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injection]]></title>
    <link href="http://greena13.github.io/blog/2014/09/02/dependency-injection/"/>
    <updated>2014-09-02T10:56:14+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/02/dependency-injection</id>
    <content type="html"><![CDATA[<p><em>Dependency Injection</em> is a software design pattern that works by <em>injecting</em> a reference to a dependency object into a dependent one, where it is stored and made part of the dependent object&rsquo;s state and behaviour. This separates the creation of the dependency object from the dependent object&rsquo;s code. In doing so, it more loosely couples the two objects and abides by the principles of <a href="http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming">Dependency Inversion</a> (because the dependent object is coupled with the dependency object&rsquo;s interface, rather than directly) and <a href="http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming">Single Responsibility</a> (because the dependent object is only responsible for its own behaviour, not the creation of the dependency object).</p>

<h2>Design Pattern Elements</h2>

<p>The pattern involves 4 elements:</p>

<ul>
<li><strong>Dependency Object</strong>: A concrete dependency object</li>
<li><strong>Dependent Object</strong>: A concrete dependent object that relies on the dependency one</li>
<li><strong>Dependency Interface</strong>: An interface used by the dependent object to communicate with the dependency object</li>
<li><strong>Injector Object</strong>: A concrete injector object responsible for injecting the dependency object into the dependent one</li>
</ul>


<p>The implementation of the Dependency Injection pattern is similar to that of the Strategy pattern, but the semantics differ. The same dependency object is intended to be used for the duration of the dependent object&rsquo;s lifetime, while a strategy often needs to be interchanged throughout an object&rsquo;s lifetime.</p>

<h2>Depdency Injection Techniques</h2>

<p>Martin Fowler defined 3 ways of injecting a dependency:</p>

<ul>
<li><strong>Constructor Injection</strong>: Dependencies are provided to the dependent object&rsquo;s constructor at the time of creation. This requires the dependency object to be instantiated before the dependent instance and is the preferred method because it avoids the dependent instance ever being in an invalid state. Dependencies injected in this way, however, don&rsquo;t permit the interchanging of the dependency instance.</li>
<li><strong>Setter Injection</strong>: The dependent object provides a setter method that accepts the dependency. This can lead to the problem of needing to make sure the dependency has been set before the dependent object is used; furthermore, it does not explicitly state the relationship between the dependent and dependency object, which is <a href="http://greena13.github.io/blog/2014/08/21/reducing-code-complexity">considered bad practice</a>. It does, however, allow changing the dependency object later in the dependent object&rsquo;s lifetime.</li>
<li><strong>Interface Injection</strong>: The dependency interface provides a method that accepts the dependent object, for the dependency object to inject itself into the dependent object. For this to work, the dependent object must also have a setter method for the dependency object to use to inject itself. This differs from the <em>Setter Injection</em> technique because it goes one step further and makes the dependency object itself a <em>Dependency Injector</em>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Five Principles of Object-Oriented Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming/"/>
    <updated>2014-09-01T20:18:37+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming</id>
    <content type="html"><![CDATA[<p><strong>SOLID</strong> is an acronym mnemonic coined by Michael Feathers for Robert C. Martin&rsquo;s &ldquo;first five principles&rdquo; for object-oriented programming. Each concept is worth looking at briefly so I have tried to summarise the important points of each below.</p>

<h2>Single Responsibility Principle</h2>

<p>Robert C. Martin introduced in his book <a href="http://www.amazon.co.uk/Software-Development-Principles-Patterns-Practices/dp/0132760584">Agile Software Development, Principles, Patterns and Practices</a> the <em>Single Responsibility Principe</em>, which states code modules (whether they be classes, methods, variables, etc.) should have a single responsibility, or rather a single reason for the module to need updating if a program&rsquo;s specifications were ever to change. Examples of the application of this principle can be seen in the separation of <em>presentation</em> and <em>content</em> commonly performed in object-oriented systems.</p>

<h2>Open/Closed Principle</h2>

<p>The <em>Open/Closed Principle</em> has always referred to the fact that modules should &ldquo;be open for extension but closed for modification&rdquo;, but exactly what that meant has had two different interpretations.</p>

<h3>Meyer&rsquo;s Open/Closed Principle</h3>

<p>Bertrand Meyer is attributed with creating the term <em>open/closed principle</em> in the 1988 book, <a href="http://www.amazon.co.uk/Object-Oriented-Software-Construction-Prentice-Hall-Resource/dp/0136291554">Object Oriented Software Construction</a>. Meyer&rsquo;s definition of the rule prescribed that once a module had been coded it should only be altered directly to fix errors - all other modifications should be completed by creating a new class - usually via inheritance to reuse code from the original class. In this form of the open/closed principle, the new class need <em>not</em> reuse the interface of the old class.</p>

<h3>Polymorphic Open/Closed Principle</h3>

<p>In the 1990s the term was largely redefined to refer to the use of abstracted interfaces instead of concrete ones. In contrast to Meyer&rsquo;s version of the principle, concrete classes could be modified and swapped out, so long as the module&rsquo;s <em>interface</em> was closed to modifications. According to the rule, changes or extensions could be performed by altering the concrete implementations freely, so long as the original interface was persisted and only added to.</p>

<p>Where Meyer&rsquo;s principle preserved <em>implementation</em> and allowed for the modification of interfaces, the polymorphic open/closed principle preserves <em>interfaces</em> and allows for the modification of implementations.</p>

<p>Robert C. Martin&rsquo;s article in 1996, <em>The Open-Closed Principle</em>, was instrumental in forwarding this approach and it is the latter definition that is in common use today.</p>

<h2>Liskov Substitution Principle</h2>

<p>The <em>Liskov Substitution Principle</em> put forth by Barbara Liskov&rsquo;s 1987 &lsquo;<em>Data abstraction and hierarchy</em>&rsquo; states that a programmer should be able to substitute an object with an instance of one of its subtypes without altering the surrounding code&rsquo;s behaviour. This is another way of saying that any subtype of an object must completely honour the interface and observable behaviour of its supertype.</p>

<p>To achieve this, a number of requirements must be met that govern the subtype&rsquo;s signature:</p>

<ul>
<li>It must have <a href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance">contravariant method arguments</a></li>
<li>It must have <a href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance">covariant method return types</a></li>
<li>No new exceptions should be thrown from subtype class&rsquo;s methods other than when they are themselves subtypes of exceptions thrown by the supertype</li>
</ul>


<p>Beyond maintaining the same interface, a number of behavioural conditions for the subtype must also be satisfied:</p>

<ul>
<li>Preconditions are not to be strengthened in the subtype, i.e. the subtype must not depend on any more prerequisites than its supertype</li>
<li>Postconditions cannot be weakened in the subtype, i.e. the subtype must perform the same behaviour as the supertype</li>
<li><a href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance">Method arguments invariants</a> and <a href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance">method return type invariants</a> of the supertype must be preserved in a subtype</li>
<li>The introduction of new methods cannot allow the subtype to enter a state that would not have been possible in the supertype and thereby change its behaviour; This is often referred to as the <em>History Constraint</em>.</li>
</ul>


<h2>Interface Segregation Principle</h2>

<p>The <em>Interface-Segregation Principle</em> states client code should not be able to see any interface points it does not need access to in order to function. Access should be done instead via a <em>role interface</em>, which is tailored to the particular needs of the client code. In short, many specific interfaces are better than a single general purpose one.</p>

<h2>Dependency Inversion Principle</h2>

<p><em>Dependency Inversion</em> is a design pattern that focuses on decoupling software components of different abstractions. Traditionally, high-level components defined functionality in broad strokes and low-level components grew to support the high level code.</p>

<p>Dependency Inversion is based on the notion that rather than having code components with a high level of abstraction depending directly on code components with a low level of abstraction, both components should instead depend on an abstraction. The details of these components should be coded to the abstractions, and not the abstractions to the details.</p>

<p>This design pattern separates the code responsible for connecting the high-level components to the low-level components into an abstract interface, simplifying each component and allowing greater reusability. Often the components are divided into different libraries where the high-level components and interfaces for the functionality needed of the low-level code are bundled together; the low level components are given their own package. Because the interfaces the low-level components implement (and thus depend on) are bundled with the high-level code, the dependency flows up and it is this inversion of dependency direction for which the design pattern gets its name.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Covariance and Contravariance]]></title>
    <link href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance/"/>
    <updated>2014-09-01T16:37:28+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance</id>
    <content type="html"><![CDATA[<p>I have found variance one of the more difficult things to get my head around in computer science, so I have tried to document the basics as a way of teaching myself.</p>

<p><em>Variance</em> in object-oriented programming refers to how subtyping works between complex types. For example, if <em>B</em> is a subtype of <em>A</em> and <em>CA</em> and <em>CB</em> are enumerable collections (our complex types) that contain items of type <em>A</em> and <em>B</em>, respectively, is the collection <em>CB</em> a subtype of the collection <em>CA</em>?</p>

<ul>
<li>If the enumerable collection is <strong>covariant</strong> then <em>CB</em> is a subtype of <em>CA</em> and the subtyping relation is said to be <strong>preserved</strong>.</li>
<li>If the enumerable collection is <strong>contravariant</strong> then <em>CB</em> is a subtype of <em>CA</em> and the subtyping relation is said to be <strong>reversed</strong>.</li>
<li>If the enumerable collection is <strong>invariant</strong> then <em>CA</em> and <em>CB</em> are not related by type at all and the subtyping relation is said to be <strong>ignored</strong>.</li>
</ul>


<h2>Argument And Return Type Variance</h2>

<p>When inheriting from a parent class and overwriting a method, a programmer is faced with a number of options for the argument and return types of that method, depending on the programming language being used.</p>

<p>Considering the argument type first, programming languages will either offer invariant, contravariant or covariant argument types. A language that offers <em>invariant argument types</em> (C++, Java, C#) requires the arguments of the overriding method to be of the same type as the overridden method. Languages that offer <em>contravariant argument types</em> allow arguments to be supertypes of the overridden method&rsquo;s arguments. Similarly, languages offering <em>covariant argument types</em> permit arguments of subtypes of those for the overridden method.</p>

<p>Return types are much the same; languages offer either covariant (C++, Java) or invariant (C#) return types.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/09/01/functional-programming/"/>
    <updated>2014-09-01T09:52:42+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/01/functional-programming</id>
    <content type="html"><![CDATA[<p>As part of my continuing efforts to clarify fundamental software engineering concepts, I recently read and summarised the most interesting points of the <a href="http://en.wikipedia.org/wiki/Functional_programming">functional programming</a> Wikipedia page.</p>

<p>Functional programming is a <a href="http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming">declarative programming</a> paradigm that treats computations as evaluations of mathematical functions and avoids referencing a system state and mutable data. It was developed, primarily, as an attempt to avoid side effects and make subroutines much easier to reason about. It introduces a number of interesting and useful concepts that are not often encountered or emphasised in object-orient programming.</p>

<h2>Pure Functions</h2>

<p>Pure functions are those that have no side effects and depend only on their argument values, not on any system information; consequently, they return the same value for a given set of parameter values every time. They have some unique properties useful for code optimisation and reasoning:</p>

<ul>
<li><p>If the result of a pure expression is not used, it can be removed without altering the code&rsquo;s behaviour.</p></li>
<li><p>If a pure function is called with arguments that are themselves pure functions, or don&rsquo;t have side effects, then the result can be cached and returned if the function is called with the same parameter values again.</p></li>
<li><p>If there is no dependency amongst a collection of functions, they can be run in any order with the same result.</p></li>
</ul>


<h2>Referential Transparency</h2>

<p>Referential transparency is a property of code that refers to whether or not it can be replaced with its calculated value without changing its behaviour. If this is indeed the case, the code is said to be <em>referentially transparent</em>; if the code cannot be replaced with its value without altering system behaviour then it is <em>referentially opaque</em>.</p>

<p>All pure function calls are referentially transparent as they do not depend on or change system behaviour and should always return the same result when given the same arguments.</p>

<h2>First-class Functions</h2>

<p>First-class functions are those which can appear anywhere in a program that other first-class entities (such as numbers) can. This notably includes as arguments and return values for other functions. They can also accept and return other functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imperative Programming vs Declarative Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming/"/>
    <updated>2014-08-31T10:37:39+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming</id>
    <content type="html"><![CDATA[<p>I was recently reading the Wikipedia articles of <a href="http://en.wikipedia.org/wiki/Imperative_programming">imperative programming</a> and <a href="http://en.wikipedia.org/wiki/Declarative_programming">declarative programming</a> to brush up on my understanding of the distinction.</p>

<h2>Imperative Programming</h2>

<p>Imperative programming is concerned with describing how a program should achieve its functionality; not only <em>what</em> should be done, but also <em>how</em> it should be done is encoded. The movement of data and execution of operations are explicitly specified, if only at an abstract level; that is to say, an imperative program is concerned with implementation as much as it is logic functionality.</p>

<p>Imperative programming has its roots in assembly language and machine code, however, modern high-level languages offer more human-friendly syntax and aggregate functionality. <a href="http://greena13.github.io/blog/2014/08/31/procedural-programming">Procedural programming</a> is a common paradigm that falls within imperative programming.</p>

<h2>Declarative Programming</h2>

<p>Declarative programming focuses on expressing the logic of a computation without needing to specify it in terms of low-level operations. Declarative programming emerged out of an attempt to minimise side-effects and focus on a program&rsquo;s primary function, leaving the implementation details to the language itself.</p>

<p>Common examples of declarative programming are SQL, regular expressions and functional programming.</p>

<p>It seems the difference between the two programming ideologies is largely concerned with the distribution of responsibility: in imperative programming the programmer is responsible for specifying logic functionality and implementation details while in declarative programming the language takes ownership of the implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procedural Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/31/procedural-programming/"/>
    <updated>2014-08-31T08:42:16+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/31/procedural-programming</id>
    <content type="html"><![CDATA[<p>I have been recently trying to improve my understanding of some of the fundamental concepts in computer science. I looked at <em>procedural programming</em> this time and attempted to extract the important points of the <a href="http://en.wikipedia.org/wiki/Procedural_programming">Wikipedia article</a>.</p>

<p>Procedural programming is derived from <a href="http://greena13.github.io/blog/2014/08/30/structured-programming">structured programming</a> and based on the concept of a procedure being a sequence of steps to be executed to achieve a reported goal. In this respect, procedural languages are also imperative languages because they contain not only what to do, but how to do it, by referencing the system state.</p>

<p>Structurally, there is considerable overlap between procedural programming and functional programming as they both originate in structured programming. Functional programs have <em>functions</em> as their routines while procedural programs have <em>procedures</em>. The intent behind functional languages is different, however, as most of the imperative elements are removed or made second-class citizens and functional control constructs are used instead. Procedural languages model programs as a list of imperative commands that may alter a system&rsquo;s state. Functional languages, on the other hand, are designed to support <em>pure functions</em>, or routines that depend <em>only on their inputs</em> and nothing else, and which <em>do not</em> alter the system state.</p>

<p>Procedural programming differs from object-oriented in the way data and functionality are bundled. Procedural programming deals with variables, data structures and subroutines; object-oriented programming uses objects that expose behaviour (methods) and data (attributes) via interfaces. In procedural programming, procedures operate on data structures while in object-oriented programming methods and data attributes are bundled together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Structured Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/30/structured-programming/"/>
    <updated>2014-08-30T22:11:41+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/30/structured-programming</id>
    <content type="html"><![CDATA[<p>I have been recently trying to get a better handle on some terms I possess a casual understanding of and use regularly in conversation, but suspect I don&rsquo;t really have a full appreciation for. <em>Structured programming</em> was the first of these terms. What follows is a summary of the more interesting bits of the <a href="http://en.wikipedia.org/wiki/Structured_programming">Wikipedia article</a>.</p>

<h2>Structured Programming</h2>

<p>Structured programming emerged, at least in part, from the Edsger Dijkstra&rsquo;s paper &lsquo;<em>GOTO Considered Harmful</em>&rsquo;, warning of the propensity for the <code>goto</code> control statement to lead to <em>Spaghetti Code</em>.</p>

<h3>Structured Programming Theory</h3>

<p>Structured program theory offers 3 ways of connecting statements, which are sufficient to express any computable function, or all of the operations of a <em>Turing Machine</em>:</p>

<ul>
<li>As <strong>Sequences</strong>: sequentially executed statements and subroutines</li>
<li>As <strong>Selections</strong>: conditionally executed statements and subroutines, depending on system state</li>
<li>As <strong>Iterations</strong>: repeatedly executed statements and subroutines until some system state is achieved or all members of a collection are exhausted</li>
</ul>


<h3>Structured Programming</h3>

<p>Structured programming implements the 3 ways of connecting statements using 3 control structures:</p>

<ul>
<li><strong>Subroutines</strong>: groupings of code that can be evoked using a single statement, eg. procedures, functions or methods</li>
<li><strong>Block Structures</strong>: collection of statements evoked together under the same conditions, eg. blocks designated with <code>if</code> and <code>end</code>.</li>
<li><strong>Loops</strong>: collection of statements that are evoked repeatedly together until a particular state is reached, eg <code>for</code> and <code>while</code> loops.</li>
</ul>


<h3>Single Exit Point Rule</h3>

<p>Structured programming advocates a single entry and exit point for each subroutine to make reasoning about them easier and reduce the potential for particular types of bugs to occur. Many have argued trying to abide by this principle can add unnecessary complexity and many programming languages facilitate subroutines with multiple exit points, eg. <code>return</code>, <code>break</code> and <code>continue</code>.</p>

<p>When coding subroutines with multiple exits, care must be taken to ensure that cleanup code is run at the end of all execution paths (think of the <code>finally</code> block provided by some programming languages for exception handling).</p>

<p>The computer scientist David Watt considered the justification for avoiding <code>goto</code> statements (Watts termed them <em>jump sequencers</em>) in <a href="http://www.amazon.co.uk/Programming-Language-Concepts-Computer-Science/dp/0470853204">his textbook</a>. He suggests <code>goto</code> are harmful to the understandability of code because the reader must first go to the memory address or subroutine definition to find out the intent behind the jump; however, Watt argues the intent behind what he terms <em>escape sequencers</em> (<code>return</code>, <code>continue</code> and <code>break</code>) is much clearer and therefore do not create the same problem.</p>

<h3>Exception Handling</h3>

<p>Exceptions pose a particular challenge for trying to abide by the single exit point rule. Watts notes that <em>exception sequencers</em> usually need the exception handler to reside at a more contextually aware area of the code, away from the low-level code where it occurs (the exception is <em>thrown</em> or <em>raised</em>). Kenneth Louden and Lambert add in <a href="http://www.amazon.com/Programming-Languages-Principles-Kenneth-Louden/dp/1111529418">their textbook</a> that exception handling is not structured programming because the setup of control and the actual transfer of control happen in different places in the code. Furthermore, <a href="http://en.wikipedia.org/wiki/Structured_programming#cite_note-Bansal2013-13">it has been noted by some</a> that exceptions can even cause control structures that would normally conform to the single exit rule to violate it: for example, a <code>for</code> loop where an exception is thrown in the instantiation of the first iteration - the loop would not get to run and exit as intended.</p>

<h3>Single Entry Point Rule</h3>

<p>Routines can also have multiple entry points and violate the single entry rule, most notably as re-entry into a <em>coroutine</em>; this happens when a subroutine yields control to another but maintains its own state and can be resumed where it was left off. This has applications in input/output and network streams as well as concurrency and state machines in general.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Spaced Repetition to Learn Programming Languages]]></title>
    <link href="http://greena13.github.io/blog/2014/08/28/using-spaced-repetition-to-learn-programming-languages/"/>
    <updated>2014-08-28T09:58:41+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/28/using-spaced-repetition-to-learn-programming-languages</id>
    <content type="html"><![CDATA[<p>I have already written on <a href="blog/2014/08/26/creating-cards-for-spaced-repetition">tips for creating spaced repetition cards</a>, but here I hope to summarise a few of Jack Kinsella&rsquo;s tips specific to <a href="http://www.jackkinsella.ie/2011/12/05/janki-method.html">memorising programming languages</a> (and <a href="http://www.oxbridgenotes.co.uk/articles/janki_method_refined">here</a> also).</p>

<h2>Use Screenshots</h2>

<p>Rather than typing out code manually onto your cards, screenshots should be used. Aside from the obvious and significant time saving, screenshots provide you with syntax highlighting with no additional effort, creating a richer image for the brain to process and remember, with the salient parts already highlighted. Kinsella also claims - perhaps rightly so - that taking screenshots of the original source may draw upon situational memory to help aid in recollection.</p>

<h2>Focus on What&rsquo;s Available - Not How to Use It</h2>

<p>When you are committing functions and methods to memory, focus on what they are called and what they do rather than concerning yourself with details of parameter order and return types. When you come to committing a second or third language to memory, this information will likely become conflicting content and cause you endless problems as you recall information for the wrong language.</p>

<p>When you sit down to program, what is of greatest use is what functions or methods are available in the language. This is to avoid naively reimplementing functionality already on offer, or recreating an existing and well-known solution. Once you know what functions you wish to use, a decent IDE will help you out with the rest.</p>

<h2>Make Clear What is Language Agnostic</h2>

<p>Often there are functions and methods with the same or similar names and functionality offered by different languages and libraries. Make sure to encode what these functions are, and any differences they may have between languages. It is often helpful to define other language&rsquo;s implementations relative to one you are already very familiar with.</p>

<h2>Create Cards From Good Code</h2>

<p>When you encounter a good piece of code - perhaps from a well-maintained open source repository or a well-reviewed tutorial - create cards from it and quiz yourself on its merits, or even pitfalls if you are able to find them. This will help with you ability to read and analyse code and will impart good practices with concrete examples.</p>

<h2>Process Information Can Be Difficult to Encode</h2>

<p>Processes and ordered information is difficult to store and remember in Anki because it suffers from the same problems as sets and enumerations. The process should be encoded as clozed deletions, or care should be taken to encoding a clear link between each step in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Cards for Spaced Repetition]]></title>
    <link href="http://greena13.github.io/blog/2014/08/26/creating-cards-for-spaced-repetition/"/>
    <updated>2014-08-26T14:44:22+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/26/creating-cards-for-spaced-repetition</id>
    <content type="html"><![CDATA[<p><em>Spaced repetition</em> is a revision technique that minimises the number of exposures to a piece of subject matter required to commit it to longterm memory. This is achieved by altering the frequency in which items of revision material are shown to the user based on how easily it was recalled last time; the content is shown to the user right before he or she is due to forget it - and not before, avoiding wasting time on premature revision. <a href="http://ankisrs.net/">Anki</a> is a free and popular tool available on Windows, Mac and mobile devices that allows you to synchronise your progress between all your devices via <a href="https://ankiweb.net">Ankiweb</a>.</p>

<p>Anki works by showing a user a series of <em>flash cards</em> in a <em>deck</em> and prompting for a response for each one. When the user comes up with an answer (or gives up), they press a button to reveal the correct response. The user then selects whether they wish to be quizzed on this again soon (because they got it wrong, or were not satisfied with how quickly they came up with the answer) or some time further in the future (because it was too easy). The algorithm for managing what material is presented and when, is very effective and can be customised based on the user&rsquo;s preferred amount of material and time available for revision each day. Anki also includes a number of more advanced features that won&rsquo;t really be covered here.</p>

<p>I have recently been looking into spaced repetition to <a href="http://www.smashingmagazine.com/2014/08/19/mastering-a-programming-language-using-spaced-repetition/">improve my recall of a number of programming languages</a>. I have encountered good advice on maximising the effectiveness of spaced repetition by ensuring the content and format of flashcards is conducive to fast and meaningful memorisation. Here is a summary of the advice that stood out to me, taken primarily from Mattan Griffel&rsquo;s <a href="http://www.smashingmagazine.com/2014/08/19/mastering-a-programming-language-using-spaced-repetition/">Tips For Mastering A Programming Language Using Spaced Repetition</a>, Jack Kinsella&rsquo;s <a href="http://www.jackkinsella.ie/2011/12/05/janki-method.html">Janki Method</a>, Derek Sivers&#8217; <a href="http://sivers.org/srs">Memorizing a programming language using spaced repetition software</a> and Dr Piotr Wozniak&rsquo;s <a href="http://www.supermemo.com/articles/20rules.htm">Twenty rules of formulating knowledge</a>. Each should be consulted in addition to reading this article for further examples and discussion.</p>

<h2>Common Memorisation Mistakes</h2>

<h3>Avoiding Activated Ignorance</h3>

<p>Spaced repetition and flash cards are for remembering things, <em>not learning them</em>. Subject material should only ever been encoded in cards after you have understood it. Committing anything that is poorly comprehended or misunderstood can be very damaging and will likely lead to <em>activated ignorance</em>, or information that has been memorised but is false or not completely true. This is a waste of time and will lead to the wrong information making itself available in your mind when it matters most; it also has the secondary and perhaps more damaging effect of providing you with a erroneous foundation in which to receive and process new information, creating more far-reaching errors in comprehension.</p>

<h3>Avoiding Inert Information</h3>

<p>Only add cards to your deck for knowledge you understand to avoid <em>inert information</em>, or information that is although memorised, has not been correctly understood &ndash; despite being under the impression you understand it. These facts or figures sit in your memory and dutifully present themselves when recalled, but when push comes to shove, offer no deeper understanding. An example of this would be slavishly memorising that TCP stands for <em>Transmission Control Protocol</em>, but having no knowledge of how this protocol actually functions or its place in communication.</p>

<p>To avoid this, you should develop a sound understanding of the full context of a subject before settling down to memorise its finer points. Particular attention and time should be spent on understanding the fundamentals to ensure a strong mental framework is in place to receive and evaluate new knowledge as it is encountered and memorised.</p>

<p>Spaced repetition should not be performed alone and content should not be memorised in isolation - learning without practicing the skills and information you are committing to memory will divorce the knowledge from its use and make it difficult to reconcile with how to make it work for you in your work and life. You need to use what you learn to discover important nuances or details in applying what you&rsquo;re memorising.</p>

<h2>Encoding Knowledge</h2>

<h3>Abstraction and Chunking</h3>

<p>Effectively encoding knowledge into Anki cards is vital to optimising how effective your revision sessions are. It is no surprise that simple material is easier to commit to memory and recall once its there, and so information should be formulated as simply and succinctly as possible. The number of words and concepts involved in each card should be kept to an absolute minimum.</p>

<p>It is possible to break a complicated concept up into smaller conceptual units through a process known as <em>chunking</em>. Your goal should be to create simple, unambiguous mental associations and neural pathways to follow each time you wish to recall something. Note that this is not the same as creating a single representation or association of a concept in your mind. On the contrary, it is beneficial to have as many of these simple pathways to the same concept as possible, to increase your chances and the number of contexts in which it is easy to recall the material.</p>

<p>Further to this end, concrete examples of concepts are better to encode on your cards than the abstract concepts themselves. Concrete examples stick in memory longer and if a series of examples are chosen wisely, it should be easier to induce the abstract concept when required rather than having to memorise it and use it to deduce applications later on. However, several similar cards should be created with slightly different answers when there is an important or subtle conceptual distinction or <em>gotcha</em> that you should know.</p>

<p>Not only does breaking up concepts into their smallest constituents benefit your brain&rsquo;s ability to recall it later, but it actually helps Anki&rsquo;s algorithm perform  more effectively because simple concepts are easier to schedule efficiently than larger, more abstract ones. This is because Anki is able to remind you of ony the concepts you have likely forgotten, leaving the ones you have memorised out. You are also more likely to forget all or part of a complicated idea and will need to be reminded of it more frequently, despite knowing some or most of the concept.</p>

<h3>Things You Should Avoid Memorising</h3>

<p>Sets, or groupings of items without a clear or predefined order, are very difficult to remember and encode. Where possible, these should be converted to <em>enumerations</em>, or ordered sets, by linking items up in a predefined and consistent order. Enumerations are easier to recall than sets because a clear link between consecutive items exists that you brain can easily traverse to retrieve all items in the group.  Order should be chosen carefully, however, as it is more difficult to retrieve individual items in an order different to the one you have encoded. This order can be arbitrary, but should be easy to remember and preferably have meaning within the context of the material you are memorising, or match the order in which you are likely to need to retrieve them.</p>

<p>Enumerations are still difficult to memorise and should be avoided. Where possible, enumerations should be converted to <em>cloze deletions</em>, or sentences where some words have been omitted and you must fill in the blanks. These are typically easier to remember than sets and enumerations and are based on the concept of <a href="http://www.supermemo.com/help/read.htm"><em>incremental reading</em></a>.</p>

<h3>Memory Conflicts</h3>

<p>When memorising many concepts, you need to be aware of inadvertantly memorising something that may conflict with something you already know. This often happens when memorising a lot of numbers, whether dates or quantities, people often find a long-held memory difficult or impossible to retrieve after learning a new peice of information. These conflicts are difficult to predict and are better to be avoided by making concepts you memorised as unambiguous and explicit as possible to minimise the chance of inadvertently reallocating a particular neural pathway to new conflicting information.</p>

<h3>Strengthening Memories</h3>

<p>A number of techniques exist for strengthening memories and increasing their intensity and duration. There is a great body of literature on mnemonics available for associating and linking items to make them easier to recall at later date. Alternatively, you may attempt to consciously integrate a new piece of information into you memory by linking it to a memory or memories you already have. Concepts are often easier to recall when they are defined relative to things we are already familiar with.</p>

<p>Furthermore, you can personalise information with experience or examples from your own life. The brain gives highest priority to information that has the greatest relevance to your life and relationships. By hooking a new piece of information to an existing memory with special significance or associated emotion, you are capitalising on this inherent prioritisation.</p>

<p>Memories can also be linked to contexts by creating something akin to different modes or domains for which your brain should draw memories from, given a certain environment or context. This often allows concepts to be expressed in fewer words and relative to other concepts already in a given context&rsquo;s conceptual landscape.</p>

<h3>Formatting</h3>

<p>The formatting of cards should aim to convey concepts as quickly and richly as possible. Key concepts or words should be <strong>emboldened</strong> to help them stand out and create a unique visual stimulus the brain can recognise from previous revision sessions and automatically retrieve the memory of what is on the card.</p>

<p>The usage of imagery enriches stimulus where text cannot and produces memories that are not only more evocative but more easily recalled due to the added sensory dimensions of sight embedded in the memory. Sounds and short video clips can be used to capitalise on this effect even further. Many individuals have predilections for certain sense and you may find, for example, auditory memories are stronger than visual ones.</p>

<h3>Prompts (Front of the Card)</h3>

<p>The question or prompt on the front of each card should be phrased to mimic how it will likely be retrieved when needed. The solution to a problem should be encoded with a prompt that matches how you are likely to encounter that problem during your day-to-day work, rather than extracted into an abstraction that is likely to require cognitive effort to rework it into actionable knowledge. This is a corollary of the fact that memories stored using simple and strong neural pathways are easiest to retrieve.</p>

<p>Jack Kinsella <a href="http://www.oxbridgenotes.co.uk/articles/janki_method_refined">suggests</a> that before creating a card, brainstorm possible uses for the knowledge and use this insight to cater how you record the information. This can be particularly effective when combined with cloze deletion; phrases can be created based on problems or situations you are likely face where you will need the information you are encoding. If it is proving difficult to come up with a situation where the material will be needed - it is probably the case that this information will not be worth remembering.</p>

<h3>Answer (Back of the Card)</h3>

<p>The amount of cognitive effort required to decide if you got the correct answer or not on a card should be kept at a minimum. Answers that take too long to confirm as correct (usually because of ambiguity or concepts expressed in a wordy way) will eat into your cognitive reserves and draw out revision sessions to be longer than they need to. It is also an indication that the concept being encoded is too complicated and should be broken down into smaller, simpler ones.</p>

<p>If the material cannot be simplified and it is still taking too long to confirm as correct, try putting the important parts in <strong>bold</strong> or a larger font size to stand out more.</p>

<h2>What to Encode</h2>

<h3>Finding Things to Remember</h3>

<p>To get the most out of revising, you should first decide what material is most useful to have memorised. This is usually things that will save you time and resources you would otherwise spend to look it up or find out; it is a good idea to save things you would normally have to bookmark or search for on a regular basis, or insights that save you considerable time but are difficult to remember because they are rarely used.</p>

<p>It is good to get into the habit of creating new Anki cards for every time you learn something new or are reminded of something important. It is often worth tagging these cards to describe their content to allow for focused review when the need later arrives.</p>

<p>It is also a good idea to create cards with what you learn from your mistakes; performing a post-mortem after a big project to identify what went well and what did not is a good way to identify lessons to be learnt (and remembered) to put in your Anki deck. It is an even better idea to analyse progress during regular intervals throughout a project to make sure you have not lost sight of a greater picture and add these insights to your deck. A similar approach can be applied to errors encountered in every day work; solutions to common or time-consuming problems are terrifically useful things to have memorised.</p>

<p>Restricting what you memorise to only what you need to complete a particular project is a good way to help focus your memorisation and avoid wasting time on material that will ultimately prove of little or no use.</p>

<h2>Practicing</h2>

<p>Spaced repetition software works by offering you a reminder of information just before you are most likely to forget it, both preventing you from wasting time revising the material before you need to, and avoiding you forgetting the concept completely and having to relearn it. In order for the algorithm to be the most effective, you must complete the suggested revision <em>every day</em>. This is less challenging than it sounds when you incorporate checking your deck into your daily routine. If left neglected for too long, the number of items due to be revised grows and it quickly becomes too difficult to catch up.</p>

<h2>Deck Maintenance</h2>

<p>A spaced repetition deck should not be thought of as a static resource, but instead should be maintained continuously. Cards should be updated that are no longer true or, given new insight, can be improved, split or merged.</p>

<p>Material that is proving difficult to memorise should be rephrased, reformatted or reworked to try and make it easier to remember. Conceptual links to related material should be highlighted to strengthen associations. The content should be carefully considered, practiced or tested to help find more effective ways of encoding it in the deck and make it easier to remember.</p>

<p>When creating cards, it is a good idea to provide references to the sources you used and the date you last checked or review it. This is to record where to go to get more information and to clarify or expand your knowledge of a given subject  and to guage how stable or obsolete a particular piece of knowledge is.</p>

<h2>Prioritising What You Should Practice</h2>

<p>Unless you want to be spending hours each day reviewing - and likely not even then - you will not have enough time to memorised every piece of knowledge you ever wanted at your fingertips. Material must be prioritised and those priorities, like the deck itself, should be regularly reviewed and adjusted. Anki&rsquo;s tags system can be used to filter out which cards are included or filtered out of your deck.</p>

<p>Material that is used regularly or is important for only a given period - perhaps while you complete a particular project - should be retired from your deck in favour of information more likely to be useful in the future. The excluded material can be re-included and rapidly re-learnt using Anki&rsquo;s drill feature, should there come a time when the material is required once more.</p>

<p>You will need to find your own balance of how long you are prepared to spend revising each day, and how useful the information you&rsquo;re committing to memory is likely to be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Separating Classes Into Smaller Ones]]></title>
    <link href="http://greena13.github.io/blog/2014/08/22/separating-classes-into-smaller-ones/"/>
    <updated>2014-08-22T09:05:53+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/22/separating-classes-into-smaller-ones</id>
    <content type="html"><![CDATA[<p>One of the more useful things I took from Steve McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a> is a procedure for systematically extracting smaller classes from a large one.</p>

<p>A common object oriented antipattern is the <em>God Class</em> or <em>Blob Class</em> which occurs when a class grows to become a large, monolithic blob with no clear single responsibility, leading to problems with maintenance and understandability. At this point, the corrective course of action is to refine the single unwieldy class into multiple smaller ones with a more manageable size and clear responsibility. The exact number and shape of these refined classes is not always immediately apparent, however it is possible to break the process up into smaller steps, allowing you to focus on one stage at a time.</p>

<ol>
<li><p>Begin by looking at the methods themselves rather than the class and identify any that are particularly long or deal with multiple responsibilities. Separate them out into smaller self-contained chunks using vertical whitespace (empty lines); it may be necessary to shift the order of statements, particularly moving the initialisation of variables to just before they are first used &ndash; be careful not to inadvertently change system behaviour here.</p></li>
<li><p>The whitespace-separated chunks of functionality can now be extracted into their own methods. It can be helpful to first type out the reference to this new method immediately above the statements that it will contain. This makes it easier to see what parameters the method will need by going through its statements. Once you are comfortable with the method&rsquo;s name and parameters, copy the reference and method statements onto the class and convert it to a valid method definitions with an appropriate access modifier (usually <code>private</code> should be your first choice).</p></li>
<li><p>Once you have extracted as much code as possible into class or instance methods, examine each method&rsquo;s parameters and try to remove as many of them as possible by promoting local variables and arguments to instance or class variables so they will not need to be passed around between methods.</p></li>
<li><p>Once again, you should now attempt to separate out concerns, this time by grouping methods and instance and class variables concerned with the same functionality. Usually these can be identified simply as the methods that reference these variables.</p></li>
<li><p>Once you have identified one or more separate concerns, define a new class to encapsulate the related methods and variables. Define an instance of the new class on the blob class and instantiate it an appropriate place so you will be able to evoke the functionality of the new class from the blob class. Begin moving methods and instance variables to the new class, searching each time in the blob class for any references you may need to update (by pointing to the variable containing the instance of the new class). Continue this until you have extracted all the methods and instance variables you need to simplify the blob class.</p></li>
</ol>


<p>Ideally, all refactoring should be completed with a set of comprehensive unit tests at your back to verify no functionality was changed or lost in the restructuring. This is often not the case, in no small part because God Classes are notoriously difficult to write tests for. However, the same is not true of the new, slimmer classes and it is a good idea to see the refactoring as an opportunity to outfit the new classes with the full unit test treatment; you will thank yourself when it comes time to maintain them in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reducing Code Complexity]]></title>
    <link href="http://greena13.github.io/blog/2014/08/21/reducing-code-complexity/"/>
    <updated>2014-08-21T16:00:53+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/21/reducing-code-complexity</id>
    <content type="html"><![CDATA[<p>I have already covered what I picked up from Steve McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a> and Robert C. Martin&rsquo;s <a href="http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a> on <a href="blog/2014/08/21/ordering-and-labelling-code">packaging and labeling blocks of code</a> and <a href="blog/2014/08/20/reducing-a-routines-parameters/">simplifying their inputs</a>. Now I intend to cover what the two volumes offer in regards to reducing the complexity of the shape of, and relationships between, code segments. As is consistently emphasised through McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a>, the author of a piece of code is beholden to its reader and should write for readability and maintainability, as if often ends up being the same person or a colleague.</p>

<p>To understand how a piece of code works, the reader must often hold in their mind the several steps they traversed along a particular execution path to reach a given point in the code. It is difficult to mentally retain these preconditions while juggling the cognitive task of interpreting the commands at the point the reader is currently at in parsing the code. A way of making this easier is to reduce the levels of nesting of conditional statements, or keeping the code as <em>flat</em> and as close to linear as possible; this better matches how the human brain works and plays to its strengths and aptitude for linear storytelling and reasoning patterns.</p>

<p>One way to simplify a series of deeply nested conditions with many variables is to introduce a helpful level of abstraction by bundling up as many of those conditions as possible in descriptively named query methods or functions; <code>if isWeekDay(day)</code> is preferrable to <code>if(day != 'Saturday' &amp;&amp; day != 'Sunday')</code>.</p>

<p>Another method is to attempt to simplify nested conditions using logic axioms such as <em>Demorgan&rsquo;s Law</em>. A series of if statements is often easier to navigate than a single chunk of nested logic. It also reduces the number of inputs to the block, providing greater opportunity to extract it out into separate methods or functions with clearer indications of what data influences its behaviour.</p>

<p>When unwrapping nested conditional statements, the preconditions for an extracted piece of code may become less clear. This should be address by making any dependencies explicit. To illustrate: if one function must be called before another, have the first function return a data type that the second one requires as a parameter. For example, if a function <code>throwRock()</code> must be called before another <code>breakGlass()</code>, make <code>throwRock()</code> return an instance of <code>WallPosition</code> and have <code>breakGlass()</code> require an argument of type <code>WallPosition</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ordering and Labelling Code]]></title>
    <link href="http://greena13.github.io/blog/2014/08/21/ordering-and-labelling-code/"/>
    <updated>2014-08-21T14:53:17+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/21/ordering-and-labelling-code</id>
    <content type="html"><![CDATA[<p>Reading Steve McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a> and Robert C. Martin&rsquo;s <a href="http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a>, I encountered a subject that I previously hadn&rsquo;t given much thought to but is of great importance. McConnel talks of reducing the cognitive load of reading and understanding code by writing for humans first, computers second; where the reader of a piece of code should be the author&rsquo;s highest priority - if not only because these often end up being one and the same. An important part of this is facilitating quick code navigation to allow the reader to find what they need, and providing useful levels of abstraction so the reader need not concern themselves with irrelevant details.</p>

<p>This is achieved by making considered choices with code order and placement. Two units of code that are related in some way - the most important and obvious being references between them or shared execution paths - should be placed nearby to each other. This is to allow a reader to easily refer between the two without having to jump between separate locations in a file. McConnel offers the analogy of a newspaper for guidance on how code should be ordered: the important concepts are featured at the top while the refinements or details can be found towards the bottom.</p>

<p>Vertical whitespace should be used wisely to separate different ideas or functions in the code. Statements that perform actions that are part of the same larger action should be grouped together, while those that are not should be separated visually by one or more lines of whitespace. If a clear enough conceptual gap exists between a group of statements and the rest of the code, it can and often should be extracted out into a well-named method or function (and given the appropriate access modifier to correctly observe <em>Encapsulation</em>).</p>

<p>Care should be taken when naming methods and functions to the make the reader&rsquo;s task easier. A well-named block of code should make clear what it is the code does, what input it expects or requires and in the case of <a href="blog/2014/08/20/reducing-a-routines-parameters/">multiple parameters</a>, what order the arguments should be given in. If named wisely, a function or method should require little or no further documentation.</p>

<p>It is paramount that a piece of code only perform the functionality suggested by its name, free of hidden side effects or behaviour. To ignore this is to surely guarantee bugs that are difficult to diagnose and fix. However, something greater is at stake: if violated, the trust between the code&rsquo;s author and reader is broken and the reader is forced to then check every method or function for similarly concealed behaviour.</p>

<p>If it is proving difficult to accurately name a method or function succinctly, often it is an indication of an inappropriate level of abstraction or confused intentions behind the code. For example, functions that perform queries or return a system status should be separated from those that execute and action, or alter the system state.</p>

<p>Naming conventions can be used to imbue code with consistency and reduce the number of surprises the reader must negotiate in parsing the code. The merits of specific conventions are secondary to the benefits of consistency itself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reducing a Routine's Parameters]]></title>
    <link href="http://greena13.github.io/blog/2014/08/20/reducing-a-routines-parameters/"/>
    <updated>2014-08-20T21:04:08+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/20/reducing-a-routines-parameters</id>
    <content type="html"><![CDATA[<p>Steve McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a> provides a great insight into understanding some of the common function forms and how to go about simplifying wayward parameter lists into something that clearly conveys intention and is easier to remember and use. McConnel writes, software should be written for people first and foremost and focus should be given to improving readability and maintainability, rather than performance.</p>

<p>First, a brief note on terminology: I will be using <em>routine</em>, <em>method</em> and <em>function</em> interchangeably to refer to a <em>piece of code that accepts or requires a given number of inputs, or parameters</em>.</p>

<p>McConnel points out that code with a long list of parameters present problems to those who need to understand, maintain and use it. Multiple parameters are difficult to remember when the function needs to be called - as is the correct order to use them in. Code compliant with the mandates of <em>Defensive Programming</em> will also need to check the arguments have been provided in the correct order and have sensible values. While many IDEs and languages will do the recording of correct parameter order and type checking, this should not been seen as excuse for bad practices. Long parameter lists provide further headaches for maintenance if the method&rsquo;s signature needs to be later modified.</p>

<p>A function can usually be improved by reducing the number of parameters it requires. <em>Polyadic functions</em> (with 3 or more parameters) should almost always be refactored to require fewer arguments. One way of achieving this is by breaking the function up into smaller ones that perform simpler chunks of functionality and need less information to execute; this change in abstraction can often add clarity to the intention behind the code. Another strategy for reducing a function&rsquo;s parameters is to wrap them up in a single data structure, removing the need to remember the parameter order completely and freeing up the reader to focus on what&rsquo;s pertinent to the function of the code.</p>

<p>Good code should consist primarily of <em>monadic</em> and <em>dyadic</em> functions, or those with 1 and 2 parameters, respectively. Monadic functions typically take one of three forms:</p>

<ul>
<li>Asking a question or testing a particular condition. eg. <code>isRed(ball)</code></li>
<li>Performing an action or transformation on a particular parameter. eg. <code>fileOpen(myFile)</code></li>
<li>Handling an event where the function uses the argument to update the system&rsquo;s state. eg. <code>registerMouseEvent(mouseEvent)</code></li>
</ul>


<p>It should be noted that the first form need not return a boolean value. A function that returns a particular characteristic is also of this form. eg. <code>averageGrade(reportCard)</code>. Functions of the second form should also return the result of the action or transform wherever possible. <em>Output arguments</em>, or where functions perform an action on the argument instance itself and return either <code>null</code>/<code>void</code> or another value, are more difficult to follow. In the case of an action being performed on an instance, an object-oriented paradigm is better suited eg. <code>ball.bounce()</code> is clearer than a function <code>bounce(ball)</code> that returns the instance of <code>ball</code>.</p>

<p>If a function or method meets one of the above descriptions and has more than a single parameter, it is a good sign that it is a candidate for refactoring.</p>

<p>Dyadic functions are not as easily classified into categories and can perform many actions. Care should be taken with the ordering of the parameters when defining a function or method&rsquo;s signature so that is natural and easy to remember and should be evident from the name of the routine. If at all possible, the pairing of the two parameters should be wrapped in single argument to convert to a monadic function.</p>

<p>The ideal function is a <em>niliadic function</em>, or a function without any parameters.</p>
]]></content>
  </entry>
  
</feed>
