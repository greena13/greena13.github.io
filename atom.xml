<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Key Shift in Cmd]]></title>
  <link href="http://greena13.github.io/atom.xml" rel="self"/>
  <link href="http://greena13.github.io/"/>
  <updated>2021-01-23T20:00:44+00:00</updated>
  <id>http://greena13.github.io/</id>
  <author>
    <name><![CDATA[Aleck Greenham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cross Site Scripting (XSS) and Cross Site Request Forgery (CSRF) Prevention Cheatsheet]]></title>
    <link href="http://greena13.github.io/blog/2021/01/09/cross-site-scripting-xss-and-cross-site-request-forgery-csrf-prevention-cheatsheet/"/>
    <updated>2021-01-09T11:32:04+00:00</updated>
    <id>http://greena13.github.io/blog/2021/01/09/cross-site-scripting-xss-and-cross-site-request-forgery-csrf-prevention-cheatsheet</id>
    <content type="html"><![CDATA[<p>Cross Site Request Forgery (CSRF) and Cross Site Scripting (XSS) are two of the most common (but certain not only) exploits the developers of web applications need to be familiar with.</p>

<!--more-->


<h2>Cross Site Request Forgery</h2>

<p>Cross Site Request Forgery (CSRF) is basically tricking a user into making a request to a service that they are not meaning to. This is achieved by getting their browser to make a request to a service, using information the browser will automatically send with the request (usually a session cookie) so the service will authenticate and act on the request; an attacker need not know or have access to the user&rsquo;s credentials or session details, and only that they direct the user&rsquo;s pre-authorized browser to make the request on their behalf.</p>

<p>In order for this attack to work, the browser must already be in a state where it contains the context necessary to successfully perform a request. This usually means (but is not necessarily limited to), the user already being signed into a service, without terminating their current session.</p>

<p>It&rsquo;s important to point out, although this attack utilises a user&rsquo;s browser, it&rsquo;s actually concerned with executing code on a <em>server</em>, by making the corresponding request. Most countermeasures are also ultimately enforced on the server.</p>

<h3>A simple example</h3>

<p>Let&rsquo;s consider a simple example of how a CSRF attack works: an attacker may post a hyperlink to a popular service, say a social media platform, on a public forum or other website that they control, and try and get a user to click it by presenting it as something of interest. If a user is still signed into the other service, clicking on the link could make a request to delete their account or make a post on their behalf.</p>

<p>The means of making a request to the target service need not be so obvious and doesn&rsquo;t actually require any user interaction at all. There are certain HTML tags that point to external resources that a browser will automatically make a HTTP request for in order to display or use. One such example is a <code>&lt;img&gt;</code> (image) tag - when a browser downloads a web page, it will automatically request the associated images. An attacker can use this to instead make a request to a target service.</p>

<h3>CSRF Prevention techniques</h3>

<h4>Lean on the Single Origin Principle</h4>

<p>The Single Origin Principle (SOP) is the name given to a core principle of a collection of restrictions that span different browser APIs and features - each with slight differences - but all with the same intent of governing how resources from one origin can interact with resources of another. The most relevant of those browser features are DOM Access, <code>XMLHTTPRequest</code>s and Cookies (but they are more). While SOP a good start, because of the way the web historically functioned, there are many exclusions where SOP is not applied by browsers, and therefore provides no protection against CSRF (or similar) attacks.</p>

<p>SOP chooses its exclusions based on a number of assumptions about the type of cross-origin requests that are safe to perform, which developers must ensure hold true if they want to guard against CSRF:</p>

<ul>
<li>Make sure all <code>GET</code>, <code>HEAD</code> and <code>OPTION</code> requests are free of side-effects</li>
</ul>


<h3>Implement Cross Origin Resource Sharing</h3>

<p>Cross Origin Resource Sharing (CORS) is a way to selectively permit requests that would otherwise be forbidden by the SOP. It doesn&rsquo;t add any more protection on top of SOP; it walks it back for cases where you trust the request to came from a given origin.</p>

<p>For most <code>GET</code>, <code>HEAD</code> and <code>POST</code> requests that have no body, the browser once again assumes making the request is free of side-effects and waits until the request responds before validating whether it should be used. It does so by checking for the presence and value of a <code>Access-Control-Allow-Origin</code> header with a value that matches the current origin (using a custom matching algorithm). For all other cross origin requests that would normally be forbidden by SOP, it performs a <code>OPTIONS</code> pre-flight request that contains the details of the request it is planning on making. The server responds to this request in a similar manner, and the client is able to determine whether it has approval to make the actual request.</p>

<p>Developers can change or require a request to be made in such a way that is no longer qualifies as an exclusion, and in doing so, cause the browser to apply SOP restrictions and employ CORS:</p>

<ul>
<li>When a request uses JSON or XML, require it to be submitted over XHR, which forces the browser to use the <code>XMLHTTPRequest</code>s interface.</li>
<li>For JSON or XML APIs, configure your server to always verify the <code>Content-Type</code> header is correct: Forms are limited to three content types: <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, and <code>text/plain</code>. To get a content type <code>application/json</code> you need to use a <code>XMLHTTPRequest</code>, but unless the <code>Content-Type</code> is enforced, there is nothing stopping an attacker submitting valid JSON through a form using one of those 3 content types, and in doing so, subverting SOP.</li>
</ul>


<h4>CSRF tokens</h4>

<p>While SOP and CORS help verify a request is coming from an approved origin, CSRF tokens check the user has previously preformed an action or followed an expected sequence of actions before making the request.</p>

<h5>Synchroniser Token Pattern</h5>

<p>The Synchroniser Token Pattern is where a token is issued by the server and stored in the user&rsquo;s session cookies, as well as another location the client can then use to copy it into a subsequent request; the two instances of the token are then matched before the server is prepared to accept the request.</p>

<h6>Form field synchroniser tokens</h6>

<p>In the case of a HTML form, every time a client requests a page that contains a form, the server stores a random token as a cookie (in the response&rsquo;s headers), and includes that same token as a hidden form field (in the response&rsquo;s HTML body). When the user fills out the form and sends it back to the server, the hidden field containing the token is amongst the data sent in the request body, and the token stored in the cookie is included with the request&rsquo;s headers. The server can then compare the token in the form data with the one in the cookie: if they&rsquo;re the same, the server knows the request was made with a form that it generated (and not one that was generated by an attacker). This assumes the header has been properly transmitted over HTTPS and marked as <code>Secure</code> and <code>HttpOnly</code>.</p>

<p>CSRF tokens can also be submitted as custom headers back to the server, but <em>not</em> using cookies (that&rsquo;s where the reference copy of the token is) and <em>not</em> in the URL or its query parameters. CSRF tokens must be generated securely, and then kept secret by avoiding them being logged, whereas URLs are recorded in many places over the course of a HTTP request and appear in <code>Referer</code> headers when redirecting to other sites.</p>

<p>The CSRF token is changed with every new user session, or preferably with each individual request. If you do generate a unique token per request, this may cause issues if a user goes back (using the browser&rsquo;s Back button or the <code>history</code> API) to a previous page with a form on it (which has an old token as a hidden field). If they attempt to submit the form with the old token in the request body and the new one from their latest request in the cookie headers - the server will report a failed match.</p>

<p>It&rsquo;s worth noting that CSRF tokens do nothing to prove the form has not been tampered with since it was initially &ldquo;issued&rdquo; by the server, and so does not protect against Cross Site Scripting or other attacks - more on this later.</p>

<h4>Double submit cookie</h4>

<p>A <em>Cookie-to-header token</em> is a way for JavaScript applications (using AJAX requests) to achieve a similar result to transmitting synchroniser tokens in form data. The server generates a pseudo-random value and sets it as a cookie (separate from the user&rsquo;s session) when the client makes its first request (even before they&rsquo;ve necessarily authenticated). The client then submits this value as a custom header with every request back to the server, which it checks before honouring the request. This relies on the cookie <em>not</em> being <code>httponly</code> and for the JavaScript application to be delivered from a domain that has permission to read the cookie value from the session response and set the custom header on subsequent requests.</p>

<p>Using custom HTTP headers to transmit CSRF tokens is considered more secure than using form fields because, by default only JavaScript running on the same origin can add custom headers to requests (this can be extended to include cross-origin requests by permitting the custom header in the server&rsquo;s CORS configuration). This is effectively another technique to ensure the browser is applying the SOP and CORS.</p>

<p>This technique is only effective if you know your subdomains are fully secure and only accept HTTPS connections, due to the possible vulnerabilities:</p>

<ul>
<li>(Possibly compromised) subdomains can write cookies to parent domains</li>
<li>Cookies can be sent over plain HTTP (which can be sniffed or intercepted)</li>
</ul>


<h5>Encryption token pattern</h5>

<p>The limitations of a Cookie-to-header token can be guarded against by using an encrypted token instead of the token directly.</p>

<p>The Encryption Token Pattern involves the server generating a token by encrypting the user&rsquo;s session id and a timestamp, and including it in the form data or custom headers the client sends with its next request. Rather than comparing this with a token stored in the user&rsquo;s cookie, the server decrypts the token and compares the session id to the one stored in the user&rsquo;s session cookie, and the timestamp against a sliding window to prevent the same token being used in the future. If the digest is not present, or cannot be decrypted with the encryption key known only to the server, than the request is denied.</p>

<p>A HMAC function can be used instead of an encryption/decryption algorithm in much the same manner, in what&rsquo;s called HMAC Based Token Pattern.</p>

<h4>Using cookie prefixes</h4>

<p>There is a standard for two Cookie Prefixes that further restrict how cookies can be accessed by sites in browsers that support it:</p>

<ul>
<li>A <code>__Secure-</code> prefix makes a cookie accessible to a site delivered over HTTPS only.</li>
<li>A <code>__Host-</code> prefix is equivalent to the secure one, plus further restricting a cookie to only be available to a site from the same domain that it was set on (making it no longer possible for a subdomain to override the cookie).</li>
</ul>


<p>The full RFC can be seen <a href="https://tools.ietf.org/html/draft-ietf-httpbis-cookie-prefixes-00">here</a>.</p>

<p>The <code>__Host-</code> prefix can be used with the techniques that place tokens in cookies.</p>

<h3>Checking Source and Origin headers</h3>

<p>Among the <em>Forbidden Headers</em> that cannot be set or changed via JavaScrip are the <code>Origin</code> and <code>Referer</code> headers, which are set by the browser and indicate where the request originated. By configuring your server to compare the domains of both (if present) to where you know your application to be deployed, you can confirm the request is not a cross-origin one. Care must be taken when comparing the origins to compare the entire value (not just a subset of it) to prevent an attacker registering a subdomain that is a superset of yours: <code>my.domain.com.badguys.com</code>.</p>

<p>(OWASP)[<a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#identifying-source-origin-via-originreferer-header">https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#identifying-source-origin-via-originreferer-header</a>] suggests blocking requests that have neither header set, or failing that, to log these requests and actively review them.</p>

<p>There are some normal cases to be aware of:</p>

<ul>
<li>IE 11 does not add an <code>Origin</code> header for CORS requests across sites in a <a href="https://docs.microsoft.com/en-us/troubleshoot/browsers/ie-security-zones-registry-entries">&ldquo;trusted site zone&rdquo;</a></li>
<li>A <code>302</code> redirect to another origin does not set the <code>Origin</code> header</li>
<li>There are <a href="https://stackoverflow.com/a/42242802/1337796">cases where the browser is required to set the Origin to null</a> - typically for privacy concerns</li>
<li>Most browsers only include the <code>Origin</code> header for <code>POST</code>, <code>DELETE</code> and <code>PUT</code> requests (cross-origin requests always include it)</li>
<li>There are equally <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#identifying-the-target-origin">use cases</a> where the <code>Referer</code> header is not set, or stripped out for privacy reasons.</li>
</ul>


<p>Usually your server(s) are behind one or more layers of routing or proxying and it&rsquo;s not easy to reliably determine the domain your application has been deployed to, from the <code>Host</code> header (which is rewritten when a request is proxied; the original value is typically available in the <code>X-Forwarded-Host</code> header, though). So it&rsquo;s recommended to configure each deployment with the correct static value, if you can.</p>

<h3>SameSite cookie attribute</h3>

<p>Another way you can mitigate against CSRF attacks is to tell the browser not to submit cookies for cross-domain requests, by using the <code>SameSite</code> attribute of the <code>Set-Cookie</code> header. It has 3 possible values:</p>

<ul>
<li><code>Strict</code>: Prevents the browser sending any stored cookies for a domain when following links from another. This prevents being able to follow links from other websites and automatically be signed in.</li>
<li><code>Lax</code>: (Default) Blocks only for requests that typically have side effects (e.g. <code>POST</code> requests)</li>
<li><code>None</code>: Always sends the cookie for cross-domain requests</li>
</ul>


<p>This approach should be used in conjunction with the techniques discussed above (not instead of). Unless the user is using a browser that supports this option (which is only &ldquo;most&rdquo; modern ones), they will receive no protection from it.</p>

<h3>User interaction for high risk operations</h3>

<p>For high impact actions such as changing a user&rsquo;s password, you should consider CSRF defense techniques that actually require interaction from the user, such as requesting the re-entry of their password, or re-authenticating through a secure means like 2 factor authentication. CAPTCHAs are a less secure option, but make it more difficult for an attacker to automate the generation of the request.</p>

<h4>How detected or suspected CSRF attacks should be handled</h4>

<p>(OWASP)[<a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection">https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#use-built-in-or-existing-csrf-implementations-for-csrf-protection</a>] suggests detected CSRF requests should be:</p>

<blockquote><p>aborted, [the] session of the user terminated and the event logged as a potential CSRF attack in progress</p></blockquote>

<h2>Content Security Policy (CSP)</h2>

<p>What&rsquo;s included and what&rsquo;s not</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tracking Changes in Open Source Libraries on Github]]></title>
    <link href="http://greena13.github.io/blog/2020/12/19/tracking-changes-in-open-source-libraries-on-github/"/>
    <updated>2020-12-19T09:42:21+00:00</updated>
    <id>http://greena13.github.io/blog/2020/12/19/tracking-changes-in-open-source-libraries-on-github</id>
    <content type="html"><![CDATA[<p>There are two ways to consume open source libraries. The first is for situations where you want to specify a fixed, specific version, and move that version forwards (to gain access to new features or bugfixes) or perhaps backwards (to side-step regressions or incompatible changes). This situation is common when developing end-user applications and is optimised for predictability.</p>

<p>The second situation is when you want to specify a range of compatible versions, and let a package management solution decide which of those versions is the most optimal (by perhaps sharing a version already available). This situation is common when developing libraries that depend on others, which sit between an end-user application and the open source libraries and is optimised for maximum support.</p>

<!--more-->


<h2>Moving between versions: Upgrading an open source library</h2>

<p>In this situation, you&rsquo;re starting for an existing reference point (you&rsquo;ve already added an earlier version of the library to your application) and you&rsquo;re interested in only the information that will get you from one fixed point to another.</p>

<h3>Check the changelog</h3>

<p>If you&rsquo;re lucky, the maintainers of the library in question will diligently and accurately maintain a changelog, detailing the changes with each version.</p>

<p>Sometimes this is a separate file you can find in the root of the repository (or use the search feature to locate):</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/changelog.png" style="margin: auto; display: block;"/></p>

<p>It may also feature as a section of the Readme file (use the browser&rsquo;s in-page search feature to quickly find references to one).</p>

<p>And sometimes a changelog is maintained as a series of release notes, which you can get to from the right-hand sidebar, with the current Github layout:</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/releases.png" style="margin: auto; display: block;"/></p>

<p>Finally, sometimes the changelog and/or release notes are maintained on a separate webpage. Search the Readme, look at the Google results for the package, and check the metadata (e.g. <code>package.json</code>, <code>gemspec</code> etc) for any reference of a separate homepage for the library.</p>

<h3>Diff the Readme</h3>

<p>Not all open source projects maintain changelogs or release notes and even those that do, are rarely written at the level of specificity needed to <em>quickly</em> determine if the reader&rsquo;s application is affected or not.</p>

<p>A neat trick to quickly establish only what may have changed in terms of external behaviour is to diff the changes in the Readme file between the versions you&rsquo;re interested in. You can do so by navigating to the <code>/compare</code> path:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://github.com/&lt;author&gt;/&lt;library&gt;/compare</span></code></pre></td></tr></table></div></figure>


<p>There you can select two tags or branches to compare. Select the earlier/lower tag from the first dropdown (this is the version you are currently on), and the version you are wanting to upgrade to from the second dropdown.</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/branch-compare.png" style="margin: auto; display: block;"/></p>

<p>Once the diff has been generated, select the <strong>Files Changed</strong> tab, scroll down tho the Readme File (the browser in-page search can be useful here for larger diffs) and click the button with a folded down page icon (which has a alt text of <strong>Display the rich diff</strong>).</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/rich-diff-button.png" style="margin: auto; display: block;"/></p>

<p>This will show you in a concise, highly readable manner what changes were made to the Readme between the versions you&rsquo;re interested in. This is often the best way to quickly determine major changes of the library, and works best for libraries that document the majority of their functionality in the Readme (rather than in wikis or separate webpages).</p>

<h2>Determining which version to upgrade to</h2>

<p>Sometimes you&rsquo;re going through routine maintenance and upgrading the dependencies of your application and the question of which version to upgrade to is clear (the latest). But other times you have a particular bugfix or feature that you need from a library, and don&rsquo;t want to upgrade any further than you have to (to reduce the risk and number of changes to grapple with).</p>

<h3>Working from a Github issue or pull request</h3>

<p>This situation can occur when you encounter an error or problem, and after Googling it, you arrive at a closed issue on Github with a referenced pull request or commit as reportedly being the solution or resolution, but without any clear indication of what version you&rsquo;d need to upgrade to, to get the fix.</p>

<p>Click on the commit link (or the merge commit in the case of a pull request) and you&rsquo;ll be taken to another page to view all the changes in that commit. At the top of this page is a widget that shows the branch this commit exists on, and the range of subsequent tags that include it.</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/tag-info.png" style="margin: auto; display: block;"/></p>

<p>The lowest (left-most) tag is the first version that included this commit (which doesn&rsquo;t rule out the possibility of future regressions, but should be a good starting point for where you need to upgrade to, to get the fix or feature). For commits that are only in one tag, you will only see that tag, and not a range.</p>

<p>In the case of severe security hotfixes, it&rsquo;s possible the library maintainers have also back-ported to fix to older versions of the library. So double check the release notes to ensure there isn&rsquo;t a smaller upgrade path available to you.</p>

<p>If there is no tag widget at all, it means the commit has not yet been tagged or released, and you will likely have to consume the head of development (in whatever form that takes for your particular language and package management solution).</p>

<h3>Working from changes in the Readme</h3>

<p>Something that may also occur is you&rsquo;ve read about a feature in the library&rsquo;s latest Readme file, that you&rsquo;re sure wasn&rsquo;t available the last time you used the library (or when you tried to use it, you got an exception that clearly indicated the feature was not available in the version you were using).</p>

<p>You have a few options to determine exactly when that feature was introduced:</p>

<ul>
<li>Check the library&rsquo;s changelog and search for references to it (described above)</li>
<li>Open the Readme file from the file selector (don&rsquo;t just view it as the default page of the repository) and click the <strong>Blame</strong> button, to find in what commit the new lines in the Readme were added, which you can then use to find out what version the feature was first documented (described in more detail below).</li>
</ul>


<h2>Determining compatible versions of open source libraries</h2>

<p>When authoring open source libraries that depend on others, it&rsquo;s often required you declare what versions of those dependencies are compatible with your own, to allow package management systems to resolve suitable versions. This is essentially a question of what library versions provide the inputs, outputs and side-effects your code expects.</p>

<p>When upgrading an open source library, you are working <em>forwards</em>, jumping between two specific points (i.e. it doesn&rsquo;t matter if a bug was introduced and subsequently fixed - it only matters how the library behaves in the version you&rsquo;re upgrading to). However, determining compatible versions of a library usually involves working <em>backwards</em> from the version you initially developed against, and deals with <em>ranges</em> of compatible versions (so if a bug, vulnerability, or regression is introduced in a particular release, you may need to exclude it).</p>

<h3>Check the changelog and diff the readme</h3>

<p>Once again, checking the changelog and diffing the readme of the library can be useful information. However, often you&rsquo;re only using a subset of the library&rsquo;s functionality and the whole changelog can be a lot to read through and decipher. You may also be integrating with a library in a way that goes beyond the public interface (which of course is not recommended, but sometimes required) and you need a better insight into when the internals have changed.</p>

<h3>Line and file changes</h3>

<p>First, audit your code to get a list of classes, constants, methods, etc your code relies on from the library.  You&rsquo;re attempting to clarify the ways in which your library depends on the behaviour of the open source one.</p>

<p>Next, you need to establish where each of those is defined in the open source library. Modern IDEs may be able to help point you to the right file before you switch to Github. Alternatively, you can use the <strong>Search or jump to&hellip;</strong> input in the top left-hand corner to search the repository.</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/search-input.png" style="margin: auto; display: block;"/></p>

<p>Once you&rsquo;ve located the file, and the place within it where the method, class, etc is defined, click on the line number, and then the ellipses button. Select <strong>View git blame</strong> from the  the context menu
that appears.</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/git-blame.png" style="margin: auto; display: block;"/></p>

<p>This will add an extra column next to each line, with the commit and author details of the last time that line was changed (if you&rsquo;re not currently viewing the latest version of the file, it was the last time that line was changed <em>before</em> that version of the file).</p>

<p>By clicking on the commit message, you&rsquo;re taken to another page to view all the changes in that commit which includes the widget for determining the range of subsequent tags that include it.</p>

<p>This is effectively how long that line has been the version you were viewing. If the final tag is the latest released version, the line is still as you&rsquo;ve seen (and presumably the version of the code you had in mind when writing your own library).</p>

<p>If you&rsquo;re lucky, most or all of the method&rsquo;s definition will have been last modified in the same commit. However, often a method will have been updated over time and you&rsquo;ll need to track each change and whether it makes a difference for how your code is using the library. Just because a method or class has changed, it does not necessarily mean a difference for your library (addressing linting, refactoring, or adding extra backwards compatible options, for example). You should be going back as many versions of the code module as you can, until it either doesn&rsquo;t exist, isn&rsquo;t exported or made available, or changes in such a way that the behaviour is no longer what your library requires.</p>

<p>Sometimes it useful to be able to see the previous commits of a line by using the <em>View blame prior to this change</em> button:</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/previous-commit.png" style="margin: auto; display: block;"/></p>

<p>If the changes are large or complex enough, it&rsquo;s usually easier to treat the file as a whole and view the history of changes to it by clicking the <em>History</em> button at the top of the page:</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/history-button.png" style="margin: auto; display: block;"/></p>

<p>This allows you to view in what commits a file changed, what those changes were, and then (using the widget described above) what published versions of the library used that version of the file. Be careful to look at the most recent commit that was in each version. If a file changed twice between two versions, the commit for both versions will appear as if they were in that version. (You may wish to check the version of the file is the one you&rsquo;re expecting by viewing the tag - more on that next).</p>

<h3>Tags and branches</h3>

<p>Presuming the maintainers of the library have been reliably and accurately tagging the repository with version tags that match the published versions of the library, viewing the code by tag can also be a useful tool. Although this is the feature that most closely resembles what we&rsquo;re looking for (published versions of the code), it is often more helpful to start with the commit history of lines or files, as described above, because they only mention when the code <em>changes</em>; often the code you&rsquo;re interested in will not change between tags. For the best results, use a combination of the two, to get a complete picture.</p>

<p>At the root of the repository, Github provides the ability to checkout the repository as it exists on a particular branch or tag:</p>

<p><img src="http://greena13.github.io/images/posts/tracking-changes-in-open-source-libraries-on-github/tag-picker.png" style="margin: auto; display: block;"/></p>

<p>Once you&rsquo;ve selected your tag (i.e. version), you will need to navigate to the file(s) you&rsquo;re interested in and you will see it as it exists in that version of the library.</p>

<h3>Other techniques</h3>

<p>A discussion of actively testing your library against all or landmark versions of its dependencies is outside the scope of this article, but it is advised to pair active testing with the techniques listed here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Ruby Gems for Different Versions of Ruby and Rails]]></title>
    <link href="http://greena13.github.io/blog/2020/12/19/writing-ruby-gems-for-different-versions-of-ruby-and-rails/"/>
    <updated>2020-12-19T09:05:06+00:00</updated>
    <id>http://greena13.github.io/blog/2020/12/19/writing-ruby-gems-for-different-versions-of-ruby-and-rails</id>
    <content type="html"><![CDATA[<p>This article gives a quick overview of how gem versions are managed in Ruby applications and then explains how to correctly version your own gems and their dependencies.</p>

<!--more-->


<h2>Ways your gem is consumed</h2>

<p>Before going over how to version your Ruby gems and their dependencies, it&rsquo;s first worth covering the two ways your gem may be consumed: as part of another gem, or as part of a Ruby application. Each uses a slightly different mechanism.</p>

<h3>Other Ruby gems</h3>

<p>For each version of Ruby installed on your system, there will be one or more versions of the Ruby Gems command line interface installed. This utility has two functions it serves:</p>

<ul>
<li>As a client for the the Ruby Gems repositories: it allows downloading and installing gems (and their dependencies) from the Ruby Gems servers. It also allows building and publishing gems you may have authored locally and wish to distribute.</li>
<li>As a package manager: it resolves compatible versions of gems and their dependencies.</li>
</ul>


<p>The version of Rubygems you&rsquo;re running can be seen with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem --version</span></code></pre></td></tr></table></div></figure>


<p>Each gem includes a <code>gemspec</code> file that provides metadata about that gem, including its version and the compatible versions of any gems it may depend on. Ruby gems uses this information to download dependencies whenever the gem is used in a Ruby application. It is by including your gem in another&rsquo;s <code>gemspec</code>, that other gems may depend on yours.</p>

<p>Ruby gems will install the latest stable version of each dependency that satisfies the version constraints in the <code>gemspec</code> file (while accounting for if there are other dependencies of the gem that also depend on it, and also have version constraints to consider).</p>

<p>To install the latest version of a gem and all of its dependencies:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install &lt;gem_name&gt;</span></code></pre></td></tr></table></div></figure>


<p>Install a specific version of a gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install &lt;gem_name&gt; -v&lt;version&gt;</span></code></pre></td></tr></table></div></figure>


<p>To see the dependencies of a gem:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem dependency &lt;gem_name&gt; -v&lt;version&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Ruby applications</h3>

<p>Bundler is a Ruby gem (so it is installed and managed by Ruby Gems) that handles installing the correct gem versions for Ruby <em>applications</em> (differentiated from Ruby Gems, which manages dependencies between Ruby <em>gems</em> directly).</p>

<p>The version of bundler can be seen by running:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle --version</span></code></pre></td></tr></table></div></figure>


<p>Bundler takes the list of gems a Ruby application depends on in the form of a <code>Gemfile</code> (which may or may not specify version constraints) and resolves a version of each gem to use. It does so by starting from the latest stable version of each gem, and then applying any constraints specified in the <code>Gemfile</code>; it then applies the version constraints of any <em>other</em> gems in the <code>Gemfile</code> that depend on it (if applicable). This process is done recursively, to ensure the gems listed in the <code>Gemfile</code>, and all of their dependencies (and all of <em>their</em> dependencies, etc) are compatible with one another.</p>

<p>It saves that list of specific versions as a <code>Gemfile.lock</code> file, which is used for all future bundle installs, rather than attempting to re-calculate the bundle of compatible gems again. This means versions of the gems that are subsequently published are <em>not</em> installed on future runs of <code>bundle install</code>.</p>

<p>To install the same versions of all gems as when the bundle was built (or to build the bundle for the first time if a <code>Gemfile.lock</code> is not present or new gems have been added to <code>Gemfile</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p>To recalculate the bundle (still sticking to the version constraints mentioned in the <code>Gemfile</code>):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle update</span></code></pre></td></tr></table></div></figure>


<p>To update beyond the versions that are mentioned in your <code>Gemfile</code>, you must first update the <code>Gemfile</code> and then run <code>bundle update</code>.</p>

<p>To get a list of gems in the bundle that can be updated to newer versions (ignoring any version constraints of other gems that depend on it):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle outdated</span></code></pre></td></tr></table></div></figure>


<h3>Differences between Ruby Gems and Bundler</h3>

<p>The Ruby Gems CLI does not keep a record of the exact versions of gem&rsquo;s dependencies it installs (it does maintain a local cache, though). <code>gemspec</code> files should list the full range of known compatible dependency versions, to be as permissive as possible (without resorting to optimistic versioning).</p>

<p>Bundler, however, takes the opposite approach to manage Ruby application&rsquo;s dependencies with <code>Gemfile.lock</code>: the list of gem versions are as restrictive as possible, to ensure the same behaviour between installs of the Ruby application (without the chance of different dependency versions being used). This is why the <code>Gemfile.lock</code> should be committed with version control, and shared between development and production deployments of the Ruby application.</p>

<p>Bundler can also used to manage the development and testing of gems: usually you want to ensure the same version of your test framework gems and other development dependencies are used between (development) installs of the gem.</p>

<p>Because it&rsquo;s possible to reference the contents of a <code>gemspec</code> file from a <code>Gemfile</code>, the <code>Gemfile</code> included with the gem is usually just a wrapper for the <code>gemspec</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gemspec</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, it allows you to install the development dependencies using <code>bundle install</code>, which (importantly) generates a <code>Gemfile.lock</code>, and if committed to version control, ensures anyone else who works on the gem or its test suite will get the same versions of the development dependencies. The <code>Gemfile</code> and <code>Gemfile.lock</code> are ignored when downloading the gem through Ruby Gems; they'e only used during development.</p>

<h2>Establishing what versions of Ruby your gem is compatible with</h2>

<h3>Decide up-front</h3>

<p>Ideally, you should decide what versions of Ruby you&rsquo;re going to support before you begin writing your gem.</p>

<p>You can use <a href="https://stats.rubygems.org/">RubyGem stats</a> to find out the latest Ruby version usage statistics, to make an informed decision about what versions you would like to support (and thereby what approximate percentage of Ruby projects or users).</p>

<p>If you&rsquo;re still in doubt, you can check popular, well maintained gems for what versions or Ruby they are still supporting, and use it as a guide.</p>

<p>You&rsquo;ll also need to consult the supported versions of Ruby of any dependencies you add to your gem, as they may further limit which ones your gem can support in turn. You will need to check if the list of supported Ruby versions <em>changes</em> over the versions of the gem yours is compatible with. Generally when a well-maintained gem drops support for a version of Ruby, it is done so in a major increment (but unfortunately, not always).</p>

<p>To get the required Ruby versions of a gem yours depends on (in YAML):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">specification</span> <span class="o">&lt;</span><span class="n">dependency</span><span class="o">-</span><span class="n">gem</span><span class="o">-</span><span class="nb">name</span><span class="o">&gt;</span> <span class="o">-</span><span class="n">v</span> <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span> <span class="n">required_ruby_version</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Check your code for version-specific features</h3>

<p>Either you will have decided what versions of Ruby you&rsquo;re supporting up-front, and will restrict yourself to the syntax and standard library calls that are available in all versions, or you will have already written or inherited a gem that you need to audit. In either case, when you have finished your gem, it&rsquo;s a good idea to go through and check all classes and methods of the standard library are available in all versions of Ruby you&rsquo;re supporting.</p>

<p>You can use <a href="https://apidock.com/ruby">API Dock&rsquo;s Ruby search</a> to search for classes and methods, and <a href="https://apidock.com/faq#What-is-the-bar-graph-on-the-top-of-documentation-pages">use the bar graph</a> to determine in what versions of Ruby they were available, and when their behaviour may have changed.</p>

<p>Checking changes in syntax and idioms is a little trickier. You can use a summary of new feature with each new version (like <a href="https://rubychangelog.com/">Ruby Changelog.com</a> or <a href="https://www.rubyguides.com/ruby-version-changes/">Ruby Guides</a>) to get an idea. However, a more active scan can be done by installing <a href="https://github.com/rubocop-hq/rubocop">Rubocop</a> and by setting the <code>TargetRubyVersion</code> in the <code>.rubocop</code> file to your lowest supported Ruby version which, as well as performing other code linting, can warn against syntax and standard library calls not available in the target Ruby version:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">AllCops</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">TargetRubyVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2.0.0</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Test against different Ruby versions</h3>

<p>Finally, you can use <a href="https://rvm.io/">rvm</a> (or similar) to switch between Ruby versions for testing applications or running your gem&rsquo;s test suite.</p>

<h3>Declaring version-specific code</h3>

<p>You can determine the version of Ruby at runtime using the <code>RUBY_VERSION</code> constant:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">RUBY_VERSION</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;2.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because <code>RUBY_VERSION</code> is a string and difficult to compare, if you&rsquo;re only supporting <a href="https://apidock.com/ruby/Gem/Version">Ruby versions beyond 1.9.3</a>, you can wrap it in <code>Gem::Version</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">RUBY_VERSION</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;2.0.0&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This approach may assist with normalizing the differences in behaviour of the standard library versions, but will not polyfill newer Ruby language syntax or idioms into older versions of Ruby.</p>

<h3>Declaring what versions of Ruby your gem supports</h3>

<p>To declare the versions of Ruby your gem will work with, use the <a href="https://guides.rubygems.org/specification-reference/#required_ruby_version">required_ruby_version</a> option in its <code>gemspec</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...                          </span>
</span><span class='line'>  <span class="c1"># Compatible with any version of Ruby starting with a 2. (excluding pre-releases)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">required_ruby_version</span> <span class="s1">&#39;~&gt; 2.0&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Generally you&rsquo;ll want to be using <em>pessimistic</em> version constraints (as opposed to <em>optimistic</em> ones), which means you&rsquo;ll want to put an upper bound on the version of (likely future) versions of Ruby that are known to work with your gem: e.g. <code>~&gt; 2.0</code> rather than <code>&gt;= 2.0.0</code>. This means when Ruby 3.0 comes out, you will need to publish a new version of the gem, explicitly stating it&rsquo;s compatible, rather than assuming your gem will be compatible with any future version of Ruby.</p>

<p>The <code>~&gt;</code> operator is shorthand for fixing all but the last number mentioned: e.g. <code>~&gt; 2.0</code> is shorthand for <code>['&gt;=2.0.0', '&lt; 3.0']</code>. We fix to the major version of Ruby as it&rsquo;s unlikely any breaking changes will be introduced without a major increment.</p>

<p>If you want to support different major versions of Ruby, you&rsquo;ll need to use the longer <em>compound requirement</em> format: e.g. <code>['&gt;=1.7', '&lt; 3']</code> These values ANDed, i.e. all version expressions must be true of a version to be compatible.</p>

<h2>Establishing what versions of Rails (or other dependencies) your gem is compatible with</h2>

<p>This section uses writing a Rails engine as an example, but the same applies for writing any gem with a dependency on another.</p>

<h3>Decide up-front</h3>

<p>Once again, ideally you will know this up-front and restrict your gem to only using the public methods available for those versions. Go through your code at the end of writing and make sure all classes and methods you&rsquo;re using are available in all versions of the gem you&rsquo;re supporting.</p>

<p>To get a list of available versions of a gem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="n">list</span> <span class="o">--</span><span class="n">remote</span> <span class="o">-</span><span class="n">e</span> <span class="o">&lt;</span><span class="n">dependency</span><span class="o">-</span><span class="nb">name</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Check your code for version-specific features</h3>

<p>For Rails, you can search through <a href="https://apidock.com/rails">API Docks.com</a> and <a href="https://apidock.com/faq#What-is-the-bar-graph-on-the-top-of-documentation-pages">use the bar graph</a>. For other open source gems, you will need to <a href="http://greena13.github.io/blog/2020/12/19/tracking-changes-in-open-source-libraries-on-github.markdown">check the source code on Github</a>.</p>

<p>Similar to the above, the <a href="https://github.com/rubocop-hq/rubocop-rails">Rubocop Rails plugin</a> allows you to target the lowest version of Rails you&rsquo;re planning on supporting and warn of missing or incompatible functionality:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">AllCops</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">TargetRailsVersion</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">4.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is likely to be less effective than the linting for different Ruby versions, as this feature started out its life as a way to toggle off newer linting rules that don&rsquo;t apply to older versions of Rails, rather than to warn of newer methods and classes being used with older versions of Rails.</p>

<h3>Test against different gem versions</h3>

<p>To actively test a gem&rsquo;s Rails dependency, you can generate a series of test Rails applications <a href="https://stackoverflow.com/questions/379141/specifying-rails-version-to-use-when-creating-a-new-application">using different versions</a> to verify it behaves as expected.</p>

<p>To execute a test suite against a dummy app, you may choose to symlink the dummy app to those different Rails applications, or use a git submodule with a different Rails version on each branch, that you can switch between. You can use the approach for generating applications using different versions of Rails, but <a href="https://stackoverflow.com/a/23512768/1337796">generate a rails engine instead</a> and copy its dummy application (only) over into your git submodule.</p>

<p>To test your gem against other dependencies, modify the <code>add_runtime_dependency</code> in your gem&rsquo;s <code>gemspec</code> file, to be specific versions, <code>bundle install</code> and re-run your test suite to make sure it still passes. Just remember to set it back before committing to version control or publishing your gem.</p>

<h3>Declaring version-specific code</h3>

<p>Since Rails 1.0, it has provided a <code>VERSION</code> constant, which contains: <code>MAJOR</code>, <code>MINOR</code>, <code>TINY</code> and <code>PRE</code> values. The first 3 are integers, while <code>PRE</code> is a string.</p>

<p>These can be used to provide Rails-specific behaviour, to allow your gem to support versions of Rails with different interfaces, at the same time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Rails</span><span class="o">::</span><span class="no">VERSION</span><span class="o">::</span><span class="no">MAJOR</span> <span class="o">&gt;=</span> <span class="mi">4</span>
</span><span class='line'>  <span class="c1"># Rails 4 (and above) compatible behaviour</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="c1"># Before Rails 4 compatible behaviour</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For other gems, you can use the following approach (although I&rsquo;d suggest doing so, sparingly):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="no">Gem</span><span class="o">.</span><span class="n">loaded_specs</span><span class="o">[</span><span class="s1">&#39;gem_name&#39;</span><span class="o">].</span><span class="n">version</span> <span class="o">&gt;=</span> <span class="no">Gem</span><span class="o">::</span><span class="no">Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;2.0.0&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Declaring what versions of Rails your gem is compatible with</h3>

<p>To declare a runtime dependency (a gem yours depends on at runtime, not just during development or testing), add to your gem&rsquo;s <code>gemspec</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...                          </span>
</span><span class='line'>  <span class="c1"># Compatible with any version of &lt;gem_name&gt; starting with a 2. (excluding pre-releases)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">add_runtime_dependency</span> <span class="s1">&#39;gem_name&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, pessimistic versioning is recommended (although keeping on top of when any of your dependencies have new versions available is a much larger effort than doing so for versions of Ruby).</p>

<p>To get a summary of dependencies that may be outdated, you can regularly run in the root of your gem:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">outdated</span>
</span></code></pre></td></tr></table></div></figure>


<h2>How to version your gem when compatible Ruby or dependency versions change</h2>

<p>The approach to how you should version your gem in relation to changes in the dependency versions it supports, depends on whether you are adding a version (or expanding the list of compatible versions) or removing them.</p>

<p>If you need to indicate compatibility with a new major version of a dependency (assuming you&rsquo;re using pessimistic versioning based on major versions), it should be done in isolation (and not bundled up with any other changes) as a minor or patch version, so consumers of your gem can upgrade without any undue friction. You must publish a new version because you cannot change the <code>gemspec</code> file for a published gem without giving it a new version. It should not mean any change in behaviour of your gem (and therefore should not constitute a major increment) and choosing a minor increment affords you the option of patching it (with high priority security of bug fixes) if you need to in the future (without requiring users to perform larger upgrades to get those patches).</p>

<p>If you are dropping support for a version or range of versions, this should be done as a major increment. Even if doing so does not change the behaviour of your gem, it will likely mean larger changes in the applications that consume it (such as the need to upgrade the bundle). The size and complexity of this upgrade should be communicated to users of your gem by the major increment. For this reason, dropping support for older versions of dependencies is often bundled in with major changes to the library, to reduce the number of major upgrades consumers must go through to stay up-to-date.</p>

<p>The exception to this may be if you discover there is a bug in a particular version of a dependency, which you want to warn users about by labelling it as being incompatible. This is usually done as a patch increment. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Gem</span><span class="o">::</span><span class="no">Specification</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...                          </span>
</span><span class='line'>  <span class="c1"># All versions 2.* of gem_name, as long as they include the bugfix implemented in 2.1</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">add_runtime_dependency</span> <span class="s1">&#39;gem_name&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 2.1&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Further reading</h2>

<p>For additional important concepts on how to manage and publish gems that are well versioned, see <a href="https://guides.rubygems.org/patterns/">RubyGem&rsquo;s Patterns</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recursive Procedures]]></title>
    <link href="http://greena13.github.io/blog/2020/12/18/recursive-procedures/"/>
    <updated>2020-12-18T12:16:44+00:00</updated>
    <id>http://greena13.github.io/blog/2020/12/18/recursive-procedures</id>
    <content type="html"><![CDATA[<p>Recursion is difficult to think about, but if you know two things, it becomes simple.</p>

<!--more-->


<h2>Recursive Procedures vs Recursive Processes</h2>

<h3>Recursive Procedures</h3>

<p>A recursive procedure is any procedure whose definition refers to itself (directly or indirectly).</p>

<p>They always have two components:</p>

<ul>
<li>A base case: the circumstances where routine does not call itself again, but instead returns a result. This can be thought of as the end, or the terminating conditions of the recursion.</li>
<li>Rules for evolving the algorithm in such a way as to eventually converge on the base-case. This can be thought of as the filtering done in parent loop, to refine the work done in its ancestors. Or the logic that prevents the recursion from being infinite.</li>
</ul>


<p>Recursive procedures are one of two <em>process</em> types:</p>

<h3>Recursive Processes</h3>

<p>A recursive <em>process</em> is a type of recursive procedure characterised by a deferred operations chain (i.e. the procedure is written in such a way that each loop can not complete without first getting the result of the next iteration and then performing some further work on it - unless it’s the base case).</p>

<p>The execution of the recursive call goes through a period of expansion, where the process builds up a chain of deferred operations (by placing local variables and context on the call stack) and when the base-case is encountered, a period of contraction, where those scopes are popped off the call stack and executed.</p>

<p>It’s common to use a procedure for calculating the factorial of a number, as an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">number</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">number</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The routine for <code>factorial(n)</code> cannot complete without first the routine for <code>factorial(n-1)</code> returning, to then be multiplied by <code>n</code>. The important bit is that we need to multiple by <code>n</code>, i.e. perform additional work with the result of a subsequent iteration; this means we need to keep a record of the value of <code>n</code> and the operation to be performed (a pointer to the routine) for each iteration (which is stored as part of the scope put on the call stack).</p>

<p>So for any input value, during the expansion, a deferred operations chain is pushed onto the stack (one link for each recursive call), until we reach the base-case of <code>n == 1</code> (<code>n</code> is decremented with each call to the next loop, so we always get there eventually). Then, during contraction, each stage of that chain is popped off the call stack and executed with the value of <code>n</code> set at the time it was pushed onto the stack, and the result of the next loop (which holds the accumulative product of all the subsequent loops).</p>

<p>I prefer to think of these as &ldquo;bottom-up&rdquo; or &ldquo;right-to-left&rdquo; procedures, because when given a tree structure to operate on, in order to perform their work on each node, they must have the return value of the work done on their descendants, first.</p>

<h3>Iterative Processes</h3>

<p>Iterative processes are a type of recursive procedure characterised by a finite set of state variables being passed between execution calls. This effectively means all context and the result of previous calls are passed as arguments to the next iteration (rather than storing future work to be done when subsequent loops return). Because of this, there is theoretically no need to keep the previous call’s scope on the stack and the routine can run in constant memory. However, in reality most languages still consume linear amounts of memory (in proportion to the number of recursive calls) and can still cause <code>StackOverflow</code> exceptions if the recursion is too deep, because they need to keep track of where to return to, after each loop is finished.</p>

<p>To actually get iterative processes to run in constant memory, you have to take advantage of another their properties: they can be rewritten using looping constructs - such as <code>do</code>, <code>repeat</code>, <code>until</code>, <code>for</code> and <code>while</code> - likely with one or more variables in an outer scope that can be accessed from all iterations of the loop, which you can use to store the result of the previous loop. By rewriting them in terms of looping constructs, you allow the procedure to run in constant memory.</p>

<p>Some languages are smart enough to do this rewriting automatically for you at compile time or runtime, when the iterative process is <em>tail-recursive</em>, which means the call to itself is the final return value (i.e. its “tail” is a call to itself).</p>

<p>Rewriting the above example to be tail-recursive:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="n">accumulator</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">accumulator</span> <span class="k">if</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">factorial</span><span class="p">(</span><span class="n">number</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">number</span> <span class="o">*</span> <span class="n">accumulator</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This means passing an accumulator as an argument to hold the return value so the final line of the procedure is a call to itself (with no extra work to be performed). Now each iteration of the loop does all its work before passing onto the next iteration - there’s no need to record the value of any local variables or future operations (all context and the accumulator are passed on as arguments to the next iteration, instead).</p>

<p>I prefer to think of these as &ldquo;top-down&rdquo; or &ldquo;left-to-right&rdquo; procedures, because when given a tree structure to operate on, they perform their work for each parent node before calling themselves again for the descendant nodes.</p>

<h3>Summary</h3>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 152px;"/>
        <col style="width: 298px;"/>
        <col style="width: 343px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 152px; padding: 8px;">
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 298px; padding: 8px;">
            <div>Description</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 343px; padding: 8px;">
            <div>Application</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 152px; padding: 8px;">
            <div>Recursive processes</div>
            <div><br/></div>
            <div>a.k.a Bottom-up (or right-to-left)</div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 298px; padding: 8px;">
            <div>Partially evaluating or deferring earlier (higher up) iterations and waiting for the result
                of later iterations to then customise or merge data with the higher evaluation
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 343px; padding: 8px;">
            <div>When information on lower or subsequent iterations should affect how higher iteration should
                be performed.
            </div>
            <ul>
                <li>
                    Whether any ancestor meets requirements
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 152px; padding: 8px;">
            <div>Iterative processes</div>
            <div><br/></div>
            <div>a.k.a Top-down (or left-to-right)</div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 298px; padding: 8px;">
            <div>Evaluating earlier (higher up) algorithms and passing it through or down to later iterations
                as context to be used to customise (stopping condition) or merge data
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 343px; padding: 8px;">
            <div>When information on higher iterations should affect how subsequent iterations should
                behave.
            </div>
            <ul>
                <li>
                    Flags/toggles
                </li>
                <li>
                    Max-depths/iterations
                </li>
            </ul>
        </td>
    </tr>
    </tbody>
</table>


<h2>Message passing</h2>

<p>We&rsquo;ve discussed the ways that work can be sequenced and recursively evaluated, which we can think of as how the input is processed. But also of importance is how the results of that work is then collected, which we can think of as how the output is processed.</p>

<p>For simple cases, a single memo or total can be maintained (i.e. returned). However, for more complex cases, where the algorithm for collecting the results of each iteration involve one or mose decisions, a context or accumulator object may be required.</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 152px;"/>
        <col style="width: 298px;"/>
        <col style="width: 343px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 152px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 298px; padding: 8px;">
            <div>Description</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 343px; padding: 8px;">
            <div>Application</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 152px; padding: 8px;">
            <div>Returning</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 298px; padding: 8px;">
            <div>Returning the results of subsequent operations and not mutating a shared cumulator</div>
            <ul>
                <li>
                    Don’t need to pass in a receiver of the answer
                </li>
            </ul>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 343px; padding: 8px;">
            <div>When there is only one way to cumulate the results</div>
            <ul>
                <li>
                    E.g. Totals, counts, flattening of arrays
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 152px; padding: 8px;">
            <div>Accumulator</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 298px; padding: 8px;">
            <div>Mutating a shared cumulator object instantiated in the first loop and passed in by a parent
                or 
            </div>
            <ul>
                <li>
                    <div>Requires breaking the algorithm into 2 parts: the actual recursive part, and a
                        wrapper that returns this cumulator
                    </div>
                </li>
            </ul>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 343px; padding: 8px;">
            <div>When subsequent iterations are best placed to decide how to integrate the results of their
                iteration into the cumulator
            </div>
            <ul>
                <li>
                    <div>When it’s non trivial to incorporate subsequent results</div>
                </li>
                <li>
                    <div>E.g. when you have several counters and merging them in an earlier iteration would
                        involve duplicating the logic in the subsequent one
                    </div>
                </li>
            </ul>
        </td>
    </tr>
    </tbody>
</table>


<h2>Summary</h2>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 93px;"/>
        <col style="width: 144px;"/>
        <col style="width: 256px;"/>
        <col style="width: 314px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 93px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>Returning</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Accumulator</div>
        </td>
    </tr>
    <tr>
        <td rowspan="6"
            style="height: 200px; border: 1px solid rgb(204, 204, 204); width: 93px; padding: 8px;">
            <div>Iterative</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Merging/calculation</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 570px; padding: 8px;">
            <div>Done in child loop</div>
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Arguments</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>Remaining dataset (only)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Remaining dataset</div>
            <div>Accumulator (mutated by parent)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Side-effects</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>None</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Mutates accumulator with value from current iteration + all parent iterations</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Returns</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>Result of algorithm run on all parent loops + Result of algorithm run on all child loops
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Accumulator for convenience of outermost call</div>
            <div><br/></div>
            <div>Can split out into an outer call that does the setting of the accumulator and the returning
                for you
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Initial value</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>Determined by first loop</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Determined by first loop’s accumulator</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Base case</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>Return final value </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Perform final mutation</div>
        </td>
    </tr>
    <tr>
        <td style="height: 200px; border: 1px solid rgb(204, 204, 204); width: 93px; padding: 8px;"
            rowspan="6">
            <div>Recursive</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Merging/calculation</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 570px; padding: 8px;">
            <div>Done in parent loop</div>
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Arguments</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>Remaining dataset </div>
            <ul>
                <li>
                    <div>Result of algorithm run on all parent loops (result so far)</div>
                </li>
            </ul>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <ul>
                <li>
                    <div>Remaining dataset</div>
                </li>
                <li>
                    <div>Accumulator (not yet mutate by parent)</div>
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Side-effects</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>None</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Mutates accumulator with value from current iteration + result from all child iterations
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Returns</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>Result of algorithm of all child iterations</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Accumulator for convenience of outermost call</div>
            <div><br/></div>
            <div>Can split out into an outer call that does the setting of the accumulator and the returning
                for you
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Initial value</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>Determined by last (innermost loop)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Determined by first loop’s accumulator</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 144px; padding: 8px;">
            <div>Base case</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 256px; padding: 8px;">
            <div>Return initial value</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 314px; padding: 8px;">
            <div>Perform first mutation</div>
        </td>
    </tr>
    </tbody>
</table>


<h2>Examples</h2>

<h3>Bottom-up, returning</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># @note Algorithm for accumulation is always a simple addition, so can use returning</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sum_bur</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Checking initial arguments</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span> <span class="k">unless</span> <span class="n">arr</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Reduction or further focusing on remaining dataset</span>
</span><span class='line'>  <span class="n">remaining_elements</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Checking for stopping conditions</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">remaining_elements</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>    <span class="c1"># Execution traverses full recursion path before sending the result back up the call stack</span>
</span><span class='line'>    <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">sum_bur</span><span class="p">(</span><span class="n">remaining_elements</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># Handling of stopping conditions - code that is evaluated on the final expansion step before contraction</span>
</span><span class='line'>    <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Top-down, returning</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># @note Algorithm for accumulation is always a simple addition, so can use returning</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sum_tdr</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Checking initial arguments</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span> <span class="k">unless</span> <span class="n">arr</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Reduction or further focusing on remaining dataset</span>
</span><span class='line'>  <span class="n">remaining_elements</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Result is calculated in earlier iterations and then passed down into subsequent ones</span>
</span><span class='line'>  <span class="n">next_total</span> <span class="o">=</span> <span class="n">total</span> <span class="o">+</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Checking for stopping conditions</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">remaining_elements</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>    <span class="n">sum_tdr</span><span class="p">(</span><span class="n">remaining_elements</span><span class="p">,</span> <span class="n">next_total</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">next_total</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bottom-up, accumulator</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># @note Algorithm for accumulation is not simple, so a accumulator is used</span>
</span><span class='line'><span class="c1"># @note Even though algorithm is bottom up, the passing of the initial value of the accumulator is still</span>
</span><span class='line'><span class="c1">#       top-down</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sum_bua</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">context</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">total</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">missing</span><span class="p">:</span> <span class="mi">0</span> <span class="p">})</span>
</span><span class='line'>  <span class="c1"># Checking initial arguments</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">context</span> <span class="k">unless</span> <span class="n">arr</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Reduction or further focusing on remaining dataset</span>
</span><span class='line'>  <span class="n">remaining_elements</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Checking for stopping conditions</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">remaining_elements</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>    <span class="c1"># Execution traverses full recursion path before sending the result back up the call stack</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">sum_bua</span><span class="p">(</span><span class="n">remaining_elements</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># Mutate/update accumulator rather than return a value</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">context</span><span class="o">[</span><span class="ss">:missing</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">context</span><span class="o">[</span><span class="ss">:total</span><span class="o">]</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Context is returned by convenience for top-most call, to avoid having to specify the accumulator in the</span>
</span><span class='line'>  <span class="c1"># outer context when calling the method</span>
</span><span class='line'>  <span class="n">context</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Top-down, accumulator</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># @note Algorithm for accumulation is not simple, so a accumulator is used</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sum_tda</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">context</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">total</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="ss">missing</span><span class="p">:</span> <span class="mi">0</span> <span class="p">})</span>
</span><span class='line'>  <span class="c1"># Checking initial arguments</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span> <span class="k">unless</span> <span class="n">arr</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Reduction or further focusing on remaining dataset</span>
</span><span class='line'>  <span class="n">remaining_elements</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Mutate/update accumulator rather than return a value</span>
</span><span class='line'>  <span class="c1"># @note This is done before calling the next iteration</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>    <span class="n">context</span><span class="o">[</span><span class="ss">:missing</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">context</span><span class="o">[</span><span class="ss">:total</span><span class="o">]</span> <span class="o">+=</span> <span class="n">arr</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Checking for stopping conditions</span>
</span><span class='line'>  <span class="c1"># The handling of a stopping condition is to just not call itself any more</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">remaining_elements</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>    <span class="n">sum_tda</span><span class="p">(</span><span class="n">remaining_elements</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Context is returned by convenience for top-most call, to avoid having to specify the accumulator in the</span>
</span><span class='line'>  <span class="c1"># outer context when calling the method</span>
</span><span class='line'>  <span class="n">context</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XPath Selectors Cheatsheet]]></title>
    <link href="http://greena13.github.io/blog/2020/12/15/xpath-selectors-cheatsheet/"/>
    <updated>2020-12-15T09:53:04+00:00</updated>
    <id>http://greena13.github.io/blog/2020/12/15/xpath-selectors-cheatsheet</id>
    <content type="html"><![CDATA[<p>A XPath selectors cheatsheet using the concepts laid out in <a href="http://greena13.github.io/blog/2020/12/12/thinking-in-dimensions-a-unified-approach-to-filter-grammars">Thinking in Dimensions: A Unified Approach to Filter grammars</a>.</p>

<!--more-->


<h2>Logic operators</h2>

<p>XPath provides some of its logic operators both inside expressions and predicates (sub-filters).</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 105px;"/>
        <col style="width: 354px;"/>
        <col style="width: 328px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 105px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 354px; padding: 8px;">
            <div>Inside expression</div>
        </td>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 328px; padding: 8px;">
            <div>Inside predicate</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 105px; padding: 8px;">
            <div>Equal</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 354px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//a[@id </span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">=</span><span
                    style="font-family: &quot;Courier New&quot;;"> "xyz"]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 328px; padding: 8px;">
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 105px; padding: 8px;">
            <div>Not equal</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 354px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//a[@id </span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">!= </span><span
                    style="font-family: &quot;Courier New&quot;;">"xyz"]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 328px; padding: 8px;">
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 105px; padding: 8px;">
            <div>Greater than</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 354px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//a[@price </span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">&gt;</span><span
                    style="font-family: &quot;Courier New&quot;;"> 25]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 328px; padding: 8px;">
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 105px; padding: 8px;">
            <div>AND</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 354px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//div[@class="head"]</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">[@id="top"]</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 328px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//div[@id="head" </span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">and</span><span
                    style="font-family: &quot;Courier New&quot;;"> position()=2]</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 105px; padding: 8px;">
            <div>OR</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 354px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//a | //div</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 328px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//div[(x and y) </span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">or</span><span
                    style="font-family: &quot;Courier New&quot;;"> not(z)]</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 105px; padding: 8px;">
            <div>NOT</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 354px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 328px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//div[(x and y) or </span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">not</span><span
                    style="font-family: &quot;Courier New&quot;;">(z)]</span></div>
        </td>
    </tr>
    </tbody>
</table>


<h2>Filtering vs selection</h2>

<p>XPath provides a more flexible set of selection options than CSS.</p>

<p>XPath expressions allow filtering nodes based on their ancestors or children without changing the selection target.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Selects descendant
</span><span class='line'>//ul/li[1]
</span><span class='line'>
</span><span class='line'># Select parent based on descendant
</span><span class='line'>//ul[li[position()=1]]</span></code></pre></td></tr></table></div></figure>


<p>XPath also allows matching or returning element attributes (as opposed to the whole element):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Filter on attribute
</span><span class='line'>//button[text()="Submit”]
</span><span class='line'>
</span><span class='line'># Match or return the attribute value
</span><span class='line'>//button/text()</span></code></pre></td></tr></table></div></figure>


<h2>Semantic dimensions</h2>

<p>XPath can be used for XML or HTML documents.</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 103px;"/>
        <col style="width: 167px;"/>
        <col style="width: 174px;"/>
        <col style="width: 169px;"/>
        <col style="width: 199px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div>Element Hierarchy and content</div>
            <div>(Permutation)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;">
            <div>Element Position</div>
            <div>(Permutation)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div>Element type</div>
            <div>(Nominal)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 199px; padding: 8px;">
            <div>Attribute</div>
            <div>(Permutation)</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">class</span> and <span
                    style="font-family: &quot;Courier New&quot;;">id</span> attributes are Fields separated by
                spaces
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 812px; padding: 8px;"
            colspan="5">
            <div><span style="color: rgb(0, 0, 0); --inversion-type-color:  simple;">Non anchored match</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Any / Presence</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div>Anywhere:</div>
            <div><font face="Courier New"><br/></font></div>
            <div><font
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">//</font><font
                    face="Courier New">hr</font></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><font face="Helvetica Neue">Self:</font></div>
            <div><font face="Helvetica Neue"
                       style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.</font></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><font face="Helvetica Neue">Short for: </font><span
                    style="font-family: &quot;Courier New&quot;;">self::node()</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">*</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">*</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 199px; padding: 8px;">
            <div><font face="Helvetica Neue">Attribute:</font></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//a[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">@</font>rel]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">a[rel]</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Exact match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Match Content:</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//button[</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">text()=</span><span
                    style="font-family: &quot;Courier New&quot;;">"Submit”]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Return Content:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//span/text()</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;"><br/></td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">//</span><span
                    style="font-family: &quot;Courier New&quot;;">h1</span></div>
            <div><br/></div>
            <div>CSS Equivalent:</div>
            <div><span style="font-family: &quot;Courier New&quot;;">h1</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 199px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//input[@type="submit"]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">input[type="submit"]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Return attribute value:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//a</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">/@</span><span
                    style="font-family: &quot;Courier New&quot;;">href</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Match on language:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">lang(str)</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Matching on </span><span
                    style="font-family: &quot;Courier New&quot;;">id</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> and </span><span
                    style="font-family: &quot;Courier New&quot;;">class</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">: </span></div>
            <div><br/></div>
            <div>No fields operator, so need workaround:</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//div[contains(concat(' ',normalize-space(@class),' '),' foobar ')]</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">.foobar</span></div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="vertical-align: bottom; background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 812px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Top / Left anchored match</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Absolute match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple;"><font face="Helvetica Neue"
                                                                      style="color: rgb(41, 41, 41); --inversion-type-color: simple;">Root</font></span>
            </div>
            <div><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">/</span>
            </div>
            <div><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">/body</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:root</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><font face="Helvetica Neue">Match content:</font></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//[</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">starts-with(</span><span
                    style="font-family: &quot;Courier New&quot;; --inversion-type-color:  simple;"><font
                    style="color: rgb(41, 41, 41); --inversion-type-color: simple;">text</font></span><span
                    style="font-family: &quot;Courier New&quot;; --inversion-type-color:  simple; color: rgb(41, 41, 41);">()</span><span
                    style="font-family: &quot;Courier New&quot;;">, 'h'</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//ul/li</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">[1]</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//ul/li[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">position()=</font>1]</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">ul &gt; li:first-child</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">starts-with(</font></span><span
                    style="font-family: &quot;Courier New&quot;; --inversion-type-color:  simple;"><font
                    style="color: rgb(41, 41, 41); --inversion-type-color: simple;">name()</font></span><span
                    style="font-family: &quot;Courier New&quot;;">, 'h'<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</font>]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 199px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//a[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">starts-with(</font>@href, '/‘<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</font>]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">a[href^='/']</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Immediate Relative match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Match on child type:</span></div>
            <div><span style="--inversion-type-color:  simple; font-family: &quot;Courier New&quot;;"><font
                    style="color: rgb(41, 41, 41); --inversion-type-color: simple;">//</font></span><span
                    style="font-family: &quot;Courier New&quot;;">ul</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">/</span><span
                    style="font-family: &quot;Courier New&quot;;">li</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Short for:</span><span
                    style="font-family: &quot;Courier New&quot;;"> //ul/child::li</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div>CSS Equivalent:</div>
            <div><span style="font-family: &quot;Courier New&quot;;">ul &gt; li</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Content:</span></div>
            <div><br/></div>
            <div><font face="Courier New">//button[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">contains(</font>text(),”Submit”<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</font>]</font></div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Adjacent sibling (immediately proceeded by)</span><span
                    style="font-family: &quot;Courier New&quot;;">: </span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//h1/</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">following-sibling::</span><span
                    style="font-family: &quot;Courier New&quot;;">ul</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">[1]</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">h1 + ul</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//[</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">contains(</span><span
                    style="font-family: &quot;Courier New&quot;; --inversion-type-color:  simple; color: rgb(41, 41, 41);">name()</span><span
                    style="font-family: &quot;Courier New&quot;;">, 'h'</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 199px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">(Thinking of each character in the substring as being the next immediate match of the one before):</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">a[href</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">*=</span><span
                    style="font-family: &quot;Courier New&quot;;">'://‘]</span></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Or</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">a[href</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">~</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">=</span><span
                    style="font-family: &quot;Courier New&quot;;">'://‘]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">font[</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">contains(@class,"head")</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span></div>
            <div><br/></div>
            <div>CSS Equivalent:</div>
            <div><span style="font-family: &quot;Courier New&quot;;">//a[contains(@href, </span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">'://')]</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Any relative match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div>Descendant or self</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//div</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">//</span><span
                    style="font-family: &quot;Courier New&quot;;">p</span></div>
            <div><br/></div>
            <div>Short for:<span style="font-family: &quot;Courier New&quot;;"> </span></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">/descendant</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">-or-self</span><span
                    style="font-family: &quot;Courier New&quot;;">::node()/</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><font face="Helvetica Neue">Any descendant</font></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">//div/descendant::</font>p/</span>
            </div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div>CSS Equivalent:</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">div p</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Any following sibling:</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//h1/</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">following-sibling::</span><span
                    style="font-family: &quot;Courier New&quot;;">ul</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">h1 ~ ul</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div>Combines position and hierarchy:</div>
            <div><br/></div>
            <div>Everything in the document after the closing tag of the current node</div>
            <div><br/></div>
            <div><font face="Courier New" style="color: rgb(255, 38, 0); --inversion-type-color: simple;">/following</font>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><font face="Helvetica Neue">Matches tag types with ‘h’ after ‘1’</font></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div><font style="font-family: &quot;Courier New&quot;;">//[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">contains(substring-after(</font>name(), “h”<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</font>, “1”<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</font>]</font></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 199px; padding: 8px;">
            <div><span style="font-family: Helvetica Neue;">Matches attributes with ids with ‘bar’ after ‘foo’:</span>
            </div>
            <div><span style="font-family: Helvetica Neue;"><br/></span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//[</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">contains(substring-after(</span><font
                    face="Courier New">@id, “foo”</font><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span><span
                    style="font-family: &quot;Courier New&quot;;">, “bar”</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span></div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(204, 204, 204); width: 812px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Bottom / Right anchored match</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Absolute match</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div>Content:<br/></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//[</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">ends-with(</span><span
                    style="font-family: &quot;Courier New&quot;; --inversion-type-color:  simple; color: rgb(41, 41, 41);">text()</span><span
                    style="font-family: &quot;Courier New&quot;;">, 'h'</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">/li[last()]</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//ul/li[</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">position()= last()</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:last-child</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">ends-with(</font></span><span
                    style="font-family: &quot;Courier New&quot;; --inversion-type-color:  simple;"><font
                    style="color: rgb(41, 41, 41); --inversion-type-color: simple;">name()</font></span><span
                    style="font-family: &quot;Courier New&quot;;">, 'h'<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</font>]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 199px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">//a[</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">ends-with(</span><span
                    style="font-family: &quot;Courier New&quot;;">@href, '.pdf’</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">)</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">CSS Equivalent:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">a[href$='pdf']</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Immediate Relative match</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div>Parent:</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">..</font></span></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div><font face="Helvetica Neue">Short for: </font><span
                    style="font-family: &quot;Courier New&quot;;">parent::node()</span></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;; font-weight: bold;"><br/></span></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;; font-weight: bold;">Has children</span>
            </div>
            <div><br/></div>
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Single match: </span>
            </div>
            <div><span style="font-family: &quot;Courier New&quot;;">//ul</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">[*]</span>
            </div>
            <div><span style="font-family: &quot;Courier New&quot;;">//ul</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">[li]</span><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;"> </span>
            </div>
            <div><br/></div>
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">Match per child:</span>
            </div>
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">//ul</span><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">/li</span><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">/..</span>
            </div>
            <div><br/></div>
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">jQuery Equivalent:</span>
            </div>
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">$('ul &gt; li').parent()</span>
            </div>
            <div><br/></div>
            <div><span
                    style="color: rgb(41, 41, 41); --inversion-type-color:  simple; font-family: &quot;Helvetica Neue&quot;;">Has certain number of children:</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//table[count(tr)=1]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Adjacent sibling (immediately proceeding)</span><span
                    style="font-family: &quot;Courier New&quot;;">: </span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//h1/</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">proceeding-sibling::</span><span
                    style="font-family: &quot;Courier New&quot;;">ul</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">[1]</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 368px; padding: 8px;" colspan="2">
            <div><font style="color: rgb(134, 134, 134); --inversion-type-color: simple;">Same as Left/Top
                anchor match, reversed</font></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Any relative match</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div>Closest ancestor (or self) matching selector:</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//ul/</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">ancestor-or-self::li</span>
            </div>
            <div><br/></div>
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">jQuery Equivalent:</span>
            </div>
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">$('li').closest('section’)</span>
            </div>
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;"><br/></span>
            </div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">All proceeding siblings</span><span
                    style="font-family: &quot;Courier New&quot;;">: </span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//h1/</span><span
                    style="--inversion-type-color: simple; color: rgb(255, 38, 0); font-family: &quot;Courier New&quot;;">proceeding-sibling::</span><span
                    style="font-family: &quot;Courier New&quot;;">ul</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><font face="Helvetica Neue">Combines position and hierarchy:</font></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div>Everything in the document before the opening tag of the current node</div>
            <div><br/></div>
            <div><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">/preceding</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span
                    style="font-family: &quot;Helvetica Neue&quot;;">Matches tag types with ‘h’ before ‘1’</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//[</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">contains(substring-before(</span><span
                    style="font-family: &quot;Courier New&quot;;">name(), “1”</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span><span
                    style="font-family: &quot;Courier New&quot;;">, “h”</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 199px; padding: 8px;">
            <div><font style="font-family: &quot;Helvetica Neue&quot;;">Matches attributes with ids with ‘foo’
                before ‘bar’:</font></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div><span style="font-family: Courier New;">//[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">contains(substring-before(</font>@id, “bar”), “foo”<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)]</font></span></div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 812px; padding: 8px;"
            colspan="5"><font style="color: rgb(0, 0, 0); --inversion-type-color: simple;">Projections</font>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Size or count</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 167px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Element with single child:</span>
            </div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;"><br/></span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//table[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">count(tr)</font></span>
            </div>
            <div><span style="font-family: &quot;Courier New&quot;;"><font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">=1</font>]</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">//table[</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">count(tr)</span>
            </div>
            <div><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">&gt; 1</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span></div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 174px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><font style="font-family: &quot;Helvetica Neue&quot;;">Match all tags with a type that is 2
                characters long:</font></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div><span style="font-family: &quot;Courier New&quot;;">/</span><span
                    style="font-family: &quot;Courier New&quot;;">/[</span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">string-length(</span><span
                    style="font-family: &quot;Courier New&quot;; --inversion-type-color:  simple;"><font
                    style="color: rgb(41, 41, 41); --inversion-type-color: simple;">name()</font></span><span
                    style="font-family: &quot;Courier New&quot;; color: rgb(255, 38, 0); --inversion-type-color: simple;">) = 2)</span><span
                    style="font-family: &quot;Courier New&quot;;">]</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 199px; padding: 8px;">
            <div><span style="font-family: Helvetica Neue;">Match all tags with an id that is 2 characters long:</span>
            </div>
            <div><span style="font-family: Helvetica Neue;"><br/></span></div>
            <div><font style="font-family: &quot;Courier New&quot;;">//[<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">string-length(</font>@id<font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">) = 2)</font>]</font>
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h2>Other Projections</h2>

<p>Some other projection functions that may not be covered above:</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 809px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 809px; padding: 8px;">
            Accessors
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(187, 187, 187); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">lang(str)</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(187, 187, 187); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">namespace-uri()</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">concat(x,y)</span></div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 809px; padding: 8px;">
            <div><font style="color: rgb(0, 0, 0); --inversion-type-color: simple;">String projections</font>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">substring(str, start, len)</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">substring-before("01/02", "/")</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">substring-after("01/02", "/")</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">translate()</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">normalize-space()</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">string-length()</span></div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 809px; padding: 8px;">
            <div><font style="color: rgb(0, 0, 0); --inversion-type-color: simple;">Type conversion</font>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">string()</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">number()</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 809px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">boolean()</span></div>
        </td>
    </tr>
    </tbody>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Selectors Cheatsheet]]></title>
    <link href="http://greena13.github.io/blog/2020/12/15/css-selectors-cheatsheet/"/>
    <updated>2020-12-15T09:30:03+00:00</updated>
    <id>http://greena13.github.io/blog/2020/12/15/css-selectors-cheatsheet</id>
    <content type="html"><![CDATA[<p>A CSS selectors cheatsheet using the concepts laid out in <a href="http://greena13.github.io/blog/2020/12/12/thinking-in-dimensions-a-unified-approach-to-filter-grammars">Thinking in Dimensions: A Unified Approach to Filter grammars</a>.</p>

<!--more-->


<h2>Logic operators</h2>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 74px;"/>
        <col style="width: 725px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 74px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">AND</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 725px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">selector1selector2</span></div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div># has classA AND classB</div>
                <div>.classA.classB</div>
                <div><br/></div>
                <div># Has classA and attributeA</div>
                <div>.classA[attributeA]</div>
                <div><br/></div>
                <div># Has attributeA and attributeB</div>
                <div>*[attributeA][attributeB]</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 74px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">OR</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 725px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">selector1, selector2</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 74px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">NOT</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 725px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">:not(selector)</span></div>
        </td>
    </tr>
    </tbody>
</table>


<h2>Filter operators</h2>

<p>Note: See below for state-based pseudo-selectors.</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 103px;"/>
        <col style="width: 168px;"/>
        <col style="width: 173px;"/>
        <col style="width: 169px;"/>
        <col style="width: 200px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Semantic dimension</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 168px; padding: 8px;">
            <div>Element Hierarchy and content</div>
            <div>(Permutation)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 173px; padding: 8px;">
            <div>Element Position</div>
            <div>(Permutation)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div>Element type</div>
            <div>(Nominal)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 200px; padding: 8px;">
            <div>Attribute</div>
            <div>(Permutation)</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">class</span> and <span
                    style="font-family: &quot;Courier New&quot;;">id</span> attributes are Fields separated by
                spaces
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 813px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Non anchored match</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Any / Presence</div>
        </td>
        <td colspan="2" rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 341px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(134, 134, 134);">Not really applicable (</span><span
                    style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Covered by the </span><span
                    style="color: rgb(134, 134, 134); --inversion-type-color:  simple; font-family: &quot;Courier New&quot;;">*</span><span
                    style="color: rgb(134, 134, 134); --inversion-type-color:  simple;"> wildcard)</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">*</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Includes </span><span
                    style="font-family: &quot;Courier New&quot;;">head, body</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">, etc</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 200px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">[attribute]</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Exact match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">element</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 200px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">[attribute='value’]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Complement:</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Attribute not equal:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">[name!=”value”]</span></div>
            <div><br/></div>
            <div><span
                    style="font-family: &quot;Helvetica Neue&quot;; font-weight: bold;">Field equality:</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">All elements with one of its classes exactly equal:</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">.class</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">First element with one of its ids exactly equal (</span>Document
                with multiple elements with the same id is invalid)<span
                        style="font-family: &quot;Helvetica Neue&quot;;">:</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">#id</span></div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="vertical-align: bottom; background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 813px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Top / Left anchored match</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Absolute match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 168px; padding: 8px;">
            <div>Document’s root element:</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:root</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Contents</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:first-line</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:first-letter</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Before any element that isn’t self-closing:</span>
            </div>
            <div>* content attribute is required, but can be left blank</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:before</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 173px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">:first-child</span></div>
            <div><br/></div>
            <div><span
                    style="font-family: &quot;Helvetica Neue&quot;;">Every two elements, starting at one (p</span>ositive
                numbers: infinite series)
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:nth-child(2n+1)</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;; font-style: italic;">Combination of element type exact match and and absolute relative position</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">The first child of a particular type for a parent: </span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:first-of-type</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:nth-of-type</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 200px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Starting with: </span><span
                    style="font-family: &quot;Courier New&quot;;">[attribute^='value’]</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Contains prefix (equal to a given string or starting with that string followed by a hyphen (-).)</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">[name|=”value”]</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Immediate Relative match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 168px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Child: </span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">.list &gt; li</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 173px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Adjacent sibling (immediately proceeded by)</span><span
                    style="font-family: &quot;Courier New&quot;;">: </span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">h1 + p</span></div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Not applicable (Nominal data)</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 200px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">(Thinking of each character in the substring as being the next immediate match of the one before):</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Contains: </span><span
                    style="font-family: &quot;Courier New&quot;;">[name*=”value”]</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div>Any relative match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 168px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Descendant:</span></div>
            <div><span style="font-family: &quot;Courier New&quot;;">sel1 sel2</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 173px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Any following sibling:</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">h1 ~ p</span></div>
            <div><br/></div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 200px; padding: 8px;">
            <div><span
                    style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Not available</span>
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(204, 204, 204); width: 813px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Bottom / Right anchored match</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Absolute match</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 168px; padding: 8px;">
            <div>Content:</div>
            <div><br/></div>
            <div>After any element that isn’t self-closing</div>
            <div>* content attribute is required, but can be left blank</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:after</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 173px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">:last-child</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:nth-last-child</span></div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;; font-style: italic;">Combination of element type exact match and and relative position</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:last-of-type</span></div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:nth-last-of-type</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 200px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Ends with: </span><span
                    style="font-family: &quot;Courier New&quot;;">[name$=”value”]</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Immediate Relative match</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 168px; padding: 8px;">
            <div>Content:</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:empty</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 173px; padding: 8px;">
            <div><span
                    style="font-family: &quot;Helvetica Neue&quot;;">Negative numbers: finite offset)</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:nth-child(-n+3)</span></div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(134, 134, 134);">Not applicable (Nominal data)</span>
            </div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 200px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(134, 134, 134);">Not really applicable - just the reverse of the left/anchor match</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Any relative match</span>
            </div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 341px; padding: 8px;">
            <div><span
                    style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Not available</span>
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 813px; padding: 8px;">
            <div><span style="color: rgb(0, 0, 0); --inversion-type-color:  simple;">Projections</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 103px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Exclusive   (unique) match</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 168px; padding: 8px;">
            <div><span style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Not really applicable (and/or covered by the position dimension instead)</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 173px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Combines position and count: </span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">All elements of for which they’re the only child of their parent: </span>
            </div>
            <div><span style="font-family: &quot;Courier New&quot;;">:only-child</span></div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 169px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Combines position and type, and then count:</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">All elements for which they’re the only of their type in their parent: </span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">:only-of-type</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 200px; padding: 8px;">
            <div><span
                    style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Not available</span>
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h3>State-based pseudo-selectors</h3>

<p>State-based pseudo-selectors filter on the set of virtual flags (nominal data) that keep track of element&rsquo;s state in the DOM.</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 139px;"/>
        <col style="width: 668px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;"
            colspan="2">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">User/Mouse</span></div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:link</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Unvisited links</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:hover</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Mouse over</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:visited</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Visited links</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:active</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Element is being activated (e.g. mid-click)</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:focus</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Focus via click or keyboard event</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:selection</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Part of an element that is </span><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">selected by the user</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-size: 14px; font-family: &quot;Courier New&quot;;">:target</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Selects the element matching the URI target</span>
            </div>
            <div style="--inversion-type-color: simple;"><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div><span style="color: rgb(41, 41, 41); --inversion-type-color:  simple;"><a
                        href="https://example.com/#foo">https://example.com/#foo</a></span></div>
                <div><br/></div>
                <div><span style="color: rgb(41, 41, 41); --inversion-type-color:  simple;">$("p:target”) # Selects &lt;p id="foo"&gt;</span>
                </div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;"
            colspan="2">
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Form elements</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:default</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">Elements in their default state</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &quot;Courier New&quot;;">:enabled</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Elements that have their boolean </span><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &quot;Courier New&quot;;">disabled</span><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0);"> property strictly equal to false</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:disabled</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">Disabled elements</span>
            </div>
            <ul>
                <li>
                    <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">matches elements that are </span><a
                            href="https://html.spec.whatwg.org/multipage/semantics-other.html#disabled-elements"
                            style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">actually
                        disabled</a><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);"> while </span><span
                            style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">[disabled]</span><span
                            style="--inversion-type-color:  simple; color: rgb(41, 41, 41);"> only checks for the existence of the disabled attribute</span>
                    </div>
                </li>
                <li>
                    <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">should only be used for selecting HTML elements that support the disabled attribute (</span><span
                            style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">&lt;button&gt;, &lt;input&gt;, &lt;optgroup&gt;, &lt;option&gt;, &lt;select&gt;, &lt;textarea&gt;, &lt;menuitem&gt;</span><span
                            style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">, and </span><span
                            style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">&lt;fieldset&gt;</span><span
                            style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">)</span></div>
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:optional</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">Elements with no "required" attribute</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:invalid</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">Invalid elements</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:read-only</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">Elements with “readonly” attribute</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:read-write</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">Elements without “readonly” attribute</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:enabled</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">Elements not in a disabled state</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:in-range</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Helvetica Neue&quot;;">Applies to elements that have range limitations</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-family: &quot;Courier New&quot;;">:checked</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Works for checkboxes, radio buttons, and options of select elements.</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:out-of-range</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;"
            colspan="2">
            <div><span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);">Localisation</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 139px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(41, 41, 41); font-family: &quot;Courier New&quot;;">:lang</span>
            </div>
        </td>
        <td style="background-color: rgb(255, 255, 255); border: 1px solid rgb(219, 219, 219); width: 668px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-size: 14px; font-family: &quot;Helvetica Neue&quot;;">Selects elements with matching </span><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-size: 14px; font-family: &quot;Courier New&quot;;">lang=“*</span><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-size: 14px; font-family: &quot;Helvetica Neue&quot;;">’</span><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0); font-size: 14px; font-family: &quot;Helvetica Neue&quot;;"> attribute</span>
            </div>
        </td>
    </tr>
    </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking in Dimensions: A Unified Approach to Filter Grammars]]></title>
    <link href="http://greena13.github.io/blog/2020/12/12/thinking-in-dimensions-a-unified-approach-to-filter-grammars/"/>
    <updated>2020-12-12T14:48:12+00:00</updated>
    <id>http://greena13.github.io/blog/2020/12/12/thinking-in-dimensions-a-unified-approach-to-filter-grammars</id>
    <content type="html"><![CDATA[<p>Learning filter grammars (such as CSS selectors, regular expressions or SQL) can be slow and error prone. Cheatsheets help with picking up a new grammar, or revising an old one you may be returning to after a period of absence, but because each has different concepts, syntax and operators, it&rsquo;s often difficult to see the similarities. They are so different that it&rsquo;s easy to lose track of the fact that they are all different tools to perform the same job.</p>

<p>This article explains a unified approach to filter grammars that provides a framework to classify, select and apply them appropriately; it also aids to reduce the barrier to identifying and learning new ones when your application calls for it.</p>

<!--more-->


<h2>General terminology: Dimensions and Nodes</h2>

<p>To understand a filter grammar, you must first understand the dimensions or properties of the data structure it is designed for. The term <em>dimension</em> has its limitations (I use it because I find it helpful to think of these properties visually in dimensional space, but you may prefer instead think of them as simply attributes, or members of a tuple).</p>

<p>Filter grammars tend to operate on and return results of the same type, which can be thought of as the <em>nodes</em> of the data structure. It doesn&rsquo;t matter what logical structure the data takes (whether that&rsquo;s a HTML document tree, or a flat list of file lines), it&rsquo;s useful to think of the data being filtering as a series of independent nodes, or points in space you arrive at by matching on each dimension&rsquo;s value.</p>

<h2>Semantic dimensions</h2>

<p>Identifying what <em>semantic</em> dimensions a data structure has is a process of considering its logic structure and meaning, and examining what specialised operators the filter grammar provides to reflect that meaning.</p>

<p>We&rsquo;ll take HTML documents as an convenient example as it is used with common filter grammars like CSS and XPath.</p>

<p>HTML documents have a number of <em>semantic</em> dimensions:</p>

<ul>
<li>An element&rsquo;s <em>hierarchy</em> (it&rsquo;s relationship to its ancestors and descants)</li>
<li>An element&rsquo;s siblings (its grouping with other elements that share a parent element) and often more importantly, it&rsquo;s <em>position</em> within those siblings.</li>
<li>An element&rsquo;s <em>type</em> (the tag type it&rsquo;s given in the document)</li>
<li>An element&rsquo;s <em>attributes</em></li>
<li>An element&rsquo;s <em>text content</em></li>
<li>An element&rsquo;s <em>states</em> (focused, hovered, disabled, etc)</li>
</ul>


<p>A filter grammar won&rsquo;t always provide the ability to filter on all of these dimensions. For example, in CSS you can apply filters on an elements' hierarchy, position, type and attribute, but not really its text content (for that you need XPath or possible jQuery). And XPath does not provide the ability to filter on an element&rsquo;s state, but CSS does.</p>

<h3>Filter grammars are comprised of smaller ones</h3>

<p>Semantic dimensions are typically independent and so filter grammars can be thought of as a collection of <em>smaller</em>, simpler grammars, applied to specific dimensions. Although there are cases in some filter grammars where two or more properties are combined when matched, the dimensions tend to be kept separate. Which of dimension to filter, is usually indicated with some sort of switch. For example, in CSS, the period indicator (<code>.</code>) proceeds matches that should be applied to an element&rsquo;s <code>class</code> attribute, and a hash (<code>#</code>) is used to match on an element&rsquo;s <code>id</code>.</p>

<h2>Data types</h2>

<p>Once you have identified the semantic dimensions of a data structure, you need to determine the data type the filter grammar treats it as:</p>

<ul>
<li>Nominal: Named categories (e.g. enums, booleans). These values have no magnitude (no one value is greater than any other), no intervals (they&rsquo;re discrete categories with no values in between) and no absolute values (each value has meaning only in it being distinct from the other possible values and not some global measure).</li>
<li>Ordinal: Discrete values (e.g. integers, hierarchy, position) that have an explicit ordering amongst values. They have magnitude (values can be ordered from smallest to largest), but no &ldquo;in between&rdquo; values.</li>
<li>Scalar: Continuous values (e.g. floats). They are like ordinals, but have an infinite precision (up to the limitations of the underlying datatype).</li>
</ul>


<p>From these, there are some special cases:</p>

<ul>
<li>Sets and fields: Sets or collections where the order of elements does not matter. This is usually a way of encoding nominal data. (e.g. comma or space separated lists of words)</li>
<li>Permutations: Sets or collections, where the elements are in a specific order (e.g. arrays, characters in a string, hierarchies, file paths and list items). The order itself is ordinal data (i.e. the first position - index 0 - is always lower or before the second position - index 1 - and so on).</li>
</ul>


<p>A dimension&rsquo;s data type determines which operators are possible (and their semantics).</p>

<h3>Nominal data</h3>

<p>The simplest dimensional representation to visualise is the number line. Similarly, the simplest operator is the <em>presence</em> one - which determines whether there is a value at all. After that, we consider the <em>equality</em> operator by placing values on the number line, and evaluating if they occupy the same position. We can then consider their complements - the <em>not present</em> and <em>not equal</em> operators. It is at this point we have effectively explored the full set of basic operators available for nominal data.</p>

<h3>Ordinal data</h3>

<p>Ordinal data (which adds magnitude) allows us to consider values <em>relative</em> to a reference points, often termed the <em>anchor</em>. We can compare two values relative to one another by deeming one the anchor and evaluating if a value is closer or further away to one end of the number line. This is how we get the <em>less than</em> and <em>greater than</em> operators (which we can overlap with the equality operators to get <em>less than or equal to</em> and <em>greater than or equal to</em>). These operators are complements of one another (paying special attention to where you want the equality to fall: e.g. the complement of <em>less than</em> is not <em>greater than</em> but <em>greater than or equal to</em>.)</p>

<p>If you place the anchor at the first or last possible value of a dimension (often termed a <em>global anchor</em>) in order to find its closest neighbor, you achieve the <em>minimum</em> and <em>maximum</em> operators.</p>

<p>If you introduce an additional anchor (which is the same as applying the <em>less than</em> and <em>greater than</em> operators one after another), it&rsquo;s possible to identify if a value is <em>between</em> two others. You can also place limits on the <em>less than</em> and <em>greater than</em> operators, to get the <em>within</em> operator (requiring a value to be within a certain number of places of another).</p>

<h3>Scalar data</h3>

<p>Scalar values - which not only have magnitude, but are continuous and have equal intervals as well - allow  aggregate functions such as averages and percentiles which may yield results between the original values (more on this in a minute).</p>

<h3>Permutation data</h3>

<p>Stepping away from the number line, and instead considering permutations, we get a different set of semantics for the same operators: Anchors are not based on values but position (e.g. at the start of the permutation, or at the end).</p>

<p>With the number line, the position of the values were determined by those values themselves. However, permutations have both the position of the value, and the value itself. For example, in the string &ldquo;Monday&rdquo;, &lsquo;n&rsquo; has position 2 (0 indexed) and value &lsquo;n&rsquo;. Some operators set or anchor the position and attempt to match the value, like <em>begins with</em> or <em>ends with</em>. These are the global anchors. However, some operators require relative offsets or ranges for the position value, like the <em>proceeded by</em> operator; these are the relative anchors. Global anchors match on the position and then value and relative anchors match on value and then position, so neither one dimension is inherently more important than the other.</p>

<h3>Summary of semantic dimension operators</h3>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 96px;"/>
        <col style="width: 137px;"/>
        <col style="width: 118px;"/>
        <col style="width: 129px;"/>
        <col style="width: 154px;"/>
        <col style="width: 181px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 137px; padding: 8px;">
            <div>Nominal</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 118px; padding: 8px;">
            <div>Sets and fields</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 129px; padding: 8px;">
            <div>Ordinal</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 154px; padding: 8px;">
            <div>Scalar</div>
        </td>
        <td style="vertical-align: bottom; border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Permutations</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Magnitude</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 255px; padding: 8px;">
            <div>None</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 129px; padding: 8px;">
            <div>Yes</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 154px; padding: 8px;">
            <div>Yes</div>
        </td>
        <td style="vertical-align: bottom; border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Yes. (Ordinal value of positions)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Discrete</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 255px; padding: 8px;">
            <div>Yes</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 129px; padding: 8px;">
            <div>Yes</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 154px; padding: 8px;">
            <div>No. (Continuous.)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Yes (Each position has discrete index)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Absolute values</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 255px; padding: 8px;">
            <div>No</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 129px; padding: 8px;">
            <div>Yes.</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 154px; padding: 8px;">
            <div>Yes.</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Yes. (First, last)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Examples</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 137px; padding: 8px;">
            <div>Boolean, Categories</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 118px; padding: 8px;">
            <div>Comma or space separated list of words</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 129px; padding: 8px;">
            <div>Integers</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 154px; padding: 8px;">
            <div>Floats</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Strings, Hierarchy, Lists</div>
        </td>
    </tr>
    <tr>
        <td colspan="6"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 815px; padding: 8px;">
            <div>Non anchored match</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Any/presence</div>
        </td>
        <td colspan="5" style="border: 1px solid rgb(204, 204, 204); width: 719px; padding: 8px;">
            <div>Presence (not undefined)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Exact match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 137px; padding: 8px;">
            <div>Equals</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 118px; padding: 8px;">
            <div>Field is equal</div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 464px; padding: 8px;">
            <div>Equals</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Partial match</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 137px; padding: 8px;">
            <div><span
                    style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Not applicable</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 118px; padding: 8px;">
            <div>Set contains element</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 283px; padding: 8px;">
            <div><span
                    style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Not applicable</span>
            </div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Contains (smaller permutation)</div>
        </td>
    </tr>
    <tr>
        <td colspan="6"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 815px; padding: 8px;">
            <div><span style="color: rgb(0, 0, 0); --inversion-type-color:  simple;">Top/Left anchored</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Absolute match</div>
        </td>
        <td rowspan="4"
            style="height: 128px; border: 1px solid rgb(204, 204, 204); width: 255px; padding: 8px;"
            colspan="2">
            <div><span style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Not applicable - no position or magnitude, so anchors have no meaning</span>
            </div>
            <div><br/></div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 283px; padding: 8px;">
            <div>Lowest (equal to lowest value in the set)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>First, Begins with (Matches elements in first positions)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Immediate relative match</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 283px; padding: 8px;">
            <div>Immediately after (value in set immediately after anchor)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Immediately followed by (matches element immediately before anchor)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Any relative match</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 283px; padding: 8px;">
            <div>More than (one of the values after the anchor)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Immediately followed by (matches any element before the anchor)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Scoped relative match</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 283px; padding: 8px;">
            <div>Within (one of the values less than the anchor, within a certain number of places)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Separated by (set or number of possible values)</div>
        </td>
    </tr>
    <tr>
        <td colspan="6"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(204, 204, 204); width: 815px; padding: 8px;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Bottom/Right anchored</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Absolute match</div>
        </td>
        <td rowspan="4"
            style="height: 128px; border: 1px solid rgb(204, 204, 204); width: 255px; padding: 8px;"
            colspan="2">
            <div><span style="color: rgb(134, 134, 134); --inversion-type-color:  simple;">Not applicable - no position or magnitude, so anchors have no meaning</span>
            </div>
            <div><br/></div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 283px; padding: 8px;">
            <div>Highest</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Last, Ends with</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Immediate relative match</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 283px; padding: 8px;">
            <div>Immediately before (value in set immediately before anchor)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Immediately proceeded by</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Any relative match</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 283px; padding: 8px;">
            <div>Less than (one of the values before the anchor)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Proceeded by</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 96px; padding: 8px;">
            <div>Scoped relative match</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 283px; padding: 8px;">
            <div>Within (one of the values more than the anchor, within a certain number of places)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 181px; padding: 8px;">
            <div>Separated by (set or number of possible values)</div>
        </td>
    </tr>
    </tbody>
</table>


<h2>Other dimension types</h2>

<p>We&rsquo;ve discussed <em>semantic dimensions</em> thus far, but there are at least two other types.</p>

<p>The first is revealed by the use of <em>projections</em>. This can also be thought of as projecting values into another dimension (using some function or transform), which has its own applicable operators. Aggregate functions are an example of a projection; they provide operators that do not depend on the values themselves, but consider the value in context with the rest of those in the set. For example, the <em>most common</em> operator, creates <em>count</em> data for each value (grouping those that are the same) and then applies a <em>maximum</em> operator.  Projections often production dimensions that are a different data type than their input values.</p>

<p>Another dimension type is revealed by examining the <em>underlying data type</em> being used to represent a semantic dimension. For example, nominal data or ordinal data values may be represented as strings, which are themselves permutations of characters and the filter grammar may provide access to these operators.</p>

<p>For example, consider the set of the days of the week: &lsquo;Monday&rsquo;, &lsquo;Tuesday&rsquo;, &lsquo;Wednesday&rsquo;, &lsquo;Thursday&rsquo;, &lsquo;Friday&rsquo;, &lsquo;Saturday&rsquo;, &lsquo;Sunday&rsquo;. To match on these as ordinal values, we could query the &ldquo;Days before Wednesday&rdquo;, but we could also query them on the positions of the characters in each string by asking for &ldquo;The values starting with &rsquo;T'&rdquo;.</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 202px;"/>
        <col style="width: 597px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 202px; padding: 8px;">
            <div>Semantic dimension</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 597px; padding: 8px;">
            <div>Inherit in the semantics of the data structure and filter grammar</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 202px; padding: 8px;">
            <div>Data type dimensions</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 597px; padding: 8px;">
            <div>Inherit in the type of data used to represent the values of the semantic dimensions</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 202px; padding: 8px;">
            <div>Aggregate functions and transforms</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 597px; padding: 8px;">
            <div>Achieved by applying functions to values and projecting them into a different dimension,
                which has it own operators
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h2>The relationship between dimensions and operator complexity</h2>

<p>There appears to be roughly a continuum of filter grammars and data structures. At one end are the data structures with many semantic dimensions, with filter grammars that have relatively few projection or data dimension operators. One such example is CSS - the data structure (HTML documents) have many semantic dimensions and CSS selectors are largely defined in terms of these semantic dimensions, with restricted data and projection dimension operators. You cannot for example, find all elements with tags that <em>start with</em> a sequence of characters, or find <em>the most common</em> element.</p>

<p>In contrast, XPath includes a lot less of the semantic dimensions CSS is designed around, and instead treats a HTML document as a generic tree structure. Consequently, it has richer set of data type dimension operators, providing a lot more power (at the cost of increased expression complexity and reduced performance).</p>

<p>At the other end of the continuum are regular expressions, which operate on flat strings (usually single lines in a file) which have few semantic dimensions. Instead there is only the data type&rsquo;s dimensions, which the filter grammar provides very complex operators for (well beyond those we&rsquo;ve discussed so far). If applied to a HTML document, it interprets it only as a line semantic dimension (a permutation of characters which have the two data dimensions of position and character value), requiring a complex sequence of expressions in order to match the same nodes that would be trivial in CSS. However, it&rsquo;s possible to match character sequences that are outside of valid HTML, or which are normalized away such as whitespace.</p>

<p>Utilities like <code>sed</code> and <code>awk</code> (which use regular expressions to match lines) add a few more semantic dimensions by providing the ability to match on line numbers and ranges. <code>awk</code> also separates lines into fields and provides projection dimensions by offering the ability to generate mathematical aggregate calculations like <em>count</em>, <em>average</em> etc.</p>

<h2>Combining expressions</h2>

<p>Putting dimensions aside now, the other component to filter grammars are how expressions are combined.</p>

<p>There are 4 main logic operators:</p>

<ul>
<li>AND: Both expressions must be true</li>
<li>OR: One or both of the expressions must be true</li>
<li>NOT: The expression must be false, for its complement to return true</li>
<li>Exclusive OR (XOR): One or the other of the expressions must be true, but not both</li>
</ul>


<p>Depending on the grammar, these operators may be available outside of expressions, to operate on them as a whole expression, or within expressions to operate on specific dimensions, or both.</p>

<p>For example, in CSS to find <code>div</code>s with the class <code>foo</code> and <code>bar</code>, you apply the operator within the expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">div</span><span class="nc">.foo.bar</span>
</span></code></pre></td></tr></table></div></figure>


<p>But to find divs with a class <code>foo</code> or <code>bar</code>, you must combine separate expressions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">div</span><span class="nc">.foo</span><span class="o">,</span> <span class="nt">div</span><span class="nc">.bar</span>
</span></code></pre></td></tr></table></div></figure>


<p>XPath on the other hand, provides the AND and OR operators both inside and outside an expression:</p>

<p>The following are equivalent AND expressions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span><span class="nt">div</span><span class="o">[</span><span class="k">@class</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span><span class="o">][</span><span class="k">@class</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">//</span><span class="nt">div</span><span class="o">[</span><span class="k">@class</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span> <span class="nt">and</span> <span class="k">@class</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the following are equivalent OR expressions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span><span class="nt">div</span><span class="o">[</span><span class="k">@class</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span><span class="o">]</span> <span class="o">|</span> <span class="o">//</span><span class="nt">div</span><span class="o">[</span><span class="k">@class</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">//</span><span class="nt">div</span><span class="o">[</span><span class="k">@class</span><span class="o">=</span><span class="s2">&quot;foo&quot;</span> <span class="nt">or</span> <span class="k">@class</span><span class="o">=</span><span class="s2">&quot;bar&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Filtering vs Selection</h2>

<p>For some filter grammars, filtering and selection are usually the same operation (the nodes that match the filter are the ones that are selected), with a few operators that are the exception. This is true of CSS: the elements returned are those matched by the filtering operators, with the exception of the pseudo-selectors (those starting with a colon) - these continue to filter without changing the selection target to a child or sibling.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">ul</span> <span class="o">&gt;</span> <span class="nt">li</span><span class="nd">:first-child</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is, however, no way to select an element based on its descendants without changing the selection focus <em>to</em> those descendants. The same is not true of XPath expressions, which always selecting the nodes that match the filter, but also allow filtering nodes based on their ancestors or children without changing the selection target.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="err">#</span> <span class="nt">Selects</span> <span class="nt">descendant</span>
</span><span class='line'><span class="o">//</span><span class="nt">ul</span><span class="o">/</span><span class="nt">li</span><span class="o">[</span><span class="nt">1</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nt">Select</span> <span class="nt">parent</span> <span class="nt">based</span> <span class="nt">on</span> <span class="nt">descendant</span>
</span><span class='line'><span class="o">//</span><span class="nt">ul</span><span class="o">[</span><span class="nt">li</span><span class="o">[</span><span class="nt">position</span><span class="o">()=</span><span class="nt">1</span><span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some grammars require explicitly specifying what you want to select from the nodes that match the filter, like SQL&rsquo;s <code>SELECT</code> operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Select username from users table</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">username</span> <span class="k">FROM</span>  <span class="n">users</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Regular expressions are perhaps the most complicated, with their <em>capturing groups</em> and <em>non-capturing groups</em> like the <em>look ahead</em> and <em>look behind</em> operators.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">#</span> <span class="k">Select</span> <span class="ss">&quot;foo&quot;</span> <span class="n">followed</span> <span class="k">by</span> <span class="ss">&quot;bar&quot;</span> <span class="p">(</span><span class="n">but</span> <span class="n">don</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">include</span> <span class="ss">&quot;bar&quot;</span> <span class="k">in</span> <span class="n">the</span> <span class="k">output</span><span class="p">)</span>
</span><span class='line'><span class="o">/</span><span class="p">(</span><span class="n">foo</span><span class="p">)(</span><span class="o">?=</span><span class="n">bar</span><span class="p">)</span><span class="o">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>awk</code> also provides a <em>hold space</em> that allows for having the target of the selection be different from the target for filtering.</p>

<p>A in-depth discussion of each is outside the scope of this article, but it is worth noting many grammars provide a slightly different solution to the same problem.</p>

<h2>Overview of common filtering grammars</h2>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 126px;"/>
        <col style="width: 111px;"/>
        <col style="width: 182px;"/>
        <col style="width: 184px;"/>
        <col style="width: 208px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="vertical-align: bottom; border: 1px solid rgb(204, 204, 204); width: 111px; padding: 8px;">
            <div>Operate on</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Semantic Dimensions</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Type</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div>Selection</div>
        </td>
    </tr>
    <tr>
        <td rowspan="5"
            style="height: 164px; border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;">
            <div>CSS Selectors</div>
        </td>
        <td rowspan="10"
            style="height: 344px; border: 1px solid rgb(204, 204, 204); width: 111px; padding: 8px;">
            <div>HTML or XML documents</div>
            <div><br/></div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Element hierarchy</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Permutation</div>
        </td>
        <td rowspan="5"
            style="height: 164px; border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div>Pseudo-selectors further filter nodes without changing selection target</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Element position</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Permutation</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Element type</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Nominal</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Attribute values</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>id and class: Space-separated Fields</div>
            <div>Permutation (String)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Element’s state (hovered, focused, etc)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Nominal</div>
        </td>
    </tr>
    <tr>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;">
            <div>XPath</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 366px; padding: 8px;">
            <div>Same as CSS selectors</div>
            <div>- Element’s state</div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div>Use filtering on descendants or ancestors to filter without changing selection target</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>+ Element’s text content</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Permutation (String)</div>
        </td>
    </tr>
    <tr>
        <td rowspan="3"
            style="height: 92px; border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;">
            <div>jQuery Selectors</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 366px; padding: 8px;">
            <div>Same as CSS selector</div>
        </td>
        <td rowspan="3"
            style="height: 92px; border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div>Can use DOM traversal (outside of selection expression)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>+ Some internal state (animation)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Nominal</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>+ Some extra operators for those dimensions</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;">
            <div>Globbing</div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 111px; padding: 8px;">
            <div>File paths</div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Directory hierarchy</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Permutation</div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div>Can use parent operator to select siblings or ancestors of match</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Directory and file names</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Permutation (String)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;">
            <div>Regular Expressions</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 111px; padding: 8px;">
            <div>Strings</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>String content</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Permutation (String)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div>Use capturing groups, look aheads and look behinds</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;">
            <div>grep</div>
        </td>
        <td style="height: 164px; border: 1px solid rgb(204, 204, 204); width: 111px; padding: 8px;"
            rowspan="5">
            <div>File contents</div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>File lines</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Permutation (String)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div>Use arguments to return files or lines</div>
        </td>
    </tr>
    <tr>
        <td style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;"
            rowspan="2">
            <div>sed</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 366px; padding: 8px;">
            <div>Same as <span style="font-family: &quot;Courier New&quot;;">grep</span> </div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div>Use arguments to decide what’s printed</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>+ Line position</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Permutation</div>
        </td>
    </tr>
    <tr>
        <td style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;"
            rowspan="2">
            <div>awk</div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 366px; padding: 8px;">
            <div>Same as <span style="font-family: &quot;Courier New&quot;;">sed</span></div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div>Use print to decide output</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>+ Fields</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Fields</div>
        </td>
    </tr>
    <tr>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 126px; padding: 8px;">
            <div>SQL Filtering &amp; Selection</div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 111px; padding: 8px;">
            <div>Relational databases</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Tables</div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Nominal</div>
        </td>
        <td rowspan="2"
            style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 208px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">SELECT</span> operator</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 182px; padding: 8px;">
            <div>Fields</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Depends on data type</div>
        </td>
    </tr>
    </tbody>
</table>


<h2>Examples</h2>

<ul>
<li><a href="http://greena13.github.io/blog/2020/12/15/css-selectors-cheatsheet">CSS Selectors Cheatsheet</a>.</li>
<li><a href="http://greena13.github.io/blog/2020/12/15/xpath-selectors-cheatsheet">XPath Selectors Cheatsheet</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Best Practices]]></title>
    <link href="http://greena13.github.io/blog/2020/12/05/jquery-best-practices/"/>
    <updated>2020-12-05T08:20:34+00:00</updated>
    <id>http://greena13.github.io/blog/2020/12/05/jquery-best-practices</id>
    <content type="html"><![CDATA[<p>jQuery extends the browser&rsquo;s JavaScript interface, often providing thin wrappers for functions you can perform in plain JavaScript with a similar amount of code.</p>

<!--more-->


<p>When jQuery is wrapping a native feature, it is doing so to provide two benefits:</p>

<ul>
<li>It normalizes differences between browser JavaScript interfaces, adapting them into a single jQuery one</li>
<li>It provides an alternative paradigm for interacting with the DOM (one that is more functional in nature, and less procedural or imperative than the native JavaScript methods)</li>
</ul>


<p>This can be thought of as normalizing the differences across browser <em>types</em> and providing a different way of approaching the problems jQuery solves.</p>

<p>When jQuery is providing its own features or implementations, it is doing so to either:</p>

<ul>
<li>Polyfill or normalize features or concepts that are may not be implemented natively, particularly in older browsers.</li>
<li>To fill in gaps of functionality that do not exist at all in the underlying interface</li>
</ul>


<p>This can be thought of as normalizing between <em>versions</em> of browsers and providing entirely new functionality, unavailable natively in any of them.</p>

<p>Having a solid understanding of when jQuery is wrapping a native feature, and when it is providing its own implementation, is the key to understanding how to write performant jQuery.</p>

<p>The following is not intended as a comprehensive guide, but more a useful overview and grouping of the functionality jQuery can provide. Please consult the official jQuery API docs for more information - particularly on what methods may be available for the version of jQuery you&rsquo;re using.</p>

<h2>jQuery objects</h2>

<p>jQuery object are usually instantiated with CSS selectors (or similar), that match 0 or more DOM elements.</p>

<p>They&rsquo;re an example of the <em>Composite</em> design pattern, whereby a single object may be interacted with (i.e. provide the same interface) as a collection of objects, and vice versa.</p>

<p>Once instantiated, they provide 3 major pieces of functionality:</p>

<ul>
<li>Getters, which allow accessing attribute and property values of <em>the first</em> element matched.</li>
<li>Setters, which allow setting attribute and property values of <em>all</em> the elements matched.</li>
<li>Providing a scope to then perform further filtering or DOM traversal</li>
</ul>


<h2>jQuery object are sets</h2>

<p>Although you often interact with jQuery objects as if they are single DOM elements, it&rsquo;s important to think of them as always representing a set, rather than a single value (even if you know that set contains a single element).</p>

<h3>Operate on the set rather than the elements</h3>

<p>Perform actions on the set, rather than attempting to iterate over the elements individually:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bad</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;li&quot;</span> <span class="p">).</span><span class="nx">slice</span><span class="p">(</span> <span class="mi">2</span> <span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span> <span class="s2">&quot;background-color&quot;</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Good</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;li&quot;</span> <span class="p">).</span><span class="nx">slice</span><span class="p">(</span> <span class="mi">2</span> <span class="p">).</span><span class="nx">css</span><span class="p">(</span> <span class="s2">&quot;background-color&quot;</span><span class="p">,</span> <span class="s2">&quot;red&quot;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Use set operators instead of logic ones</h3>

<p>It&rsquo;s important to understand where applying functions to sets removes the need for explicit logic. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bad</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">$foo</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">$foo</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">$foo</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">undefined</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Good</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Use the union set operator rather than repeated logic</h3>

<p>You can union two sets of elements, (or add an individual element to an existing set) where you want to then work on them as a common set. This often simplifies logic and removes duplication.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$union</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;p&quot;</span> <span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Handle (and use) empty sets</h3>

<p>Because the jQuery objects may match no elements (an empty set), you may need to consider when this happens in your code. Empty sets return <code>undefined</code> for getters, and perform a no-operation for setters.</p>

<p>Some expressions are simpler by explicitly passing an empty set; You can do so with an empty selector:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Selectors and the DOM</h2>

<h3>Prefer ids</h3>

<p>Where possible, use an id selector to find the first element with that id (it&rsquo;s invalid to have a HTML document with multiple elements with the same id). This delegates to native browser functions which are optimised and the fastest way to locate an element.</p>

<p>jQuery objects are eagerly evaluated, so ever if you don&rsquo;t end up calling any methods on the jQuery object, it still performs the (relative expensive) operation of finding the matching selectors.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$foo</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#foo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$bar</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#bar&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">hideFoo</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$foo</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span> <span class="c1">// $bar isn&#39;t used, but the CSS selector has already been evaluated</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$bar</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span> <span class="c1">// $foo isn&#39;t used, so isn&#39;t found</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Prefer to avoid jQuery filter extensions</h3>

<p>If using an id to find an element is not possible (or you need to match more than one element), stick to plain CSS selectors, if you can. These are much more efficient than the syntactic sugar jQuery provides.</p>

<p>In general, check the docs before using any of the following, to understand if there is a more performant CSS-only alternative:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">:</span><span class="nx">header</span>   <span class="o">:</span><span class="nx">input</span>       <span class="o">:</span><span class="nx">hidden</span>
</span><span class='line'><span class="o">:</span><span class="nx">first</span>    <span class="o">:</span><span class="nx">button</span>      <span class="o">:</span><span class="nx">visible</span>
</span><span class='line'><span class="o">:</span><span class="nx">eq</span><span class="p">()</span>     <span class="o">:</span><span class="nx">password</span>    <span class="o">:</span><span class="nx">animated</span>
</span><span class='line'><span class="o">:</span><span class="nx">lt</span><span class="p">()</span>     <span class="o">:</span><span class="nx">checkbox</span>
</span><span class='line'><span class="o">:</span><span class="nx">gt</span><span class="p">()</span>     <span class="o">:</span><span class="nx">file</span>
</span><span class='line'><span class="o">:</span><span class="nx">even</span>     <span class="o">:</span><span class="nx">image</span>
</span><span class='line'><span class="o">:</span><span class="nx">odd</span>      <span class="o">:</span><span class="nx">radio</span>
</span><span class='line'><span class="o">:</span><span class="nx">last</span>     <span class="o">:</span><span class="nx">reset</span>
</span><span class='line'>          <span class="o">:</span><span class="nx">selected</span>
</span><span class='line'>          <span class="o">:</span><span class="nx">submit</span>
</span><span class='line'>          <span class="o">:</span><span class="nx">contains</span>
</span><span class='line'>          <span class="o">:</span><span class="nx">has</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Use performant CSS selectors</h3>

<p>A full discussion of what CSS selectors are the most performant is outside the scope of this article, but some general heuristics are as follows (each comes at the price of less specificity, which may or may not work with your document - consider your use case before applying):</p>

<p>These are heuristics only; the size of their effect (and even if that effect is net positive or negative) will depend on your document, the version of jQuery, web browser and device you&rsquo;re using. Always measure performance yourself and avoid premature optimisation.</p>

<p>It may be helpful when reading the following to know that CSS selectors are applied right-to-left (i.e. starting with leaf nodes and then walking the DOM back up to the root).</p>

<p>Filtering based on hierarchy is expensive (particularly when it&rsquo;s not an immediate child match). Try to filter only on tag, class and attribute type where possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bad</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo .bar .baz&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Better</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo &gt; .bar &gt; .baz&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Best</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.bar &gt; .baz&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Or, if it&#39;s possible to change your HTML</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.bar-baz&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Use selectors with as few components as possible (it&rsquo;s less to match):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bad </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input.my-input[type=&quot;text&quot;][name=&quot;my_input&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Good</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=&quot;my_input&quot;]&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use less permissive operators where possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bad </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name*=&quot;y_in&quot;]&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Good</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input[name=&quot;my_input&quot;]&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Perform filtering in CSS where possible</h3>

<p>Perform as much filtering as you can in CSS to avoid instantiating more jQuery objects in memory than you need, and performing the equivalent in the relatively slow JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bad </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">first</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Good</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo:first-of-type&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Search only the part of the document you need</h3>

<p>Where possible, search only the descendants of a known ancestor, rather than the entire document:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bad</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;span&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Good</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;div.foo&quot;</span> <span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;span&quot;</span><span class="p">,</span> <span class="k">this</span> <span class="p">).</span><span class="nx">addClass</span><span class="p">(</span> <span class="s2">&quot;bar&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Or</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;div.foo&quot;</span> <span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;span&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Reuse references to ancestors</h3>

<p>Often you will already have a ancestor element in scope. Use it to restrict further searching:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bad</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;div.foo&quot;</span> <span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;div.foo baz&quot;</span> <span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;zap&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Good</span>
</span><span class='line'><span class="nx">$foo</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;div.foo&quot;</span> <span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$foo</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;baz&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;zap&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Prefer selection over traversal</h3>

<p>You can think of traversal as jumping to a convenient nearby element and then performing a smaller hop to the element you&rsquo;re actually interested in. Selection, however, is jumping straight to the element you&rsquo;re interested in.</p>

<p>jQuery provides methods for both, and they both have their place (traversal is particularly useful for moving between sibling elements, for example), but always carefully consider selection before resorting to traversal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bad</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;baz&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="nx">doSomething</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Good</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo &gt; .baz&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">doSomething</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">element</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Getters and Setters</h2>

<p>jQuery getters and setters are both called on sets. However, the getter returns the matching attribute of only the <em>first</em> element, while setters set the value of the attributes of <em>all</em> matching elements. To get the attributes of all matched elements, you must use <code>each()</code> or <code>map()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Return the name attribute of the first matched element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Return the name attribute of all matched element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set the name of all matching elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p> Setter methods are designed to be chained, and return the jQuery object, allowing several method calls to be chained in somewhat of a <em>Builder</em> design pattern. Getters, on the other hand, return the value of the attribute you&rsquo;re requesting.</p>

<p>If you want to set an attribute based on logic at call-time (or the element&rsquo;s current value), you can pass a function to setter methods to return the desired new value, which is called once for each HTML element in the matching set. The function is passed the element&rsquo;s index in the set as the first argument, and its current value as the second. It is also bound to the current element, so <code>this</code> refers to it.</p>

<p>jQuery treats HTML elements as having four different attribute types, which you must get and set differently (particularly in later versions of jQuery):</p>

<ul>
<li>Properties: Values that affect the dynamic state of a DOM element without changing the serialized HTML attribute. They often record the result of the user interacting with the HTML document, and are oriented around recording some sort of state.</li>
<li>Value: These are a special type of property, that apply to some elements (particularly form elements) which have values associated with them.</li>
<li>Attributes: Can be thought of as everything else, but are more specifically attributes of the element, and are part of the HTML document.</li>
<li>Data attributes: These are a special type of pseudo-attribute that contain arbitrary custom data associated with the element, bootstrapped from the values stored as part of the HTML document as <code>data-*</code> HTML attributes (although they can be added to or modified in jQuery afterwards without being necessary written back to the DOM).</li>
</ul>


<p>Examples of properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">tagName</span>
</span><span class='line'><span class="nx">nodeName</span>
</span><span class='line'><span class="nx">nodeType</span>
</span><span class='line'><span class="nx">ownerDocument</span>
</span><span class='line'>
</span><span class='line'><span class="nx">selectedIndex</span>
</span><span class='line'><span class="nx">defaultChecked</span>
</span><span class='line'><span class="nx">defaultSelected</span>
</span><span class='line'><span class="nx">checked</span>
</span><span class='line'><span class="nx">selected</span>
</span><span class='line'><span class="nx">disabled</span>
</span><span class='line'><span class="nx">onclick</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get and set properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Get property of first matched element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set property on all matching elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Bulk property assignment </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">prop</span><span class="p">({</span> <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="nx">bawp</span><span class="o">:</span> <span class="s1">&#39;woop&#39;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set using function</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">property</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">property</span> <span class="o">+</span> <span class="s1">&#39; again&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove property from all matched elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">removeProp</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>To get and set values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Get current value of first matching element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set value on all matching elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span> <span class="c1">// Must manually trigger change event with $(&#39;.foo&#39;).trigger(&quot;change&quot;)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Bulk set - matching elements a current value that matches one of the elements </span>
</span><span class='line'><span class="c1">// in the array are checked/selected (those that don&#39;t will be unchecked/unselected)               </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">([</span><span class="s1">&#39;Yes&#39;</span><span class="p">,</span> <span class="s1">&#39;OK&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set using function</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">!</span><span class="nx">value</span><span class="p">;</span> <span class="c1">// return undefined if you want to not change value  </span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>To get and set attributes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Get attribute of first matched element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set attribute on all matching elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Bulk attribute assignment </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">({</span> <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="nx">bawp</span><span class="o">:</span> <span class="s1">&#39;woop&#39;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set using function</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">attribute</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">attribute</span> <span class="o">+</span> <span class="s1">&#39; again&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>To get and set data:</p>

<ul>
<li>When getting and setting values as data, it is converted to a string and then back to a JavaScript object, unless that conversion result in rounding errors (floats, for example, are left as strings).</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Return all data values associated with first matching element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Return specific data value associated with first matching element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set data of all matching elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">removeData</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Styling</h2>

<h3>Working with classes</h3>

<p>A common way to apply styling is to manipulate a DOM element&rsquo;s classes (thereby changing the style rules that match the element).</p>

<p>To query whether an element currently has a class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">hasClass</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Modifying an element&rsquo;s classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Add a class to all matching elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add multiple classes</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;bar baz&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">([</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Add class based on current classes</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">currentClasses</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;newClass&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Toggle a class</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;bar baz&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Toggle class based on a a value</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="nx">shouldAddClass</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">toggleClass</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">currentValue</span><span class="p">,</span> <span class="nx">isToggled</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Return class to consider toggling</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Replace all classes</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="p">,</span> <span class="s1">&#39;new classes&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove specific class</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;bar&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;bar baz&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">([</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove all classes</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">removeClass</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">currentvalue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Return class to remove</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Calculated values, dimensions and positions</h2>

<p>Sometimes it&rsquo;s not possible to achieve the styling or functionality you need through CSS alone; this is where jQuery&rsquo;s dimensions methods come in handy. They normalize the differences between quantities reported by browsers into a unified interface.</p>

<h3>CSS values</h3>

<p>To query the CSS values of elements (property names are camelcased):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;borderTopWidth&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Bulk query (returns results as an array)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">([</span><span class="s1">&#39;borderTopWidth&#39;</span><span class="p">,</span> <span class="s1">&#39;borderRightWidth&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Dimensions</h3>

<p>jQuery&rsquo;s dimension methods return unit-less pixel values, which may be not be whole numbers.</p>

<ul>
<li>They return the same values, regardless of the CSS <code>box-sizing</code></li>
<li>The values are incorrect if the user has zoomed in or out</li>
<li>The values may be incorrect if the parent element is hidden (jQuery temporarily shows, measures and then hides the element - which can have a large impact on performance)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Element dimensions only</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">height</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">width</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Dimensions + padding</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">innerHeight</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">innerWidth</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// inner* + border</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">outerWidth</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// outer* + margin</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">outerHeight</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">outerWidth</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the dimensions of the browser viewport</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">height</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the dimensions of the document</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">height</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Positions</h3>

<h4>Offset</h4>

<p>An element&rsquo;s offset is the absolute coordinate of it&rsquo;s <em>border box</em> relative to the <code>document</code>  (as an object with <code>left</code> and <code>top</code> attributes).</p>

<ul>
<li>Does not support hidden elements</li>
<li>Does not include the margin of the <code>html</code> tag, if appropriate</li>
<li>Values are incorrect if the page is zoomed in or out</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Get offset of first matching element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">offset</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set offset of all matching elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">offset</span><span class="p">({</span> <span class="nx">top</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">left</span><span class="o">:</span> <span class="mi">30</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">offset</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">currentCoordinates</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// return new coordinates</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Relative positions</h4>

<p>To get the position of an element&rsquo;s <em>padding box</em> to its parent:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">position</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the closest ancestor that is positioned (relative, absolute or fixed):</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">offsetParent</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scroll position</h4>

<p>An element&rsquo;s scroll position is the number of pixels hidden from view, above the scrollable area.</p>

<ul>
<li>If the element is not scrolled, the value is 0</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Get the scroll position of the first matching element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">scrollLeft</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set the scroll position of all matching element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">scrollLeft</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DOM Mutation</h2>

<p>JQuery provides the ability to not only filter and locate elements in the DOM, but also to mutate it.</p>

<h3>Parsing HTML strings into HTML elements</h3>

<p>Parse a HTML string into an array of DOM nodes:</p>

<ul>
<li>Doesn&rsquo;t remove any leading or trailing whitespace (use <code>$.trim()</code> first, for that)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">HTMLString</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Use for an iframe:</p>

<ul>
<li>Default for before jQuery 3.0: <code>context</code> is the current <code>document</code> (or if you pass <code>undefined</code> or <code>null</code>);</li>
<li>Default for jQuery 3.0: A new <code>document</code> is used. (<code>scripts</code> now don&rsquo;t automatically run on the current document and you have the chance to iterate over the HTML and remove anything harmful before it’s added into the current <code>document</code>.)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">HTMLString</span><span class="p">,</span> <span class="nx">context</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Parse and keep the <code>script</code> tags:</p>

<ul>
<li>Must explicitly opt in</li>
<li>Not true of most other methods in jQuery - they’ll keep <code>script</code> tags in and likely execute them</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">HTMLString</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Replacing Elements</h3>

<h4>Outside replace (replace entirely)</h4>

<p>Use <code>replaceAll</code> when you already have the replacement as a jQuery object, and <code>replaceWith</code> when you already have the target to be replaced, as a jQuery object:</p>

<ul>
<li>When <code>replaceWith</code> is passed a jQuery object that matches a single element, it has the effect of moving that element from its current position in the DOM.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">).</span><span class="nx">replaceAll</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">replaceWith</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">replaceWith</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">oldHTML</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Inside replace (replace contents only)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Replace contents with HTML (prefer text where you can, for security)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;Foo&lt;/p&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Replace contents with text (will escape HTML)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Foo&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Removing elements</h3>

<h4>Removing an element&rsquo;s parent</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Remove parents of all matched elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">unwrap</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove parents of all matched elements, if that parent matches a selector</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">unwrap</span><span class="p">(</span><span class="s1">&#39;.bar&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>Outside remove (remove entirely)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Remove all matched elements from the DOM, but keep data and event handlers</span>
</span><span class='line'><span class="c1">// Useful for re-attaching in the future</span>
</span><span class='line'><span class="nx">$detached</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">detach</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove all matched elements, including associated data and event handlers</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>Inside remove (remove contents)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Remove all contents and children (including associated data and event handlers) from all matched elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Appending elements</h3>

<h4>Outside append (append siblings)</h4>

<p>Use <code>insertAfter</code> when you already have the HTML to append as a jQuery object, and <code>after</code> when you already have the target to append to, as a jQuery object:</p>

<ul>
<li>When <code>after</code> is passed a jQuery object that matches a single element, it has the effect of moving that element from its current position in the DOM.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">).</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">after</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">oldHTML</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Inside append (append children)</h4>

<p>Use <code>appendTo</code> when you already have the HTML to append as a jQuery object, and <code>append</code> when you already have the target to append to, as a jQuery object:</p>

<ul>
<li>When <code>append</code> is passed a jQuery object that matches a single element, it has the effect of moving that element from its current position in the DOM.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">oldHTML</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Prepending elements</h3>

<h4>Outside prepend (prepend siblings)</h4>

<p>Use <code>insertBefore</code> when you already have the HTML to prepend as a jQuery object, and <code>before</code> when you already have the target to prepend to, as a jQuery object:</p>

<ul>
<li>When <code>before</code> is passed a jQuery object that matches a single element, it has the effect of moving that element from its current position in the DOM.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">).</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">before</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">before</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">oldHTML</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Inside prepend (prepend children)</h4>

<p>Use <code>prependTo</code> when you already have the HTML to prepend as a jQuery object, and <code>prepend</code> when you already have the target to prepend to, as a jQuery object:</p>

<ul>
<li>When <code>prepend</code> is passed a jQuery object that matches a single element, it has the effect of moving that element from its current position in the DOM.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">).</span><span class="nx">prependTo</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">oldHTML</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s1">&#39;&lt;div class=&quot;foo&quot; /&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Wrapping elements</h3>

<h4>Outside wrap (Adding parent)</h4>

<p>To wrap matching elements in a selector, HTML string, element or jQuery Object (first matching element is used):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Wrap each matching elements in HTML</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;bar&quot;&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">wrap</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;&lt;div class=&#39;&quot;</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot;&#39;&gt;&lt;/div&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Wrap all matching elements with the SAME parent</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;li.foo&#39;</span><span class="p">).</span><span class="nx">wrapAll</span><span class="p">(</span><span class="s1">&#39;&lt;ul&gt;&lt;/ul&gt;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>Inside wrap (Adding children to wrap all current children)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Wrap the contents of each matching elements in HTML</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">wrapInner</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;bar&quot;&gt;&lt;/div&gt;&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Animation</h2>

<p>If you need to make animated changes, (which can&rsquo;t be achieved with CSS or manipulating the DOM), jQuery provides a series of functions, each with the same signature:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">methodName</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">methodName</span><span class="p">(</span><span class="nx">duration</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">methodName</span><span class="p">(</span><span class="nx">duration</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">methodName</span><span class="p">(</span><span class="nx">duration</span><span class="p">,</span> <span class="nx">easing</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">methodName</span><span class="p">(</span><span class="nx">duration</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">methodName</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>These functions work by animating <code>width</code>, <code>height</code> or <code>opacity</code> (sometimes all 3) over a duration period, and then setting the <code>display</code> value to <code>none</code> (when hiding), or to restore it its previous value (when showing).</p>

<p>To animate all 3 properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Hide and show immediately</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">toggle</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Hide and show over a duration in ms</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">hide</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">show</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">toggle</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To animate the <code>opacity</code> property (causing the elements to appear to fade in and out):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Does not unhide the element; can specify final opacity (Default: 100)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">fadeIn</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Unhides a hidden element and fades in or out (always to 100% opacity)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">fadeTo</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">fadeToggle</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>To animate the <code>height</code> property (causing the content below to appear to slide up):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">slideUp</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">slideDown</span><span class="p">();</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">slideToggle</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>These methods are actually convenience wrappers around a much more powerful animation function that allows you to animate any numeric style property:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">opacity</span><span class="o">:</span> <span class="mf">0.25</span><span class="p">,</span>
</span><span class='line'><span class="p">},</span> <span class="mi">5000</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The full list of animation options are detailed <a href="https://api.jquery.com/animate/">here</a>.</p>

<h2>Events and user interaction</h2>

<h3>The event object</h3>

<p>To understand how jQuery handles events, it&rsquo;s important to have a familiarity with the jQuery event object. It&rsquo;s a superset (or extension) of those provided by browsers natively, with differences in behaviour normalized away. The native browser event is always available on the jQuery one as <code>event.originalEvent</code>.</p>

<p>It has the following properties (values are populated, depending on the type of event being triggered):</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 284px;"/>
        <col style="width: 531px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td colspan="2"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 815px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Elements</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">target</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>DOM element that initiated the event.</div>
            <ul>
                <li>
                    useful to compare <span
                            style="font-family: &quot;Courier New&quot;;">event.target</span> to this in order
                        to determine if the event is being handled due to event bubbling
                </li>
            </ul>
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">currentTarget</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Current DOM element within the event bubbling phase.</span>
            </div>
            <ul>
                <li>
                    <span
                            style="font-family: &quot;Helvetica Neue&quot;;">Typically equal to </span><span
                            style="font-family: &quot;Courier New&quot;;">this</span><span
                            style="font-family: &quot;Helvetica Neue&quot;;"> in handler function</span>
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">delegateTarget</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Element where the currently-called jQuery event handler was attached</div>
            <ul>
                <li>
                    used, for example, to identify and remove event handlers at the delegation point.
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$( ".box" ).on( "click", "button", function( event ) {</div>
                <div>  $( event<span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.delegateTarget</span>
                    ).css( "background-color", "red" );
                </div>
                <div>});</div>
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="2"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 815px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Propagation</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">isDefaultPrevented()</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Whether <span style="font-family: &quot;Courier New&quot;;">event.preventDefault()</span> was
                ever called on this event object.
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">isImmediatePropagationStopped()</span>
            </div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Whether <span
                    style="font-family: &quot;Courier New&quot;;">event.stopImmediatePropagation()</span> was
                ever called on this event object.
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">isPropagationStopped()</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Whether <span style="font-family: &quot;Courier New&quot;;">event.stopPropagation()</span>
                was ever called on this event object.
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="2"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 815px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Keyboard</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">metaKey</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Whether the META key was pressed when the event fired.</div>
            <ul>
                <li>
                    Mac: Command Key, Windows: Windows key
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">which</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>For key or mouse events, this property indicates the specific key or button that was
                pressed.
            </div>
            <ul>
                <li>
                    normalizes <span style="font-family: &quot;Courier New&quot;;">event.keyCode</span>
                        and <span style="font-family: &quot;Courier New&quot;;">event.charCode</span>.
                </li>
                <li>
                    normalizes button presses (<span style="font-family: &quot;Courier New&quot;;">mousedown</span>
                        and <span style="font-family: &quot;Courier New&quot;;">mouseup </span><span
                                style="font-family: &quot;Helvetica Neue&quot;;">events</span>), reporting 1
                        for left button, 2 for middle, and 3 for right. Use <span
                                style="font-family: &quot;Courier New&quot;;">event.which</span> instead of
                        <span style="font-family: &quot;Courier New&quot;;">event.button</span>.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td colspan="2"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 815px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Mouse</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">pageX</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>mouse position relative to the left edge of the document.</div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">pageY</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>mouse position relative to the top edge of the document.</div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">relatedTarget</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Other DOM element involved in the event, if any.</div>
            <ul>
                <li>
                    For <span style="font-family: &quot;Courier New&quot;;">mouseout</span>, indicates
                        the element being entered; for <span style="font-family: &quot;Courier New&quot;;">mouseover</span>,
                        indicates the element being exited.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td colspan="2"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 815px; padding: 8px;">
            <div>General</div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">timeStamp</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Time in milliseconds</div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">type</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Type of event</div>
        </td>
    </tr>
    <tr>
        <td colspan="2"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 815px; padding: 8px;">
            <div><span style="--inversion-type-color:  simple; color: rgb(0, 0, 0);">Custom &amp; Message pasing</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">data</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Optional object of data passed to an event method when the current executing handler is
                bound.
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">result</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Last value returned by an event handler that was triggered by this event, unless the value
                was undefined.
            </div>
            <ul>
                <li>
                    useful for getting previous return values of custom events.
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$( "button" ).click(function( event ) {</div>
                <div>  return "hey";</div>
                <div>});</div>
                <div>$( "button" ).click(function( event ) {</div>
                <div>  $( "p" ).html( event<span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.result</span> );
                </div>
                <div>});</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 284px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">namespace</span></div>
        </td>
        <td style="width: 531px; padding: 8px; border: 1px solid;">
            <div>Namespace specified when the event was triggered.</div>
        </td>
    </tr>
    </tbody>
</table>


<p></p>

<h3>Browser events</h3>

<h4>Document ready</h4>

<p>To attach behaviour as soon as the DOM becomes safe to manipulate:</p>

<ul>
<li>Good time to perform tasks needed before the user views or interacts with the page, such as adding event handlers and initializing plugins</li>
<li>Most browsers provide the equivalent <code>DOMContentLoaded</code> event, however if you bind handlers to this event after it&rsquo;s already been triggered, the handlers are never invoked. jQuery&rsquo;s method will call any handlers bound after the event, immediately, so you don&rsquo;t have to worry about your setup code being skipped.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>To wait for all assets (including images) on the page to load:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Do something</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Window resizing</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="nb">window</span> <span class="p">).</span><span class="nx">resize</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#log&quot;</span> <span class="p">).</span><span class="nx">append</span><span class="p">(</span> <span class="s2">&quot;&lt;div&gt;Handler for .resize() called.&lt;/div&gt;&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Detach</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span> <span class="s2">&quot;resize&quot;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Manually trigger event</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="nb">window</span> <span class="p">).</span><span class="nx">resize</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Window and elements scroll</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#target&quot;</span> <span class="p">).</span><span class="nx">scroll</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#log&quot;</span> <span class="p">).</span><span class="nx">append</span><span class="p">(</span> <span class="s2">&quot;&lt;div&gt;Handler for .scroll() called.&lt;/div&gt;&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Detach</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s2">&quot;scroll&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Manually trigger event</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#target&quot;</span> <span class="p">).</span><span class="nx">scroll</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Binding event handlers</h3>

<p>In order to bind events to elements, they must exist in the DOM at the time. This is why you should always wait for the document to be ready before attempting to bind handlers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>You also need to bind you event handlers to elements <em>above</em> any content that may be modified after the initial document is ready (this includes DOM mutations you perform yourself, or content you may load via AJAX), and use event delegation to call the correct handler.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// A table that may have its rows modified after the DOM has loaded</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#dataTable tbody&quot;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;tr&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>In generally, event handlers (particularly delegated ones) should be bound to as small and as few a parts of the document as possible - particularly for events that are triggered many times a second like <code>scroll</code> and <code>mousemove</code>. You want to avoid listening to events for other parts of the document that you don&rsquo;t end up handling.</p>

<h3>Event bubbling and event delegation</h3>

<p>Browser events bubble, or propagate, from the deepest, innermost element in the document where they occur (the event target), up to the root <code>document</code>. jQuery uses this fact (and actually simulates it in some cases) to provide event delegation: whereby you can bind an event handler for an element to its ancestor, by providing a selector to match events that originate from the event target.</p>

<p>Using event delegation makes it easier to bind event handlers to elements that may change after the DOM has loaded (see above); it also makes for more performant code in circumstances where binding an event handler to a single ancestor saves you having to do so for many individual elements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Bind to a (single) table body, for a table that may have 1000s of rows</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#dataTable tbody&quot;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;tr&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 184px;"/>
        <col style="width: 107px;"/>
        <col style="width: 107px;"/>
        <col style="width: 192px;"/>
        <col style="width: 224px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="height: 56px; vertical-align: bottom; border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;"
            rowspan="2">
            <div>Binding Type</div>
        </td>
        <td style="height: 56px; vertical-align: bottom; border: 1px solid rgb(204, 204, 204); width: 107px; padding: 8px;"
            rowspan="2">
            <div><br/></div>
            <div>Descendant Selector used</div>
        </td>
        <td style="height: 56px; vertical-align: bottom; border: 1px solid rgb(204, 204, 204); width: 107px; padding: 8px;"
            rowspan="2">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Value of </span><span
                    style="font-family: &quot;Courier New&quot;;">this</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> is element</span></div>
        </td>
        <td colspan="2" style="border: 1px solid rgb(204, 204, 204); width: 416px; padding: 8px;">
            <div style="text-align: center;">Handler is called when event</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 192px; padding: 8px;">
            <div>Directly occurs on target</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 224px; padding: 8px;">
            <div>Occurs on descendants</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Direct</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 107px; padding: 8px;">
            <div>No</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 107px; padding: 8px;">
            <div>Where the handler was attached</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 192px; padding: 8px;">
            <div>Yes</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 224px; padding: 8px;">
            <div>Yes</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 184px; padding: 8px;">
            <div>Delegated</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 107px; padding: 8px;">
            <div>Yes</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 107px; padding: 8px;">
            <div>Matching selector (not where event occurred)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 192px; padding: 8px;">
            <div>No</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 224px; padding: 8px;">
            <div>Yes</div>
        </td>
    </tr>
    </tbody>
</table>


<h4>Preventing propagation and default behaviour</h4>

<p>Sometimes it&rsquo;s preferable to prevent event propagation (so an ancestor element doesn&rsquo;t try to handle an event a descendant has already handled, for example). This is prevented with <code>.stopPropagation()</code>.</p>

<p>Some elements also have a default behaviour the browser invokes when an event occurs (e.g. a link is followed when clicked on). This can be prevented by calling <code>.preventDefault()</code> on the event object.</p>

<p>Preventing the default behaviour and stopping propagation will not prevent any other jQuery handlers bound to that element from running. Use <code>.spotImmediatePropagation()</code> to prevent those from running.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Returning false from a handler is equivalent to preventing the default and stopping propagation</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#foo&quot;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'>  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Shorthand for function(){ return false; }</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#foo&quot;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Cancel only the default action</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;form&quot;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Only prevent an action from bubbling up</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;form&quot;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">stopPropagation</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Prevent any other handlers that may have been bound to this event and element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;form&quot;</span> <span class="p">).</span><span class="nx">on</span><span class="p">(</span> <span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">spotImmediatePropagation</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Events that don&rsquo;t bubble</h3>

<p><code>focus</code> and <code>blur</code> events are specified by the W3C to not bubble. However, jQuery defines custom cross-browser <code>focusin</code> and <code>focusout</code> events that do bubble. When <code>focus</code> and <code>blur</code> are used to attach <em>delegated</em> event handlers, jQuery maps them internally to <code>focusin</code> and <code>focusout</code>.</p>

<p><code>load</code>, <code>scroll</code>, and <code>error</code> events also do not bubble.</p>

<p>In IE 8 and lower, the <code>paste</code> and <code>reset</code> events do not bubble.</p>

<h3>Manually triggering events</h3>

<p>You can manually simulate the triggering of events, complete with event bubbling.</p>

<ul>
<li>For plain objects and DOM objects other than <code>window</code>, if a triggered event name matches the name of a property on the object, jQuery will attempt to invoke the property as a method (if no event handler calls <code>event.preventDefault()</code>).</li>
<li>If an event name matches the name of a property on the object, prefixed by <code>on</code>, jQuery will attempt to invoke that property as a method.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Trigger event for all matching elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you don&rsquo;t want to trigger any native property with a mtching name, or have event bubbling:</p>

<ul>
<li>Triggers any handlers attached through jQuery and any native methods attached to the element with the same name, prefixed by <code>on</code>.</li>
<li>Events do not bubble up the DOM hierarchy</li>
<li>Returns result of the handler, rather than the jQuery object for further chaining</li>
<li>Won&rsquo;t call <code>eventName()</code> on the element (e.g <code>triggerHandler('submit')</code> won&rsquo;t call <code>.submit()</code>)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Trigger jQuery handlers (only) for the *first* matched element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">triggerHandler</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Removing event handlers</h3>

<p>Automatically unbind a handler after its first invocation:</p>

<ul>
<li>Takes same arguments as <code>on()</code></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Do something the first time an event occurs</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Removing handlers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Remove all handlers (for any event) attached to all matching elements</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove handlers only for a particular event</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove all handlers within a custom namespace</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click.myPlugin&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove delegated handlers</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;tr&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove all delegated handlers, leaving non-delegated ones</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;**&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Remove specific handler function</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">myFunction</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Custom events</h3>

<p>If a handler is bound to a string value that is not the name of a native DOM event, then it is considered a custom event. These are never called by the browser, but may be triggered manually.</p>

<p>Namespaced events allow triggering or unbinding events without affecting the native ones (or other custom ones). If a event type string contains a period, it&rsquo;s a namespaced event (they should contain only letters and digits).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Event type: click; namespaces: myPlugin, simple</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click.myPlugin.simple&#39;</span><span class="p">,</span> <span class="nx">handler</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Can be removed with either (like CSS classes, namespaced events are not hierarchical; </span>
</span><span class='line'><span class="c1">// only one of the namespaces needs to match.) </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click.myPlugin&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">off</span><span class="p">(</span><span class="s1">&#39;click.simple&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Passing custom data to event handlers</h3>

<p>Passing data at bind-time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">bar</span><span class="o">:</span> <span class="s1">&#39;baz&#39;</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Access as event.data.bar;</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Passing at trigger-time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">arg1</span><span class="p">,</span> <span class="nx">arg2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Access arg1 and arg3, etc (Note the array elements are split out into separate arguments)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">trigger</span><span class="p">(</span><span class="s1">&#39;on&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;baz&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Event shorthands</h3>

<p>jQuery provides a number of shorthands for common events. They&rsquo;re equivalent to calling the longer <code>.on(eventName, ...)</code> form, and accept the same arguments (aside from the event name being defined for you).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">mousedown</span><span class="p">(</span><span class="nx">handler</span><span class="p">)</span> <span class="c1">// equivelent of $(&#39;.foo&#39;).on(&#39;mousedown&#39;, handler)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Mouse events</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// When a mouse pointer is over an element, and the button is pressed</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">mousedown</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When a mouse pointer is over an element, and the button is released</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">mouseup</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When a mouse pointer is over an element, and the button is both pressed and released without exiting it</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When a mouse pointer is over an element, and the button is both pressed and released </span>
</span><span class='line'><span class="c1">// (twice) without exiting it (it&#39;s not recommended to bind to both click and doubclick; </span>
</span><span class='line'><span class="c1">// browsers differ in the order they report these events)</span>
</span><span class='line'><span class="c1">// Double-click sensitivity depends on OS, browser and user configuration </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">dbclick</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When a mouse pointer is over an element, and the right button is both pressed and </span>
</span><span class='line'><span class="c1">// released without exiting it. Triggered before the context menu is displayed.</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">contextmenu</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When mouse pointer enters an element (propietary to IE, but jQuery makes it available</span>
</span><span class='line'><span class="c1">// in other browsers)</span>
</span><span class='line'><span class="c1">// Only triggers when pointer enters element it&#39;s bound to - not its descendants</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">mouseenter</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Like mouseenter, but also gets triggered when mouse enters descendants of the </span>
</span><span class='line'><span class="c1">// element and bubbles up. i.e. Event can be triggered when re-entering a child </span>
</span><span class='line'><span class="c1">// without having re-entered the target element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">mouseover</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When mouse moves within an element</span>
</span><span class='line'><span class="c1">// jQuery normalizes the pageX and pageY properties on the event object between browsers</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">mousemove</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Complement of mouseenter; when the mouse leaves an element (notes on mouseleave apply </span>
</span><span class='line'><span class="c1">// here)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">mouseleave</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Complement of mouseover; when the mouse leaves an element (notes on mousover apply </span>
</span><span class='line'><span class="c1">// here)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">mouseout</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When a mouse enters or leaves an element</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">hover</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="nx">selector</span> <span class="p">).</span><span class="nx">hover</span><span class="p">(</span> <span class="nx">handlerIn</span><span class="p">,</span> <span class="nx">handlerOut</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mouse event objects have the following values for <code>which</code>:</p>

<ul>
<li><code>1</code> For left button</li>
<li><code>2</code> For right button</li>
<li><code>3</code> For middle button</li>
</ul>


<h4>Keyboard events</h4>

<p>Keyboard events are sent to the element that is currently in focus (focusable elements vary between browsers).</p>

<p>Global keyboard events can be captured by attaching to <code>document</code>.</p>

<p>In order to determine which key was the subject of an event, jQuery normalizes this information into the <code>which</code> event property, which contains a key code. For keydown and keyup events, its value does not change for uppercase letters. For the keypress event, it&rsquo;s value is different for uppercase letters. E.g. a lowercase &ldquo;a&rdquo; will be reported as <code>65</code> by keydown and keyup, but as <code>97</code> by keypress. An uppercase &ldquo;A&rdquo; is reported as <code>65</code> by all events.</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 131px;"/>
        <col style="width: 134px;"/>
        <col style="width: 78px;"/>
        <col style="width: 78px;"/>
        <col style="width: 140px;"/>
        <col style="width: 163px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 134px; padding: 8px;">
            <div>When</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 156px; padding: 8px;" colspan="2">
            <div>Triggered by modifier &amp; non-printing keys</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 140px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">.which</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> code indicates</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 163px; padding: 8px;">
            <div>Covered by specification</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div>Keydown</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 134px; padding: 8px;">
            <div>User presses key (every time OS repeats key)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 156px; padding: 8px;" colspan="2">
            <div>Yes</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 140px; padding: 8px;">
            <div>key pressed</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 163px; padding: 8px;">
            <div>Yes</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div>Keypress</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 134px; padding: 8px;">
            <div>Browser registers keyboard input</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 156px; padding: 8px;" colspan="2">
            <div>No</div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 140px; padding: 8px;">
            <div>Character entered</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 163px; padding: 8px;">
            <div>No</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div>Keyup</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 134px; padding: 8px;">
            <div>User releases key (every time OS repeats key)</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 156px; padding: 8px;" colspan="2">
            <div>Yes</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 140px; padding: 8px;">
            <div>key pressed</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 163px; padding: 8px;">
            <div>Yes</div>
        </td>
    </tr>
    </tbody>
</table>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">keydown</span><span class="p">()</span> <span class="c1">// shortcut for .on(&#39;keydown&#39;, ...);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">keypress</span><span class="p">()</span> <span class="c1">// shortcut for .on(&#39;keypress&#39;, ...);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">keyup</span><span class="p">()</span> <span class="c1">// shortcut for .on(&#39;keyup&#39;, ...);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Focus events</h4>

<p>Historically browsers limited focusable elements to some form elements, but modern browsers extend this to other elements that have a <code>tabindex</code> property set.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// When any of the matching elements are focused</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">focus</span><span class="p">()</span> <span class="c1">// shorthand for .on(&#39;focus&#39;, ...)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Include when any of an elements descendants are focused </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">focusin</span><span class="p">()</span> <span class="c1">// shorthand for .on(&#39;focusin&#39;, ...)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// When any of the matching elements lose focus</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">blur</span><span class="p">()</span> <span class="c1">// shorthand for .on(&#39;blur&#39;, ...)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Include when any of an elements descendants lose focus </span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">focusout</span><span class="p">()</span> <span class="c1">// shorthand for .on(&#39;focusout&#39;, ...)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Change events</h4>

<p>The change events are limited to <code>input</code>, <code>textarea</code> and <code>select</code> elements. The event is fired immediately when the user makes a selection for select boxes, checkboxes and radio buttons; the event is deffered for other element types until it loses focus.</p>

<p>Changing the value using JavaScript (e.g. using <code>.val()</code>) doesn&rsquo;t fire the event.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">change</span><span class="p">()</span> <span class="c1">// shorthand for .on(&#39;change&#39;, ...)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Selection events</h4>

<p>Selection can occur for <code>input</code> of type <code>text</code> and <code>textarea</code> elements, when the user selects some of the element&rsquo;s input. The method for retrieving the selected text varies between browsers, but there are jQuery plugins that help normalize it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">select</span><span class="p">()</span> <span class="c1">// shorthand for .on(&#39;select&#39;, ...)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Form submission events</h4>

<p>Submit events only occur on <code>form</code> elements and occur when clicking a <code>input</code> or <code>button</code> of type <code>submit</code> or <code>image</code>, or by pressing Enter when certain form elements are focused (although this varies between browsers). The event occurs <em>before</em> the actual submission, so you have a chance to prevent it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.foo&#39;</span><span class="p">).</span><span class="nx">submit</span><span class="p">()</span> <span class="c1">// shorthand for .on(&#39;submit&#39;, ...)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>AJAX</h2>

<h3>Serializing data for requests</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Create URL query string from object (recursive as of jQuery 1.4)</span>
</span><span class='line'><span class="c1">// Not suggested for complex or deeply nested objects</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// With deep serialization disabled</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">param</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s possible serialize the values from a form as a JSON string. Although jQuery can act on selected individual form controls, it&rsquo;s easier so select the <code>form</code> tag itself. jQuery will then use the W3C rules for successful controls to determine which elements to include. Namely:</p>

<ul>
<li>Submit button values are not serialized when the form was not submitted using a button</li>
<li>Form elements must have a <code>name</code> attribute to be included</li>
<li>Checkbox and radio button values are included only if they are checked</li>
<li>Form field data is not serialized</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Serialize into a JSON string</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">serializeArray</span><span class="p">();</span>     <span class="c1">// Preferred</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;:input&#39;</span><span class="p">).</span><span class="nx">serializeArray</span><span class="p">();</span>   <span class="c1">// Alternative if you need or want to select inputs directly </span>
</span></code></pre></td></tr></table></div></figure>


<p>Similarly, for serializing form data as URL-encode strings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Serialize into URL-encoded string:</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;submit&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">event</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span> <span class="k">this</span> <span class="p">).</span><span class="nx">serialize</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>jqXHR and Promise objects</h3>

<p>All AJAX methods return <code>jqXHR</code> objects, which implement the Promise interface:</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 433px;"/>
        <col style="width: 130px;"/>
        <col style="width: 221px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 433px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>(Deprecated) name (removed in jQuery 3.0)</div>
        </td>
        <td style="width: 221px; padding: 8px; border: 1px solid;">
            <div>Equivalent to callback</div>
        </td>
    </tr>
    <tr>
        <td style="width: 433px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">done(function( data, textStatus, jqXHR ) {});</span>
            </div>
        </td>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">success</span></div>
        </td>
        <td style="width: 221px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">success</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 433px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">fail(function( jqXHR, textStatus, errorThrown ) {});</span>
            </div>
        </td>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">error</span></div>
        </td>
        <td style="width: 221px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">error</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 433px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { })</span>
            </div>
        </td>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">complete</span></div>
        </td>
        <td style="width: 221px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">complete</span></div>
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="width: 433px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {});</span>
            </div>
        </td>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 221px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">success</span> and <span
                    style="font-family: &quot;Courier New&quot;;">error</span></div>
        </td>
    </tr>
    </tbody>
</table>


<p>jqXHR objects can be used for setting handlers at the the time the object is instantiated, or at a later point.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Assign handlers immediately after making the request, and remember the jqxhr object for this request</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">jqxhr</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span> <span class="s2">&quot;example.php&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;success&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">done</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;second success&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;error&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;finished&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Perform other work here ...</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set another completion function for the request above</span>
</span><span class='line'><span class="nx">jqxhr</span><span class="p">.</span><span class="nx">always</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span> <span class="s2">&quot;second finished&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AJAX shorthands</h3>

<p>jQuery provides a number of convenience methods that wrap the more generalized <code>ajax</code> method:</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 408px;"/>
        <col style="width: 408px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div>Method</div>
        </td>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div>Equivalent</div>
        </td>
    </tr>
    <tr>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$<span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.get(</span> url,
                    data, success, dataType<span
                            style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span></div>
            </div>
        </td>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$.ajax({</div>
                <div>  url: url,</div>
                <div>  data: data,</div>
                <div>  success: success,</div>
                <div>  dataType: dataType</div>
                <div>});</div>
                <div><br/></div>
                <div>$.get( "ajax/test.html", function( data ) {</div>
                <div>  $( ".result" ).html( data );</div>
                <div>  alert( "Load was performed." );</div>
                <div>});</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$<span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.getJSON(</span>url,
                    data, success<span
                            style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span>;
                </div>
            </div>
        </td>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$.ajax({</div>
                <div>  dataType: "json",</div>
                <div>  url: url,</div>
                <div>  data: data,</div>
                <div>  success: success</div>
                <div>});</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$<span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.getScript(</span>url,
                    success<span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span>;
                </div>
            </div>
        </td>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$.ajax({</div>
                <div>  url: url,</div>
                <div>  dataType: "script",</div>
                <div>  success: success</div>
                <div>});</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$<span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.post( </span>url,
                    data, success, dataType<span
                            style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span></div>
            </div>
        </td>
        <td style="width: 408px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$.ajax({</div>
                <div>  type: "POST",</div>
                <div>  url: url,</div>
                <div>  data: data,</div>
                <div>  success: success,</div>
                <div>  dataType: dataType</div>
                <div>});</div>
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h4>Loading HTML into the DOM</h4>

<p>jQuery also provides a helper for loading HTML documents over the AJAX and mounting their response into the DOM.</p>

<ul>
<li>Ajax request will not be sent if no element is matched by the selector</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Load content and mount its entire response into the DOM</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// WARNING: the content is passed to .html() PRIOR to scripts being removed. This EXECUTES the script </span>
</span><span class='line'><span class="c1">// blocks before they are discarded.</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#result&quot;</span> <span class="p">).</span><span class="nx">load</span><span class="p">(</span> <span class="s2">&quot;ajax/test.html&quot;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Only mount a subset of the response into the DOM (using a selector to determine which subset)</span>
</span><span class='line'><span class="c1">// This form strips out script tags before the DOM is updated (so they&#39;re not executed)</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span> <span class="s2">&quot;#result&quot;</span> <span class="p">).</span><span class="nx">load</span><span class="p">(</span> <span class="s2">&quot;ajax/test.html #container&quot;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>AJAX options</h3>

<p>This table explains the complete set of AJAX options used with the generalised <code>$.ajax()</code> function:</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 128px;"/>
        <col style="width: 125px;"/>
        <col style="width: 125px;"/>
        <col style="width: 299px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>Settings</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div>Default</div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Description</div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;">
            <div><span style="color: rgb(0, 0, 0); --inversion-type-color:  simple;">Request Headers</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">accepts</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div>Depends on <span style="font-family: &quot;Courier New&quot;;">dataType</span></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Sets the <span style="font-family: &quot;Courier New&quot;;">Accept</span> header</div>
            <ul>
                <li>
                    Key/value pairs that map <span
                            style="font-family: &quot;Courier New&quot;;">dataType</span> to MIME type
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">contentType</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">application/x-www-form-urlencoded; charset=UTF-8</span>
            </div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header</div>
            <div><br/></div>
            <div>For cross-domain requests, setting the content type to anything other than <span
                    style="font-family: &quot;Courier New&quot;;">application/x-www-form-urlencoded</span>,
                <span style="font-family: &quot;Courier New&quot;;">multipart/form-data</span>, or <span
                        style="font-family: &quot;Courier New&quot;;">text/plain </span>will trigger the
                browser to send a preflight <span style="font-family: &quot;Courier New&quot;;">OPTIONS</span>
                request to the server
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">mimeType</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>mime type to override the XHR mime type</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">headers</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">X-Requested-With: XMLHttpRequest</span>
                is always added, but default value can be changed
            </div>
            <div><br/></div>
            <div>Values can also then be overridden in <span style="font-family: &quot;Courier New&quot;;">beforeSend</span>
                function
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;">
            <div><span style="color: rgb(0, 0, 0); --inversion-type-color:  simple;">Request Behaviour</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">method</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> and </span><span
                    style="font-family: &quot;Courier New&quot;;">type</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">GET</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;" colspan="3">
            <div>HTTP method to use for the request</div>
            <ul>
                <li>
                    Was called <span style="font-family: &quot;Courier New&quot;;">type</span><span
                            style="font-family: &quot;Helvetica Neue&quot;;"> before jQuery 1.9.0</span> 
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">url</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div>Current page</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;" colspan="3">
            <div>URL to send request to</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">async</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">true</span></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;"> If you need synchronous requests, set this option to </span><span
                    style="font-family: &quot;Courier New&quot;;">false</span></div>
            <ul>
                <li>
                    Synchronous requests may temporarily lock the browser, disabling any actions while
                        the request is active
                </li>
                <li>
                    <span style="font-family: &quot;Helvetica Neue&quot;;">Cross-domain requests and dataType: </span><span
                            style="font-family: &quot;Courier New&quot;;">"jsonp" </span><span
                            style="font-family: &quot;Helvetica Neue&quot;;">requests do not support synchronous operation.</span>
                </li>
                <li>
                    As of jQuery 1.8, the use of <span style="font-family: &quot;Courier New&quot;;">async: false</span>
                        with <span style="font-family: &quot;Courier New&quot;;">jqXHR ($.Deferred)</span> is
                        deprecated; you must use the <span style="font-family: &quot;Courier New&quot;;">success</span>/<span
                                style="font-family: &quot;Courier New&quot;;">error</span>/<span
                                style="font-family: &quot;Courier New&quot;;">complete</span> callback options
                        instead of the corresponding methods of the jqXHR object such as <span
                                style="font-family: &quot;Courier New&quot;;">jqXHR.done()</span>.
                </li>
            </ul>
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">cache</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">true</span></div>
            <div><br/></div>
            <div><span
                    style="font-family: &quot;Courier New&quot;;">false for dataType 'script' and 'jsonp'</span>
            </div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">By default, requests are always issued, but the browser may serve results out of its cache</span>
            </div>
            <div><br/></div>
            <div>Set to <span style="font-family: &quot;Courier New&quot;;">false</span> to force requested
                pages not to be cached by the browser
            </div>
            <ul>
                <li>
                    will only work correctly with HEAD and GET requests
                </li>
                <li>
                    works by appending "<span
                            style="font-family: &quot;Courier New&quot;;">_={timestamp}</span>" to the GET
                        parameters
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">crossDomain</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">false</span> for same-domain requests,
                <span style="font-family: &quot;Courier New&quot;;">true</span> for cross-domain requests
            </div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>If you wish to force a crossDomain request (such as JSONP) on the same domain</div>
            <ul>
                <li>
                    Allows, for example, server-side redirection to another domain
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">isLocal</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div>Depends on protocol</div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Allow the current environment to be recognized as "local," (e.g. the filesystem)</div>
            <ul>
                <li>
                    protocols automaticaly recognized as local: <span
                            style="font-family: &quot;Courier New&quot;;">file</span>, <span
                            style="font-family: &quot;Courier New&quot;;">*-extension</span>, and <span
                            style="font-family: &quot;Courier New&quot;;">widget</span>.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">xhr</span></div>
        </td>
        <td colspan="4" style="border: 1px solid rgb(204, 204, 204); width: 677px; padding: 8px;">
            <div>Callback for creating the <span
                    style="font-family: &quot;Courier New&quot;;">XMLHttpRequest</span> object.
            </div>
            <ul>
                <li>
                     Defaults to the <span
                            style="font-family: &quot;Courier New&quot;;">ActiveXObject</span> when available
                        (IE), the <span style="font-family: &quot;Courier New&quot;;">XMLHttpRequest</span>
                        otherwise.
                </li>
                <li>
                    Override to provide your own implementation for <span
                            style="font-family: &quot;Courier New&quot;;">XMLHttpRequest</span> or
                        enhancements to the factory.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">xhrFields</span></div>
        </td>
        <td colspan="4" style="border: 1px solid rgb(204, 204, 204); width: 677px; padding: 8px;">
            <div>Object of fieldName-fieldValue pairs to set on the native XHR object.</div>
            <ul>
                <li>
                    Bug: In jQuery 1.5, the <span style="font-family: &quot;Courier New&quot;;">withCredentials</span>
                        property was not propagated to the native <span
                                style="font-family: &quot;Courier New&quot;;">XHR</span> and thus CORS
                        requests requiring it would ignore this flag. 
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$.ajax({</div>
                <div>  url: a_cross_domain_url,</div>
                <div>  <span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">xhrFields: {</span>
                </div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">    withCredentials: true</span>
                </div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">  }</span></div>
                <div>});</div>
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;">
            <div><span style="color: rgb(0, 0, 0); --inversion-type-color:  simple;">Authentication</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">username</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Username to be used with <span
                    style="font-family: &quot;Courier New&quot;;">XMLHttpRequest</span> in response to an HTTP
                access authentication request.
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">password</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Password to be used with <span
                    style="font-family: &quot;Courier New&quot;;">XMLHttpRequest</span> in response to an HTTP
                access authentication request.
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;">
            <div><span style="color: rgb(0, 0, 0); --inversion-type-color:  simple;">Script requests</span>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">script</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Object with additional attributes to be used in a "script" or "jsonp" request.</div>
            <ul>
                <li>
                    If this object is provided it will force the use of a script-tag transport
                </li>
                <li>
                    Can be used to set <span style="font-family: &quot;Courier New&quot;;">nonce</span>,
                        <span style="font-family: &quot;Courier New&quot;;">integrity</span>, or <span
                                style="font-family: &quot;Courier New&quot;;">crossorigin</span> attributes to
                        satisfy Content Security Policy requirements.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">scriptCharset</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Sets the charset attribute on the script tag used in the request</div>
            <ul>
                <li>
                    Used when the character set on the local page is not the same as the one on the
                        remote script
                </li>
                <li>
                    <span style="font-family: &quot;Courier New&quot;;">charset</span> attribute can be
                        specified in <span style="font-family: &quot;Courier New&quot;;">scriptAttrs</span>
                        instead
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;">
            <div>Request content (body or query parameters)</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">data</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Data to be sent to the server</div>
            <ul>
                <li>
                    If the HTTP method is one that cannot have an entity body, such as <span
                            style="font-family: &quot;Courier New&quot;;">GET</span>, the data is appended to
                        the URL.
                </li>
            </ul>
            <div><br/></div>
            <div>POST data will always be transmitted to the server using UTF-8 charset, per the W3C
                XMLHTTPRequest standard.
            </div>
            <ul>
                <li>
                    Objects: jQuery generates the data string from the object's key/value pairs using
                        <span style="font-family: &quot;Courier New&quot;;">jQuery.param()</span> unless the
                        <span style="font-family: &quot;Courier New&quot;;">processData</span> option is set
                        to <span style="font-family: &quot;Courier New&quot;;">false</span>
                </li>
                <li>
                    <span style="font-family: &quot;Helvetica Neue&quot;;">Arrays: </span>serializes
                        multiple values with same key based on the value of the traditional setting
                </li>
                <li>
                    String: should already be encoded using the correct encoding for <span
                            style="font-family: &quot;Courier New&quot;;">contentType</span>
                </li>
            </ul>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">In requests with </span><span
                    style="font-family: &quot;Courier New&quot;;">dataType: "json"</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> or </span><span
                    style="font-family: &quot;Courier New&quot;;">dataType: "jsonp"</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">, if the string contains a double question mark (??) anywhere in the URL or a single question mark (?) in the query string, it is replaced with a value generated by jQuery that is unique for each copy of the library on the page (e.g. </span><span
                    style="font-family: &quot;Courier New&quot;;">jQuery21406515378922229067_1479880736745</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">).</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">processData</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">true</span></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>By default, data passed in to the <span
                    style="font-family: &quot;Courier New&quot;;">data</span> option as anything other than a
                string will be processed and transformed into a query string, fitting to the default
                content-type <span style="font-family: &quot;Courier New&quot;;">"application/x-www-form-urlencoded”</span>
            </div>
            <ul>
                <li>
                    <span style="font-family: &quot;Helvetica Neue&quot;;">Set to </span><span
                            style="font-family: &quot;Courier New&quot;;">false</span><span
                            style="font-family: &quot;Helvetica Neue&quot;;"> if you want to send a DOMDocument, or other non-processed data</span>
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">traditional</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">true </span>if you wish to use the
                traditional style of param serialization (see serializaiton section above)
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;">
            <div>Response behaviour</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">contents</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Object of string or regular expression keys that determine how to parse response</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">converters</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>dataType-to-dataType converters:</div>
            <div><br/></div>
            <div>Default:</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>{</div>
                <div>  "* text": window.String, </div>
                <div>  "text html": true, </div>
                <div>  "text json": jQuery.parseJSON, </div>
                <div>  "text xml": jQuery.parseXML</div>
                <div>}</div>
            </div>
            <div><br/></div>
            <div>Use <a href="https://api.jquery.com/jQuery.ajaxTransport/">transports</a> when converters and
                prefilters aren’t flexible enough.
            </div>
        </td>
    </tr>
    <tr>
        <td rowspan="9"
            style="height: 308px; border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">dataType</span></div>
        </td>
        <td rowspan="9"
            style="height: 308px; border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div>Intelligent Guess (<span
                    style="font-family: &quot;Courier New&quot;;">xml, json, script</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">, or </span><span
                    style="font-family: &quot;Courier New&quot;;">htm</span>l)
            </div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Type of data that you're expecting back from the server</div>
            <ul>
                <li>
                     If none is specified, jQuery will try to infer it based on the MIME type of the
                        response
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div>Data type</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div>Preprocessing</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 299px; padding: 8px;">
            <div>Desscription</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">“text"</span></div>
        </td>
        <td style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;"
            rowspan="2">
            <div>None</div>
            <div><br/></div>
            <div>Passed to <span style="font-family: &quot;Courier New&quot;;">success</span> as <span
                    style="font-family: &quot;Courier New&quot;;">jqXHR .</span><span
                    style="font-family: &quot;Courier New&quot;;">responseText </span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">(</span><span
                    style="font-family: &quot;Courier New&quot;;">String</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">)</span></div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 299px; padding: 8px;">
            <div>A plain text string.</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">"html"</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 299px; padding: 8px;">
            <div>Returns HTML as plain text; included <span style="font-family: &quot;Courier New&quot;;">script</span>
                tags are evaluated when inserted in the DOM.
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">"json"</span></div>
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">jQuery.parseJSON</span></div>
            <div><br/></div>
            <div>Passed to <span style="font-family: &quot;Courier New&quot;;">success</span> as <span
                    style="font-family: &quot;Courier New&quot;;">jqXHR .</span><span
                    style="font-family: &quot;Courier New&quot;;">responseJSON </span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">(</span><span
                    style="font-family: &quot;Courier New&quot;;">Object</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">)</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 299px; padding: 8px;">
            <div>Evaluates the response as JSON and returns a JavaScript object.</div>
            <ul>
                <li>
                    Cross-domain "json" requests that have a callback placeholder, e.g. <span
                            style="font-family: &quot;Courier New&quot;;">?callback=?</span>, are performed
                        using JSONP unless the request includes <span
                                style="font-family: &quot;Courier New&quot;;">jsonp: false</span> in its
                        request options.
                </li>
                <li>
                    The JSON data is parsed in a strict manner; any malformed JSON is rejected and a
                        parse error is thrown.
                </li>
                <li>
                    As of jQuery 1.9, an empty response is also rejected; the server should return a
                        response of <span style="font-family: &quot;Courier New&quot;;">null</span> or <span
                                style="font-family: &quot;Courier New&quot;;">{}</span> instead. (See <a
                                href="http://json.org/">json.org</a> for more information on proper JSON
                        formatting.)
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">"script"</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div>Execute the JavaScript that is received from the server</div>
            <div><br/></div>
            <div>Passed to <span style="font-family: &quot;Courier New&quot;;">success</span> as<span
                    style="font-family: &quot;Courier New&quot;;"> </span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">(</span><span
                    style="font-family: &quot;Courier New&quot;;">S</span><span
                    style="font-family: &quot;Courier New&quot;;">tring</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">)</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 299px; padding: 8px;">
            <div>Evaluates the response as JavaScript and returns it as plain text. Disables caching by
                appending a query string parameter,<span style="font-family: &quot;Courier New&quot;;"> _=[TIMESTAMP]</span>,
                to the URL unless the <span style="font-family: &quot;Courier New&quot;;">cache</span> option
                is set to <span style="font-family: &quot;Courier New&quot;;">true</span>.
            </div>
            <ul>
                <li>
                    Note: This will turn POSTs into GETs for remote-domain requests. Prior to jQuery
                        3.5.0, unsuccessful HTTP responses with a script Content-Type were still executed.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">"jsonp</span>"</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div>Automatically append a query string parameter of (by default) <span
                    style="font-family: &quot;Courier New&quot;;">callback=?</span> to the URL
            </div>
            <div><br/></div>
            <div>Server should return valid JavaScript that passes the JSON response into the callback
                function.
            </div>
            <div><br/></div>
            <div>jQuery will execute the returned JavaScript, calling the JSONP callback function</div>
            <div><br/></div>
            <div>Passes JSON object containing response to <span
                    style="font-family: &quot;Courier New&quot;;">success</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 299px; padding: 8px;">
            <div>Loads in a JSON block using JSONP. Adds an extra <span
                    style="font-family: &quot;Courier New&quot;;">"?callback=?" </span>to the end of your URL
                to specify the callback.
            </div>
            <ul>
                <li>
                    Disables caching by appending a query string parameter, <span
                            style="font-family: &quot;Courier New&quot;;">"_=[TIMESTAMP]"</span>, to the URL
                        unless the <span style="font-family: &quot;Courier New&quot;;">cache</span> option is
                        set to <span style="font-family: &quot;Courier New&quot;;">true</span>.
                </li>
            </ul>
            <div><br/></div>
            <div><a href="https://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">More info</a>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">"xml"</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;"> jQuery.parseXML</span></div>
            <div><br/></div>
            <div>Passed to <span style="font-family: &quot;Courier New&quot;;">success</span> as <span
                    style="font-family: &quot;Courier New&quot;;">jqXHR .</span><span
                    style="font-family: &quot;Courier New&quot;;">responseXML </span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">(</span><span
                    style="font-family: &quot;Courier New&quot;;">XMLDocument</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">)</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 299px; padding: 8px;">
            <div>Returns XML document that can be processed via jQuery.</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div>multiple, space-separated values</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 125px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 299px; padding: 8px;">
            <div>As of jQuery 1.5, jQuery can convert a <span style="font-family: &quot;Courier New&quot;;">dataType</span>
                from what it received in the <span
                        style="font-family: &quot;Courier New&quot;;">Content-Type</span> header to what you
                require.
            </div>
            <ul>
                <li>
                    For example, if you want a text response to be treated as XML, use <span
                            style="font-family: &quot;Courier New&quot;;">"text xml"</span> for the <span
                            style="font-family: &quot;Courier New&quot;;">dataType</span>. You can also make a
                        JSONP request, have it received as text, and interpreted by jQuery as XML: "jsonp text
                        xml". Similarly, a shorthand string such as "jsonp xml" will first attempt to convert
                        from jsonp to xml, and, failing that, convert from jsonp to text, and then from text
                        to xml.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">statusCode</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Object of numeric HTTP codes and functions to be called when the response has the
                corresponding code
            </div>
            <ul>
                <li>
                    If the request is successful, the status code functions take the same parameters as
                        the success callback
                </li>
                <li>
                    if it results in an error (including 3xx redirect), they take the same parameters as
                        the error callback.
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$.ajax({</div>
                <div>  statusCode: {</div>
                <div>    404: function() {</div>
                <div>      alert( "page not found" );</div>
                <div>    }</div>
                <div>  }</div>
                <div>});</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">dataFilter</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Function to be used to handle the raw response data</div>
            <ul>
                <li>
                    pre-filtering function to sanitize the response.
                </li>
                <li>
                    Arguments:
                </li>
                <ul>
                    <li>
                        The raw data returned from the server and
                    </li>
                    <li>
                        The 'dataType' parameter.
                    </li>
                </ul>
                <li>
                    should return the sanitized data
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>Function( String data, String type ) =&gt; Anything</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">timeout</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><br/></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Timeout (in milliseconds) for the request</div>
            <ul>
                <li>
                    <span style="font-family: &quot;Courier New&quot;;">0</span> means there will be no
                        timeout
                </li>
                <li>
                    Overrides any global timeout set with <span
                            style="font-family: &quot;Courier New&quot;;">$.ajaxSetup()</span>
                </li>
                <li>
                    Starts at the point the <span
                            style="font-family: &quot;Courier New&quot;;">$.ajax</span> call is made (if
                        several other requests are in progress and the browser has no connections available,
                        it is possible for a request to time out before it can be sent)
                </li>
                <li>
                    n jQuery 1.4.x and below, the XMLHttpRequest object will be in an invalid state if
                        the request times out; accessing any object members may throw an exception.
                </li>
                <li>
                    In Firefox 3.0+ only, script and JSONP requests cannot be cancelled by a timeout; the
                        script will run even if it arrives after the timeout period.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">ifModified</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 128px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">false</span></div>
        </td>
        <td colspan="3" style="border: 1px solid rgb(204, 204, 204); width: 549px; padding: 8px;">
            <div>Successful only if the response has changed since the last request</div>
            <ul>
                <li>
                    Checks <span style="font-family: &quot;Courier New&quot;;">Last-Modified</span>
                        header
                </li>
                <li>
                    As of jQuery 1.4, also checks the 'etag' specified by the server to catch unmodified
                        data.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td colspan="5"
            style="background-color: rgb(234, 234, 234); border: 1px solid rgb(187, 187, 187); width: 807px; padding: 8px;">
            <div><span style="color: rgb(0, 0, 0); --inversion-type-color:  simple;">Callbacks</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(187, 187, 187); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">context</span></div>
        </td>
        <td style="border: 1px solid rgb(187, 187, 187); width: 677px; padding: 8px;" colspan="4">
            <div>Set the value of <span style="font-family: &quot;Courier New&quot;;">this</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> for callbacks</span></div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>$.ajax({</div>
                <div>  url: "test.html",</div>
                <div>  <span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">context: document.body</span>
                </div>
                <div>}).done(function() {</div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">  $( this )</span>.addClass(
                    "done" );
                </div>
                <div>});</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(187, 187, 187); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">global</span></div>
        </td>
        <td style="border: 1px solid rgb(187, 187, 187); width: 677px; padding: 8px;" colspan="4">
            <div>Whether to trigger the global Ajax event handlers for this request (see below)</div>
            <ul>
                <li>
                    useful to, for example, suppress a loading indicator that was implemented with <span
                            style="font-family: &quot;Courier New&quot;;">.ajaxSend()</span> if the requests
                        are frequent and brief.
                </li>
                <li>
                    With cross-domain script and JSONP requests, the global option is automatically set
                        to <span style="font-family: &quot;Courier New&quot;;">false</span>
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(187, 187, 187); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">jsonp </span><span
                    style="font-family: &quot;Helvetica Neue&quot;;">and </span><span
                    style="font-family: &quot;Courier New&quot;;">jsonpCallback</span></div>
        </td>
        <td style="border: 1px solid rgb(187, 187, 187); width: 677px; padding: 8px;" colspan="4">
            <div>Override the callback function name in a JSONP request (string or boolean)</div>
            <ul>
                <li>
                    value will be used instead of '<span style="font-family: &quot;Courier New&quot;;">callback</span>'
                        in the '<span style="font-family: &quot;Courier New&quot;;">callback=?'</span> part of
                        the query string in the url.
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>{ jsonp:’onJSONPLoad’ } // result in 'onJSONPLoad=?' passed to the server</div>
            </div>
            <div><br/></div>
            <div>Specify the callback function name for a JSONP request</div>
            <ul>
                <li>
                    value will be used instead of the random name automatically generated by jQuery
                </li>
                <li>
                     preferable to let jQuery generate a unique name as it'll make it easier to manage
                        the requests and provide callbacks and error handling
                </li>
                <li>
                    may want to specify the callback when you want to enable better browser caching of
                        GET requests
                </li>
                <li>
                    As of jQuery 1.5, you can also use a function for this setting, in which case the
                        value of jsonpCallback is set to the return value of that function
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>{ jsonpCallback:’foo’ }</div>
            </div>
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">beforeSend</span></div>
        </td>
        <td colspan="4" style="border: 1px solid rgb(204, 204, 204); width: 677px; padding: 8px;">
            <div>Can be used to modify the jqXHR object before it is sent</div>
            <ul>
                <li>
                    Use this to set custom headers
                </li>
                <li>
                    Returning <span style="font-family: &quot;Courier New&quot;;">false</span> will
                        cancel the request
                </li>
                <li>
                    As of jQuery 1.5, the <span
                            style="font-family: &quot;Courier New&quot;;">beforeSend</span> option will be
                        called regardless of the type of request
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>Function( jqXHR jqXHR, PlainObject settings )</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">success</span></div>
        </td>
        <td colspan="4" style="border: 1px solid rgb(204, 204, 204); width: 677px; padding: 8px;">
            <div>Function to be called if the request succeeds</div>
            <ul>
                <li>
                    <span style="font-family: &quot;Courier New&quot;;">data</span> returned from the
                        server, formatted according to the <span
                                style="font-family: &quot;Courier New&quot;;">dataType</span> parameter or the
                        <span style="font-family: &quot;Courier New&quot;;">dataFilter</span> callback, if
                        also specified
                </li>
                <li>
                    A string describing the status
                </li>
                <li>
                    <span style="font-family: &quot;Courier New&quot;;">jqXHR</span> (in jQuery 1.4.x,
                        XMLHttpRequest) object
                </li>
                <li>
                    Can accept an array of functions to be called in series, as of jQuery 1.5
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>Function( Anything data, String textStatus, jqXHR jqXHR )</div>
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">error</span></div>
        </td>
        <td colspan="4" style="border: 1px solid rgb(204, 204, 204); width: 677px; padding: 8px;">
            <div> Function to be called if the request fails</div>
            <ul>
                <li>
                    textStatus can be <span style="font-family: &quot;Courier New&quot;;">null, "timeout", "error", "abort",</span>
                        or <span style="font-family: &quot;Courier New&quot;;">"parsererror"</span>
                </li>
                <li>
                    <span style="font-family: &quot;Courier New&quot;;">errorThrown</span><span
                            style="font-family: &quot;Helvetica Neue&quot;;"> receives the textual portion of the HTTP status</span>
                </li>
                <li>
                    Can accept an array of functions to be called in series, as of jQuery 1.5
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>Function( jqXHR jqXHR, String textStatus, String errorThrown )</div>
            </div>
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">complete</span></div>
        </td>
        <td colspan="4" style="border: 1px solid rgb(204, 204, 204); width: 677px; padding: 8px;">
            <div>When the request finishes (after success and error callbacks are executed)</div>
            <ul>
                <li>
                     string categorizing the status of the request (<span
                            style="font-family: &quot;Courier New&quot;;">"success", "notmodified", "nocontent", "error", "timeout", "abort",</span>
                        or <span style="font-family: &quot;Courier New&quot;;">"parsererror"</span>)
                </li>
                <li>
                    As of jQuery 1.5, the complete setting can accept an array of functions. Each
                        function will be called in turn
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>Function( jqXHR jqXHR, String textStatus )</div>
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h2>Other utilities</h2>

<p>If you are already using jQuery, and need to support older browsers, you can often save the overhead of a polyfill or the headache of detecting browser support by using the implementations that jQuery provides.</p>

<p>If you don&rsquo;t need to support older browsers, need a polyfill for another reason, or are using some sort of JavaScript transpilation build pipeline, then going with the more native JavaScript functions may be a better idea.</p>

<h3>Arrays</h3>

<p>Use jQuery&rsquo;s methods iterating and filtering arrays:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Iteration</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">arrayOrObject</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Transformation</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">arrayOrObject</span><span class="p">,</span> <span class="nx">callback</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Filter</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">grep</span><span class="p">(</span> <span class="p">[</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span> <span class="p">],</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">n</span><span class="p">,</span> <span class="nx">index</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Concatenation</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">merge</span><span class="p">(</span><span class="nx">array1</span><span class="p">,</span> <span class="nx">array2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Objects</h3>

<p>Similarly, jQuery provides helpers for objects:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Query methods   </span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">isEmptyObject</span><span class="p">({});</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">isPlainObject</span><span class="p">({});</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">type</span><span class="p">(</span><span class="nx">target</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Merging</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">({},</span> <span class="nx">object1</span><span class="p">,</span> <span class="nx">object2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON API Cheatsheet]]></title>
    <link href="http://greena13.github.io/blog/2020/10/17/json-api-cheatsheet/"/>
    <updated>2020-10-17T08:20:08+01:00</updated>
    <id>http://greena13.github.io/blog/2020/10/17/json-api-cheatsheet</id>
    <content type="html"><![CDATA[<p>The JSON API specification the following design goals:</p>

<ul>
<li>Standardising the JSON schema (irrespective of the data you&rsquo;re transmitting)</li>
<li>Minimising the number of client requests</li>
<li>Minimising the amount of data transmitted</li>
</ul>


<p>Understanding how each is achieved is essential in effectively using its features.</p>

<!--more-->


<p>The following is a reorganisation and summary of the full specification: <a href="https://jsonapi.org/">https://jsonapi.org/</a></p>

<h2>General requirements</h2>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 678px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 678px; padding: 8px; border: 1px solid;">
            <div>Rquirement</div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Headers</span></div>
        </td>
        <td style="width: 678px; padding: 8px; border: 1px solid;">
            <div><span
                    style="font-family: &quot;Helvetica Neue&quot;;">Client and server both use </span><span
                    style="font-family: &quot;Courier New&quot;;">Content-Type: application/vnd.api+json</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> without any </span>media type parameters</div>
            <ul>
                <li>
                    <span style="font-family: &quot;Helvetica Neue&quot;;">if the server receives a request with them, it returns 415 Unsupported Media Type</span>

                </li>
            </ul>
            <br/>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Client must also include </span><span
                    style="font-family: &quot;Courier New&quot;;">application/vnd.api+json</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> in  </span><span
                    style="font-family: &quot;Courier New&quot;;">Accept</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> header, if it uses that header</span>
            </div>
            <ul>
                <li>
                    <span style="font-family: &quot;Helvetica Neue&quot;;">server responds with 406 Not Acceptable if all instances of the Mime Type in the Accept header have media type parameters</span>
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Query parameters</span></div>
        </td>
        <td style="width: 678px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Query string must be </span>URL encoded</div>
            <ul>
                <li>
                    <span style="font-family: &quot;Helvetica Neue&quot;;">e.g. </span><span
                            style="font-family: &quot;Courier New&quot;;">[</span><span
                            style="font-family: &quot;Helvetica Neue&quot;;"> and</span><span
                            style="font-family: &quot;Courier New&quot;;"> ]</span><span
                            style="font-family: &quot;Helvetica Neue&quot;;"> characters must be percent-encoded, per the requirements in RFC 3986.</span>

                </li>
            </ul>
            <br/>
            <div>Query parameters must adhere to the same constraints as member names below, with the
                additional requirement that they MUST contain at least one non a-z character
            </div>
            <ul>
                <li>
                    To preserve the ability of JSON:API to make additive additions to standard query
                        parameters without conflicting with existing implementations
                </li>
                <li>
                    RECOMMENDED that a U+002D HYPHEN-MINUS, “-“, U+005F LOW LINE, “_”, or capital letter
                        is used (e.g. camelCasing).

                </li>
            </ul>
            <br/>
            <div>400 Bad Request:</div>
            <ul>
                <li>
                    Query parameter that does not follow the naming conventions and the server does not
                        know how to process it as a query parameter from this specification
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>Request body</div>
        </td>
        <td style="width: 678px; padding: 8px; border: 1px solid;">
            <div>Can’t include any additional attributes beyond those specified - and if they appear the
                client and server must ignore them
            </div>
            <div><br/></div>
            <div>A JSON object must be at the root of every request and response with data</div>
            <div><br/></div>
            <div>Member (field) names:</div>
            <ul>
                <li>
                    Case-sensitive
                </li>
                <li>
                    Must have at least one character and start and end with globally allowed character
                        (Can be used anywhere): 

                </li>
                <ul>
                    <li>
                        U+0061 to U+007A, “a-z”
                    </li>
                    <li>
                        U+0041 to U+005A, “A-Z”
                    </li>
                    <li>
                        U+0030 to U+0039, “0-9”
                    </li>
                    <li>
                        U+0080 and above: non-ASCII Unicode and non URL safe characters (according to RFC
                            3986) are not recommended

                    </li>
                </ul>
                <li>
                    Not allowed at the start or end:
                </li>
                <ul>
                    <li>
                        * U+002D HYPHEN-MINUS, “-“
                    </li>
                    <li>
                        * U+005F LOW LINE, “_”
                    </li>
                    <li>
                        * U+0020 SPACE, “ “ (not recommended, not URL safe)
                    </li>
                    <li>
                        <a href="https://jsonapi.org/format/#document-member-names-reserved-characters">Full
                            reference</a> 

                    </li>
                </ul>
            </ul>
        </td>
    </tr>
    </tbody>
</table>


<h2>Design Goal: Standardised schema</h2>

<p>Object shapes:</p>

<ul>
<li>Top-level schema</li>
<li>Resource Object</li>
<li>Resource Identifier object</li>
<li>Linkage Object</li>
<li>Relationship Object</li>
</ul>


<h3>Consistent top level schema</h3>

<p>The top-level schema of responses is the same, regardless of whether a collection, singular item or (possibly) no data is being returned</p>

<p><strong>Client / Request</strong></p>

<p>Nothing explicit; client needs to parse or deserialize the response to get it in a format that is easy to extract information from (JSON API is optimised for data <em>transmission</em>, not <em>retrieval</em> of information).</p>

<p><strong>Server / Response</strong></p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 130px;"/>
        <col style="width: 118px;"/>
        <col style="width: 102px;"/>
        <col style="width: 87px;"/>
        <col style="width: 246px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>Required</div>
        </td>
        <td style="width: 118px; padding: 8px; border: 1px solid;">
            <div>Forbidden</div>
        </td>
        <td colspan="3" style="width: 435px; padding: 8px; border: 1px solid;">
            <div>Description</div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">data</span></div>
        </td>
        <td rowspan="3" style="height: 92px; width: 130px; padding: 8px; border: 1px solid;">
            <div>At least 1 of these must be defined</div>
        </td>
        <td style="height: 56px; width: 118px; padding: 8px; border: 1px solid;" rowspan="2">
            <div>Can’t have <span style="font-family: &quot;Courier New&quot;;">data</span> and <span
                    style="font-family: &quot;Courier New&quot;;">errors</span> at the same time
            </div>
        </td>
        <td colspan="3" style="width: 435px; padding: 8px; border: 1px solid;">
            <div>Document’s “primary data”: resource or collection of resources targeted by a request</div>
            <div><br/></div>
            <div>Requests that target single resources:</div>
            <ul>
                <li>
                    Single resource object
                </li>
                <li>
                    Single resource identifier object, or
                </li>
                <li>
                     null
                </li>
            </ul>
            <div><br/></div>
            <div>Requests that target resource collections:</div>
            <ul>
                <li>
                    Array of resource objects,
                </li>
                <li>
                    Array of resource identifier objects, or
                </li>
                <li>
                    Empty array
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <span style="font-family: &quot;Courier New&quot;;">errors</span>
        </td>
        <td colspan="3" style="width: 435px; padding: 8px; border: 1px solid;">
            <div>Array of error objects</div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">meta</span></div>
        </td>
        <td style="width: 118px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td colspan="3" style="width: 435px; padding: 8px; border: 1px solid;">
            <div>meta object that contains non-standard meta-information.</div>
        </td>
    </tr>
    <tr>
        <td style="height: 164px; width: 130px; padding: 8px; border: 1px solid;" rowspan="5">
            <div><span style="font-family: &quot;Courier New&quot;;">links</span></div>
        </td>
        <td style="height: 164px; width: 130px; padding: 8px; border: 1px solid;" rowspan="5">
            <div>No</div>
        </td>
        <td style="height: 164px; width: 118px; padding: 8px; border: 1px solid;" rowspan="5">
            <div><br/></div>
        </td>
        <td colspan="3" style="width: 435px; padding: 8px; border: 1px solid;">
            <div>Links object related to the primary data</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>{</div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">  "links": {</span>
                </div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">    "self": "<a
                        href="http://example.com/articles">http://example.com/articles</a>",</span></div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">    "next": "<a
                        href="http://example.com/articles?page">http://example.com/articles?page</a>[offset]=2",</span>
                </div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">    "last": "<a
                        href="http://example.com/articles?page">http://example.com/articles?page</a>[offset]=10"</span>
                </div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">  },</span></div>
                <div>  "data": [{</div>
            </div>
            <div> </div>
            <div>Each member of the links object must represent either:</div>
            <ul>
                <li>
                    String containing the link’s URL
                </li>
                <li>
                    Link object: can have members:
                </li>
                <ul>
                    <li>
                        <span style="font-family: &quot;Courier New&quot;;">href</span>: a string
                            containing the link’s URL.

                    </li>
                    <li>
                        <span style="font-family: &quot;Courier New&quot;;">meta</span>: a meta object
                            containing non-standard meta-information about the link.

                    </li>
                </ul>
            </ul>
            <br/>
            <div>Indicating how many of an association is available:</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>"links": {</div>
                <div>  "related": {</div>
                <div>    "href": "<a href="http://example.com/articles/1/comments">http://example.com/articles/1/comments</a>",
                </div>
                <div>    <span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">"meta": {</span></div>
                <div><span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">      "count": 10</span>
                </div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">    }</span></div>
                <div>  }</div>
                <div>}</div>
            </div>
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 102px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="width: 87px; padding: 8px; border: 1px solid;">
            <div>Required</div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div>Description</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 102px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">self</span></div>
        </td>
        <td style="width: 87px; padding: 8px; border: 1px solid;">
            <div>No</div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div>Link that generated the current response document.</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 102px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">related</span></div>
        </td>
        <td style="width: 87px; padding: 8px; border: 1px solid;">
            <div>No</div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div>Related resource link when the primary data represents a resource relationship.</div>
            <ul>
                <li>
                    Access to resource objects linked in a relationship
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 102px; padding: 8px;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">pagination links</span></div>
        </td>
        <td style="width: 87px; padding: 8px; border: 1px solid;">
            <div>No</div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div>Links for the primary data.</div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">included</span></div>
        </td>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>No.</div>
        </td>
        <td style="width: 118px; padding: 8px; border: 1px solid;">
            <div>When <span style="font-family: &quot;Courier New&quot;;">data</span> is not present</div>
        </td>
        <td colspan="3" style="width: 435px; padding: 8px; border: 1px solid;">
            <div><span style="--inversion-type-color: simple; color: rgb(255, 38, 0);">Array of resource objects</span>
                that are either:
            </div>
            <ul>
                <li>
                    Related to the primary data and/or
                </li>
                <li>
                    Related to each other
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">jsonapi</span></div>
        </td>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">No</span></div>
        </td>
        <td style="width: 118px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td colspan="3" style="width: 435px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Object describing the server’s implementation</span>
            </div>
            <div><br/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">If the</span> version member is not
                present, clients should assume the server implements at least version 1.0 of the
                specification.
            </div>
        </td>
    </tr>
    </tbody>
</table>


<p>Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;articles&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;attributes&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;JSON:API paints my bikeshed!&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;links&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;self&quot;</span><span class="p">:</span> <span class="s2">&quot;http://example.com/articles/1&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;relationships&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;links&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;self&quot;</span><span class="p">:</span> <span class="s2">&quot;http://example.com/articles/1/relationships/author&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;related&quot;</span><span class="p">:</span> <span class="s2">&quot;http://example.com/articles/1/author&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;people&quot;</span><span class="p">,</span> <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;9&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nt">&quot;comments&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;links&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;self&quot;</span><span class="p">:</span> <span class="s2">&quot;http://example.com/articles/1/relationships/comments&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="nt">&quot;related&quot;</span><span class="p">:</span> <span class="s2">&quot;http://example.com/articles/1/comments&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">,</span> <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;5&quot;</span> <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">,</span> <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;12&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}],</span>
</span><span class='line'>  <span class="nt">&quot;included&quot;</span><span class="p">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;people&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;9&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;attributes&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;first-name&quot;</span><span class="p">:</span> <span class="s2">&quot;Dan&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;last-name&quot;</span><span class="p">:</span> <span class="s2">&quot;Gebhardt&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;twitter&quot;</span><span class="p">:</span> <span class="s2">&quot;dgeb&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;links&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;self&quot;</span><span class="p">:</span> <span class="s2">&quot;http://example.com/people/9&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;attributes&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;First!&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;relationships&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;people&quot;</span><span class="p">,</span> <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;2&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;links&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;self&quot;</span><span class="p">:</span> <span class="s2">&quot;http://example.com/comments/5&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;12&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;attributes&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;I like XML better&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;relationships&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;data&quot;</span><span class="p">:</span> <span class="p">{</span> <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;people&quot;</span><span class="p">,</span> <span class="nt">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;9&quot;</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;links&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;self&quot;</span><span class="p">:</span> <span class="s2">&quot;http://example.com/comments/12&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Consistent data objects</h3>

<p><strong>Client / Request</strong></p>

<p>Nothing explicit; client needs to parse or deserialize the standard object shapes.</p>

<p><strong>Server / Response</strong></p>

<p>The schema comprises of two object types:</p>

<ul>
<li>Resource objects: Contain the full list of attributes to represent a resource</li>
<li>Resource identifier objects: Contain only the necessary information to identify a resource (for linking or requesting the resource object later on)</li>
</ul>


<p>Resource object vs resource identifier object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Resource object:</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;articles&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;attributes&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ... this article&#39;s attributes</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;relationships&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// ... this article&#39;s relationships</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Resource identifier object:</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;articles&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;1&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Resource object</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 130px;"/>
        <col style="width: 541px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><br/></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>Required</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 541px; padding: 8px;">
            <div>Description</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">id</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>Yes - unless new object coming from client</div>
        </td>
        <td style="height: 56px; border: 1px solid rgb(204, 204, 204); width: 541px; padding: 8px;"
            rowspan="2">
            <div>Must be strings that together uniquely resolve to a single resource</div>
            <div><br/></div>
            <div><span style="font-family: &quot;Courier New&quot;;">type</span> </div>
            <ul>
                <li>
                    used to describe resource objects that share <span style="font-weight: bold;">common attributes and relationships</span>

                </li>
                <li>
                    Can be either plural or singular (but must be used consistently)
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">type</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>Yes</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">attributes</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>No</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 541px; padding: 8px;">
            <ul>
                <li>
                    Information about the resource object
                </li>
                <li>
                    Known as the resource’s fields
                </li>
                <li>
                    Any object that constitutes or is contained in an attribute MUST NOT contain a <span
                            style="font-family: &quot;Courier New&quot;;">relationships</span> or <span
                            style="font-family: &quot;Courier New&quot;;">links</span> member

                </li>
                <li>
                    has-one foreign keys SHOULD NOT appear as attributes
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">relationships</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>No</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 541px; padding: 8px;">
            <div>Relationships (to-one or to-many) between the resource and other JSON:API resources.</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">links</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>No</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 541px; padding: 8px;">
            <div>Links related to the resource</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">meta</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>No</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 541px; padding: 8px;">
            <div>meta object containing non-standard meta-information about a resource that can not be
                represented as an attribute or relationship
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h3>Hyperlinked media: Standard way of navigating between data</h3>

<p><strong>Client / Request</strong></p>

<p>Nothing explicit; client needs to find and use the most appropriate link</p>

<p><strong>Server / Response</strong></p>

<p><code>links</code>: Can include links to navigate pages, to reload self or to fetch associated data</p>

<ul>
<li>Provides easy navigation by including URLs for each request the client may wish to make next, in the current response</li>
</ul>


<h3>Abstract relationships: Standard way of representing all relationships, regardless of implementation</h3>

<p><strong>Client / Request</strong></p>

<p>Nothing explicit; client needs deserialize the response and match up included data with its parent using the relationships</p>

<p><strong>Server / Response</strong></p>

<p><code>data.relationships</code>: Abstracts the details of how items are associated (join tables, foreign keys, etc) and just returns the associated data
* Only contains primary keys and data types - for the other attributes, you need to (request and) match up with the data in the included</p>

<p>Relationships are treated as their own entity, allowing endpoints for interacting on the relationship rather than the related resource</p>

<p>Example: author relationship includes</p>

<ul>
<li>Link for the relationship itself (allows the client to change the related author directly)</li>
<li>Related resource link to fetch the resource objects</li>
<li>Linkage information.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;articles&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;attributes&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;Rails is Omakase&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;relationships&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;author&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;links&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;self&quot;</span><span class="o">:</span> <span class="s2">&quot;http://example.com/articles/1/relationships/author&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;related&quot;</span><span class="o">:</span> <span class="s2">&quot;http://example.com/articles/1/author&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;people&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;9&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;links&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;self&quot;</span><span class="o">:</span> <span class="s2">&quot;http://example.com/articles/1&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Relationships object schema</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 104px;"/>
        <col style="width: 85px;"/>
        <col style="width: 87px;"/>
        <col style="width: 115px;"/>
        <col style="width: 409px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 104px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 85px; padding: 8px; border: 1px solid;">
            <div>Required</div>
        </td>
        <td colspan="3" style="width: 611px; padding: 8px; border: 1px solid;">
            <div>Description</div>
        </td>
    </tr>
    <tr>
        <td rowspan="5" style="height: 164px; width: 104px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">links</span></div>
        </td>
        <td rowspan="7" style="height: 236px; width: 85px; padding: 8px; border: 1px solid;">
            <div>At least one of these must be defined</div>
            <div><br/></div>
        </td>
        <td colspan="3" style="width: 611px; padding: 8px; border: 1px solid;">
            <div>Links object</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 87px; padding: 8px;">
            <div>Attribute</div>
        </td>
        <td style="width: 115px; padding: 8px; border: 1px solid;">
            <div>Required</div>
        </td>
        <td style="width: 409px; padding: 8px; border: 1px solid;">
            <div>Description</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 87px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">self</span></div>
        </td>
        <td style="height: 56px; width: 115px; padding: 8px; border: 1px solid;" rowspan="2">
            <div>At least one of these is required</div>
        </td>
        <td style="width: 409px; padding: 8px; border: 1px solid;">
            <div>Link for the <span style="--inversion-type-color: simple; color: rgb(255, 38, 0);">relationship</span> (join
                table) - allows the client to directly manipulate the relationship.
            </div>
            <ul>
                <li>
                    For example, removing an author through an article’s relationship URL would
                        disconnect the person from the article without deleting the people resource itself. 
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 87px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">related</span></div>
        </td>
        <td style="width: 409px; padding: 8px; border: 1px solid;">
            <div>Link to related <span style="--inversion-type-color: simple; color: rgb(255, 38, 0);">resource</span> 
            </div>
            <ul>
                <li>
                    When fetched, the related resource object(s) are returned as the response’s primary
                        data.

                </li>
                <li>
                    E.g: An article’s comments relationship could specify a link that returns a
                        collection of comment resource objects when retrieved through a GET request

                </li>
            </ul>
            <div><br/></div>
            <div>If present link MUST reference a valid URL, even if the relationship isn’t currently
                associated with any target resources
            </div>
            <ul>
                <li>
                    MUST NOT change because its relationship’s content changes
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 87px; padding: 8px;">
            <span style="font-family: &quot;Helvetica Neue&quot;;">pagination links</span>
        </td>
        <td style="width: 115px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 409px; padding: 8px; border: 1px solid;">
            <div>To-many relationship MAY also contain pagination links</div>
            <div>Paginate the relationship data, not the related resources.</div>
        </td>
    </tr>
    <tr>
        <td style="width: 104px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">data</span></div>
        </td>
        <td colspan="3" style="width: 611px; padding: 8px; border: 1px solid;">
            <div>Resource linkage</div>
            <ul>
                <li>
                    Allows a client to link together all of the included resource objects without having
                        to GET any URLs via links.
                </li>
                <li>
                    to-one relationships: <span style="font-family: &quot;Courier New&quot;;">null</span> or a
                        single <span style="font-weight: bold;">resource identifier object</span>
                </li>
                <li>
                    to-many relationships: empty array or array of <span style="font-weight: bold;">resource identifier objects</span>

                </li>
            </ul>
            <div><br/></div>
            <div>Spec doesn’t impart meaning about order of array, although implementations may</div>
            <ul>
                <li>
                    May represent ordered or unordered relationships, and both types can be mixed in one
                        response object.

                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 104px; padding: 8px; border: 1px solid;">
            <span style="font-family: &quot;Courier New&quot;;">meta</span>
        </td>
        <td colspan="3" style="width: 611px; padding: 8px; border: 1px solid;">
            <div>Non-standard meta-information about the relationship</div>
        </td>
    </tr>
    </tbody>
</table>


<h3>Standard error reporting</h3>

<p><strong>Client / Request</strong></p>

<p>Client needs to deserialize the response and handle the errors</p>

<p><strong>Server / Response</strong></p>

<p>errors: Generalised error reporting that can account for one or more errors occurring</p>

<p>Error schema:</p>

<ul>
<li><code>id</code> Unique identifier for this particular occurrence of the problem</li>
<li><code>links</code> Links object containing the following members</li>
<li><code>about</code>: a link that leads to further details about this particular occurrence of the problem.</li>
<li><code>status</code> HTTP status code applicable to this problem, expressed as a string value.</li>
<li><code>code</code> application-specific error code, expressed as a string value</li>
<li><code>title</code> short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.</li>
<li><code>detail</code> human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.</li>
<li><code>source</code> Object containing references to the source of the error, optionally including any of the following members:

<ul>
<li><code>pointer</code>: a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. &ldquo;/data&rdquo; for a primary data object, or &ldquo;/data/attributes/title&rdquo; for a specific attribute].</li>
<li><code>parameter</code>: a string indicating which URI query parameter caused the error.</li>
</ul>
</li>
<li><code>meta</code> meta object containing non-standard meta-information about the error</li>
</ul>


<p>Server can either stop processing as soon as a problem is encountered, or continue and encounter multiple problems</p>

<ul>
<li>The most generally applicable HTTP error code should be used in the response</li>
</ul>


<h2>Design Goal: Minimise number of requests</h2>

<h3>Compound Documents: Including related data client needs</h3>

<p><strong>Client / Request</strong></p>

<p><code>include</code> query parameter: Comma-separated list of relationship paths (dot-separated list of relationship names)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">articles</span><span class="o">/</span><span class="mi">1</span><span class="o">?</span><span class="nx">include</span><span class="o">=</span><span class="nx">comments</span><span class="p">.</span><span class="nx">author</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="nx">Accept</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">vnd</span><span class="p">.</span><span class="nx">api</span><span class="o">+</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Client is required to re-assemble the connections using the primary fields and types in <code>relationships</code> and plucking them out of the <code>included</code> array
* Just a flat list - have to match up where they should be nested by finding the matching resource identifier object</p>

<p><strong>Server / Response</strong></p>

<p>Adds a flat, normalised (duplicates removed) array of associated resources in the <code>included</code> attribute</p>

<ul>
<li>Response is called a “compound document” (consists of more than just the primary resource requested)</li>
<li>Note: query param is named <code>include</code> while attribute is named <code>included</code></li>
</ul>


<p>Server may return resources related to the primary data by default and may also support an <code>include</code> request parameter to allow the client to customize which related resources should be returned</p>

<ul>
<li>Server <strong>must</strong> remove all default <code>included</code> and only use those specified, if the client is using the query parameter</li>
</ul>


<p>Because compound documents require full linkage (every included (full) resource object <strong>must</strong> be referenced by a resource identifier object somewhere else in the document), intermediate resources in a multi-part path <strong>must</strong> be returned along with the leaf nodes.</p>

<ul>
<li>Exception: when relationship fields that would otherwise contain linkage data are excluded via sparse fieldsets (see below).</li>
<li>Server may choose to expose a deeply nested relationship as a direct relationship with an alias such as <code>comment-authors</code> for <code>comments.author</code></li>
<li>would allow a client to request <code>/articles/1?include=comment-authors</code> instead of <code>/articles/1?include=comments.author</code></li>
<li>Server can still provide full linkage in compound documents without including potentially unwanted intermediate resources.</li>
</ul>


<p>Applies to all request types: a server could support the inclusion of related resources along with a POST request to create a resource or relationship</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 131px;"/>
        <col style="width: 681px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 131px; padding: 8px; border: 1px solid;">
            <div>400 Bad Request</div>
        </td>
        <td style="width: 681px; padding: 8px; border: 1px solid;">
            <ul>
                <li>
                    Request uses the <span
                            style="font-family: &quot;Courier New&quot;;">include</span> parameter for
                        an endpoint that does not support it

                </li>
                <li>
                    Server is unable to identify a relationship path
                </li>
                <li>
                    Server does not support inclusion of resources from a path
                </li>
            </ul>
        </td>
    </tr>
    </tbody>
</table>


<h3>Metadata: Including summary and other metadata</h3>

<p><strong>Client / Request</strong></p>

<p>Included by default - up to the server to implement.</p>

<p><strong>Server / Response</strong></p>

<p><code>meta</code> attribute for things like counts and modified dates, so don’t have to request all results to generate aggregate or summary information</p>

<p>Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;meta&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;copyright&quot;</span><span class="o">:</span> <span class="s2">&quot;Copyright 2015 Example Corp.&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;authors&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="s2">&quot;Yehuda Katz&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Steve Klabnik&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Dan Gebhardt&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;Tyler Kellen&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Design Goal: Minimise amount of data transmitted</h2>

<h3>Query parameters quick reference</h3>

<table style="border-collapse: collapse; min-width: 100%;">
    <tbody>
    <tr>
        <td style="width: 123px; padding: 8px; border: 1px solid;">
            <div>Sorting</div>
        </td>
        <td style="width: 346px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">?sort=age,-name</span></div>
            <ul>
                <li>
                    <span style="font-family: &quot;Helvetica Neue&quot;;">Sort precedence must match order fields are specified in</span>
                </li>
                <li>
                    Default order is ascending, - makes it descending
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 123px; padding: 8px; border: 1px solid;">
            Filtering
        </td>
        <td style="width: 346px; padding: 8px; border: 1px solid;">
            <div><span
                    style="font-family: &quot;Courier New&quot;;">?filter[foo]=bar&amp;filter[baz]=bla</span>
            </div>
            <ul>
                <li>
                    <span style="font-family: &quot;Helvetica Neue&quot;;">Agnostic to filter algorithm used (exact matches, contains, etc)</span>
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 123px; padding: 8px; border: 1px solid;">
            <div>Pagination</div>
        </td>
        <td style="width: 346px; padding: 8px; border: 1px solid;">
            <span style="font-family: &quot;Courier New&quot;;">?page[number]=</span>
            <ul>
                <li>
                    <span style="font-family: &quot;Helvetica Neue&quot;;">Agnostic to paging algorithm used (pages, offsets, etc)</span>
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 123px; padding: 8px; border: 1px solid;">
            <div>Including related resources</div>
        </td>
        <td style="width: 346px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">?include=a.b,a.c</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 123px; padding: 8px; border: 1px solid;">
            <div>Sparse fieldsets</div>
        </td>
        <td style="width: 346px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">?fields[a]=b,c&amp;fields[d]=e</span>
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h3>Filtering: Restricting results based on criteria</h3>

<p><strong>Client / Request</strong></p>

<p><code>filter</code> query parameter is reserved for filtering data, but doesn&rsquo;t tell you how to use it: (implementation agnostic, so can use any filter implementation/algorithm)</p>

<ul>
<li>Usually involves specifying multiple filters using the square brackets syntax: <code>filter[name]=foo&amp;filter[age]=21</code></li>
</ul>


<p><strong>Server / Response</strong></p>

<p><code>data</code>:</p>

<ul>
<li>Collections: Filters items in the primary document</li>
<li>Items: Filters the scope for looking up the item (may result in <code>404 Not Found</code>)</li>
</ul>


<h3>Sorting: Ordering results</h3>

<p><strong>Client / Request</strong></p>

<p><code>sort</code> query parameter is used for filtering</p>

<ul>
<li>Recommended dot-separated sort fields be used: E.g. <code>author.name</code> could be used to request that the primary data be sorted based upon the name attribute of the <code>author</code> relationship</li>
<li>However, <code>fields</code> do not necessarily need to correspond to resource attribute and association names</li>
</ul>


<p>Sort fields are applied in the order specified</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">people</span><span class="o">?</span><span class="nx">sort</span><span class="o">=</span><span class="nx">age</span><span class="p">,</span><span class="nx">name</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="nx">Accept</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">vnd</span><span class="p">.</span><span class="nx">api</span><span class="o">+</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sort fields are ascending unless it is prefixed with a minus</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">articles</span><span class="o">?</span><span class="nx">sort</span><span class="o">=-</span><span class="nx">created</span><span class="p">,</span><span class="nx">title</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="nx">Accept</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">vnd</span><span class="p">.</span><span class="nx">api</span><span class="o">+</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Server / Response</strong></p>

<p><code>data</code>:</p>

<ul>
<li>Collections: Changes the order of items in the primary document</li>
<li>Items: No effect</li>
</ul>


<p>Server may apply default sorting rules to top-level data if request parameter <code>sort</code> is not specified.</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 680px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>400 Bad Request</div>
        </td>
        <td style="width: 680px; padding: 8px; border: 1px solid;">
            <div>Server does not support sorting as specified in the query parameter sort</div>
        </td>
    </tr>
    </tbody>
</table>


<h3>Pagination: Truncating data into pages</h3>

<p><strong>Client / Request</strong></p>

<p><code>page</code> query parameter is reserved for pagination, but doesn’t tell you how to use it: (implementation agnostic, so can use any pagination strategy: page-based, offset-based, cursor-based)</p>

<ul>
<li>Eg. <code>page[number]</code> and <code>page[size]</code>, an offset-based strategy might use <code>page[offset]</code> and <code>page[limit]</code>, while a cursor-based strategy might use <code>page[cursor]</code></li>
</ul>


<p><strong>Server / Response</strong></p>

<p><code>data</code>:</p>

<ul>
<li>Collections: Truncates the full set of results in the primary document into pages</li>
<li>Items: No effect</li>
</ul>


<p><code>meta</code>: Not dictated, but there are examples of it being used to store the total number of results</p>

<p><code>included</code>: Server may also paginate included resources</p>

<p><code>links</code>: If they server does provide pagination, need to include pagination links: <code>first</code>, <code>last</code>, <code>prev</code>, <code>next</code></p>

<ul>
<li>Can be omitted or be <code>null</code> if they’re unavailable</li>
<li>Placed at the top level or in the <code>included</code> resource they relate to</li>
</ul>


<h3>Sparse fieldsets: Selectively including data client needs</h3>

<p><strong>Client / Request</strong></p>

<p><code>fields</code> query parameter used for specifying a whitelist of attributes to include by specifying a <code>fields[TYPE]</code> parameter.</p>

<ul>
<li>Comma separated list</li>
<li>Empty value indicates that no fields should be returned.</li>
</ul>


<p>Example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">articles</span><span class="o">?</span><span class="nx">include</span><span class="o">=</span><span class="nx">author</span><span class="o">&amp;</span><span class="nx">fields</span><span class="p">[</span><span class="nx">articles</span><span class="p">]</span><span class="o">=</span><span class="nx">title</span><span class="p">,</span><span class="nx">body</span><span class="o">&amp;</span><span class="nx">fields</span><span class="p">[</span><span class="nx">people</span><span class="p">]</span><span class="o">=</span><span class="nx">name</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="nx">Accept</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">vnd</span><span class="p">.</span><span class="nx">api</span><span class="o">+</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Server / Response</strong></p>

<p>If a client uses sparse fieldsets, server <strong>must</strong> not send back any others</p>

<ul>
<li>If not used, server may send all fields, a subset of fields, or no fields for that resource type.</li>
</ul>


<p><code>included</code> / <code>relationships</code>: Lifts the requirement of full linkage if the relationship fields that would otherwise contain linkage data are excluded via sparse fieldsets.</p>

<h2>Working with primary resources (CRUD)</h2>

<h3>Viewing a resource</h3>

<p><strong>Server / Response</strong></p>

<p>Server <strong>must</strong> actually implement any routes mentioned in <code>self</code> and <code>related</code></p>

<p>The <code>data</code> attribute of a response <strong>must</strong> be a (possible empty) array of resource objects or resource identifier objects for collections, and a resource object or null for a singular item.</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 678px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>Response</div>
        </td>
        <td style="width: 678px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>200 OK</div>
        </td>
        <td style="width: 678px; padding: 8px; border: 1px solid;">
            <div>Successful request to fetch</div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>404 Not Found</div>
        </td>
        <td style="width: 678px; padding: 8px; border: 1px solid;">
            <div>Request to fetch a single resource that does not exist</div>
            <ul>
                <li>
                    Use a 200 OK response with null as the primary data if the requested URL is
                        one that might correspond to a single resource, but doesn’t currently

                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>Other responses</div>
        </td>
        <td style="width: 678px; padding: 8px; border: 1px solid;">
            <div>Can be used, including setting the <span
                    style="font-family: &quot;Courier New&quot;;">errors</span> attribute
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h3>General (For Creating, Updating and Destroying)</h3>

<p>Request <strong>must</strong> completely succeed or fail (in a single “transaction”). No partial updates are allowed.</p>

<p>If the client somehow does not have the most up-to-date and complete set of values, the server <strong>must</strong> respond with the full document again</p>

<p>Examples:</p>

<ul>
<li>If using client-generated ids which are ignored and replaced with server generated ones (client needs to be told actual ids used)</li>
<li>If not using client-generated ids (client needs to be told ids used)</li>
<li>If updating or creating some attributes, which cause others to be updated or have defaults set (client needs to be told full set of new values)</li>
</ul>


<p>If the server responds with <code>204 No Content</code>, client should assume it already has the complete and most up-to-date values for a resource</p>

<h3>Creating a resource</h3>

<p><strong>Client / Request</strong></p>

<p>Server may accept a client-generated ID along with a request to create a resource, but they <strong>must</strong> be a universally unique identifier (ideally a properly generated and formatted UUID as described in RFC 4122)</p>

<p><strong>Server / Response</strong></p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 131px;"/>
        <col style="width: 673px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div>Response</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div><br/></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">201 Created</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Request <span style="font-weight: bold;">did not</span> include a Client-Generated ID
                then it must use <span style="font-family: &quot;Courier New&quot;;">201 Created</span>
            </div>
            <ul>
                <li>
                    Also should include a <span style="font-family: &quot;Courier New&quot;;">Location</span>
                        header identifying the location of the newly created resource. (must match <span
                                style="font-family: &quot;Courier New&quot;;">self</span> link if they’re
                        both provided)

                </li>
                <li>
                    Must respond with a document that contains the primary resource created
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">204 No Content</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Request <span style="font-weight: bold;">did</span> include a Client-Generated ID (and
                the server used it unaltered): Can use <span
                        style="font-family: &quot;Courier New&quot;;">201 Created</span> with document or
                <span style="font-family: &quot;Courier New&quot;;">204 No Content</span> with no document
                (below)
            </div>
            <ul>
                <li>
                    Client should consider the resource object sent in the request to be accepted by
                        the server

                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">202 Accepted</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Request to create a resource has been accepted for processing, but the processing has not
                been completed by the time the server responds
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">403 Forbidden</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Unsupported request to create a resource:</div>
            <ul>
                <li>
                    Including if the server doesn’t support client-generated IDs
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">404 Not Found</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Processing a request that references a related resource that does not exist.</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">409 Conflict</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Either:</div>
            <ul>
                <li>
                    Request to create a resource with a client-generated ID that already exists
                </li>
                <li>
                    When <span style="font-family: &quot;Courier New&quot;;">type</span> is <span
                            style="font-weight: bold;">not</span> among the type(s) that constitute the
                        collection represented by the endpoint

                </li>
            </ul>
            <div><br/></div>
            <div>server SHOULD include error details and provide enough information to recognize the
                source of the conflict.
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 131px; padding: 8px;">
            <div>Other responses</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Can be used, including setting the <span style="font-family: &quot;Courier New&quot;;">errors</span>
                attribute
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h3>Updating a resource</h3>

<p><strong>Client / Request</strong></p>

<p>Can include all or none of the resource’s attributes in an update request
Can include some or all of a resource’s <code>relationships</code></p>

<p><strong>Server / Response</strong></p>

<p>Server interprets any missing <code>attributes</code> or <code>relationships</code> as if they were included with their current values (and NOT <code>null</code> or <code>undefined</code>)</p>

<ul>
<li>If a relationship is provided, the value will be <strong>replaced</strong> with the value specified in this member.</li>
</ul>


<p>Example: Completely replace tags for an article</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;articles&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;relationships&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;tags&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">{</span> <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;tags&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;2&quot;</span> <span class="p">},</span>
</span><span class='line'>          <span class="p">{</span> <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;tags&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;3&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 688px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">200 OK</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 688px; padding: 8px;">
            <div>Server accepts an update but also changes the resource(s) in ways other than those
                specified by the request
            </div>
            <ul>
                <li>
                    E.g., updating the <span
                            style="font-family: &quot;Courier New&quot;;">updatetAt</span> attribute or a
                        computed <span style="font-family: &quot;Courier New&quot;;">sha</span>
                </li>
                <li>
                    Response document must include a representation of the updated resource(s) as if
                        a GET request was made to the request URL (i.e. include all the attributes - not
                        just those changed)

                </li>
            </ul>
            <div><br/></div>
            <div>If an update is successful, the client’s current fields remain up to date, and the server
                responds only with top-level meta data. 
            </div>
            <ul>
                <li>
                    If this is the case, must not include a representation of the updated
                        resource(s).

                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">202 Accepted</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 688px; padding: 8px;">
            <div>Request has been accepted for processing, but the processing has not been completed by
                the time the server responds
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">204 No Content</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 688px; padding: 8px;">
            <div>Update is successful and the server doesn’t update any fields besides those provided
            </div>
            <ul>
                <li>
                    Server responds with no response document
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">403 Forbidden</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 688px; padding: 8px;">
            <div>Unsupported request to update a resource or relationship.</div>
            <div><br/></div>
            <div>Particularly, since full replacement may be a dangerous operation, a server may choose to
                disallow it
            </div>
            <ul>
                <li>
                    May reject an attempt to do a full replacement of a to-many relationship. (Server
                        must reject the entire update)

                </li>
                <li>
                    May reject full replacement if it has not provided the client with the full list
                        of associated objects, and does not want to allow deletion of records the client
                        has not seen.

                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">404 Not Found</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 688px; padding: 8px;">
            <div>Either:</div>
            <ul>
                <li>
                    Request to modify a resource that does not exist.
                </li>
                <li>
                    Request that references a related resource that does not exist.
                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">409 Conflict</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 688px; padding: 8px;">
            <div>Either:</div>
            <ul>
                <li>
                    Request to update a resource if that update would violate other server-enforced
                        constraints (such as a uniqueness constraint on a property other than id).

                </li>
                <li>
                    Request in which the resource object’s <span
                            style="font-family: &quot;Courier New&quot;;">type</span> and <span
                            style="font-family: &quot;Courier New&quot;;">id</span> do not match the
                        server’s endpoint.

                </li>
            </ul>
            <div><br/></div>
            <div>Server should include error details and provide enough information to recognise the
                source of the conflict.
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>Other responses</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 688px; padding: 8px;">
            <div>Can be used, including setting the <span style="font-family: &quot;Courier New&quot;;">errors</span>
                attribute
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h3>Destroying a resource</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">DELETE</span> <span class="o">/</span><span class="nx">photos</span><span class="o">/</span><span class="mi">1</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="nx">Accept</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">vnd</span><span class="p">.</span><span class="nx">api</span><span class="o">+</span><span class="nx">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Doesn&rsquo;t appear to need the resource <code>id</code> or <code>type</code> in the body of the request.</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 673px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">202 Accepted</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Request has been accepted for processing, but the processing has not been completed by
                the time the server responds,
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">204 No Content</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Deletion request is successful and no content is returned.</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">200 OK</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Deletion request is successful and the server responds with only top-level meta data.
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">404 Not Found</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 673px; padding: 8px;">
            <div>Deletion request fails due to the resource not existing.</div>
        </td>
    </tr>
    </tbody>
</table>


<h2>Working with relationships directly</h2>

<p>JSON API treats relationships as their own singular resource, providing APIs for interacting with them directly (regardless of their implementation):</p>

<ul>
<li>Each relationship object can contain a link for interacting with the relationship directly</li>
<li>The behaviour of requests to that URL depend on the HTTP method you use</li>
</ul>


<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 659px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>Operation</div>
        </td>
        <td style="width: 659px; padding: 8px; border: 1px solid;">
            <div>HTTP Request type</div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>View</div>
        </td>
        <td style="width: 659px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">GET</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>Add to</div>
        </td>
        <td style="width: 659px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">POST</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>Replace</div>
        </td>
        <td style="width: 659px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">PATCH</span></div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>Remove from</div>
        </td>
        <td style="width: 659px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">DELETE</span></div>
        </td>
    </tr>
    </tbody>
</table>


<h3>Viewing Relationships</h3>

<p>Returns the <em>relationship</em> object with a data value that is collection or singular resource, depending on whether it’s a to-one or to-many relationship</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 674px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>200 OK</div>
        </td>
        <td style="width: 674px; padding: 8px; border: 1px solid;">
            <div>Successful request to fetch</div>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>404 Not Found</div>
        </td>
        <td style="width: 674px; padding: 8px; border: 1px solid;">
            <div>Fetch a relationship link URL that does not exist.</div>
            <ul>
                <li>
                    Can happen when the parent resource of the relationship does not exist
                </li>
                <li>
                    If a relationship link URL exists but the relationship is empty, then 200 OK MUST
                        be returned

                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="width: 130px; padding: 8px; border: 1px solid;">
            <div>Other responses</div>
        </td>
        <td style="width: 674px; padding: 8px; border: 1px solid;">
            <div>Can be used, including setting the <span style="font-family: &quot;Courier New&quot;;">errors</span>
                attribute
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h3>Updating Relationships</h3>

<p>Has the same endpoint shape, regardless of implementation semantics (foreign keys, join tables etc)</p>

<p>Server can choose to delete the underlying resource if a relationship is deleted (as a garbage collection measure).</p>

<h4>Update a To-One relationship: Only PATCH is supported - i.e. you’re updating it whether the relation currently exists or not</h4>

<p><strong>Client / Request</strong></p>

<p>Client include a top-level member named <code>data</code> containing one of:</p>

<ul>
<li>A resource identifier object corresponding to the new related resource.</li>
<li><code>null</code>, to remove the relationship.</li>
</ul>


<h5>Swap a relationship</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PATCH</span> <span class="o">/</span><span class="nx">articles</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="nx">relationships</span><span class="o">/</span><span class="nx">author</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="nx">Content</span><span class="o">-</span><span class="nx">Type</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">vnd</span><span class="p">.</span><span class="nx">api</span><span class="o">+</span><span class="nx">json</span>
</span><span class='line'><span class="nx">Accept</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">vnd</span><span class="p">.</span><span class="nx">api</span><span class="o">+</span><span class="nx">json</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;people&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;12&quot;</span> <span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Removing a relationship</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">PATCH</span> <span class="o">/</span><span class="nx">articles</span><span class="o">/</span><span class="mi">1</span><span class="o">/</span><span class="nx">relationships</span><span class="o">/</span><span class="nx">author</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'><span class="nx">Content</span><span class="o">-</span><span class="nx">Type</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">vnd</span><span class="p">.</span><span class="nx">api</span><span class="o">+</span><span class="nx">json</span>
</span><span class='line'><span class="nx">Accept</span><span class="o">:</span> <span class="nx">application</span><span class="o">/</span><span class="nx">vnd</span><span class="p">.</span><span class="nx">api</span><span class="o">+</span><span class="nx">json</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="kc">null</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Update a To-Many relationship: PATCH, POST and DELETE are supported</h4>

<p><strong>Client / Request</strong></p>

<p>Body <strong>must</strong> contain a <code>data</code> member whose value is an empty array or an array of resource identifier objects</p>

<h5>POST request: Adding items to a relation</h5>

<p><strong>Server / Response</strong></p>

<p>Adds the specified members to the relationship unless they are already present</p>

<ul>
<li>If a given <code>type</code> and <code>id</code> is already in the relationship, the server does not add it again</li>
</ul>


<p>If all of the specified resources can be added to, or are already present in, the relationship then the server returns a successful response.</p>

<ul>
<li>Ensures a request is successful if the server’s state matches the requested state</li>
<li>Helps avoid pointless race conditions caused by multiple clients making the same changes to a relationship.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span> <span class="s2">&quot;data&quot;</span><span class="o">:</span> <span class="p">[</span> <span class="p">{</span> <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;comments&quot;</span><span class="p">,</span> <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="s2">&quot;123&quot;</span> <span class="p">}</span> <span class="p">]}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>PATCH Request: Replaces all existing items in the relation</h5>

<p><strong>Server / Response</strong></p>

<p>Either:</p>

<ul>
<li>Completely replace every member of the relationship</li>
<li>Return an appropriate error response if some resources can not be found or accessed</li>
<li>Return <code>403 Forbidden</code></li>
</ul>


<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 130px;"/>
        <col style="width: 680px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 130px; padding: 8px;">
            <div>403 Forbidden</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 680px; padding: 8px;">
            <div>If full replacement of the association is not permitted</div>
        </td>
    </tr>
    </tbody>
</table>


<h5>DELETE Request: Remove items from a relation</h5>

<p><strong>Server / Response</strong></p>

<p>Removes the specified members from the relationship or return a <code>403 Forbidden</code> response</p>

<p>If all of the specified resources are able to be removed from, or are already missing from, the relationship then server returns a successful response</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 153px;"/>
        <col style="width: 658px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 153px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">202 Accepted</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 658px; padding: 8px;">
            <div>Relationship update request has been accepted for processing, but the processing has not been
                completed by the time the server responds
            </div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 153px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">204 No Content</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 658px; padding: 8px;">
            <div>update is successful and the representation of the resource in the request matches the
                result
            </div>
            <ul>
                <li>
                    POST request sent to a URL from a to-many relationship link when that relationship
                        already exists.

                </li>
                <li>
                    DELETE request sent to a URL from a to-many relationship link when that relationship
                        does not exist.

                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 153px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">200 OK</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 658px; padding: 8px;">
            <div>Server accepts an update but also changes the targeted relationship(s) in other ways than
                those specified by the request
            </div>
            <ul>
                <li>
                    Response document MUST include a representation of the updated relationship(s).
                </li>
            </ul>
            <div><br/></div>
            <div>Server MUST return a 200 OK status code if an update is successful, the client’s current data
                remain up to date, and the server responds only with top-level meta data. 
            </div>
            <ul>
                <li>
                    In this case the server MUST NOT include a representation of the updated
                        relationship(s

                </li>
            </ul>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 153px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">403 Forbidden</span></div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 658px; padding: 8px;">
            <div> Unsupported request to update a relationship.</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid rgb(204, 204, 204); width: 153px; padding: 8px;">
            <div>Other responses</div>
        </td>
        <td style="border: 1px solid rgb(204, 204, 204); width: 658px; padding: 8px;">
            <div>Can be used, including setting the <span
                    style="font-family: &quot;Courier New&quot;;">errors</span> attribute
            </div>
        </td>
    </tr>
    </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Turbolinks Cheatsheet]]></title>
    <link href="http://greena13.github.io/blog/2020/07/09/turbolinks-cheatsheet/"/>
    <updated>2020-07-09T07:46:02+01:00</updated>
    <id>http://greena13.github.io/blog/2020/07/09/turbolinks-cheatsheet</id>
    <content type="html"><![CDATA[<p>A cheatsheet for the often confusing behaviour of Turbolinks.</p>

<!--more-->


<h2>How it works</h2>

<p>When you follow a link, Turbolinks automatically fetches the page:</p>

<ul>
<li>Swaps in its <code>&lt;body&gt;</code></li>
<li>Merges its <code>&lt;head&gt;</code></li>
</ul>


<p>&hellip;without incurring the cost of a full page load</p>

<p>Allows the server to respond with a full HTML page.</p>

<p>Works in all modern desktop and mobile browsers. Depends on the</p>

<ul>
<li>HTML5 <code>History</code> API</li>
<li><code>Window.requestAnimationFrame</code></li>
</ul>


<p>In unsupported browsers, Turbolinks gracefully degrades to standard navigation.</p>

<h2>Installation</h2>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 412px;"/>
        <col style="width: 397px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 412px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">&lt;script&gt;</span> tag or a
                traditional concatenated JavaScript bundle
            </div>
        </td>
        <td style="width: 397px; padding: 8px; border: 1px solid;">
            <div>Automatically initializes itself when loaded</div>
        </td>
    </tr>
    <tr>
        <td style="width: 412px; padding: 8px; border: 1px solid;">
            <div>CommonJS or AMD module</div>
        </td>
        <td style="width: 397px; padding: 8px; border: 1px solid;">
            <div>Require the module, then call the provided <span
                    style="font-family: &quot;Courier New&quot;;">start()</span> function.
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 412px; padding: 8px; border: 1px solid;">
            <div><span style="font-size: 13px;">Ruby on Rails</span></div>
        </td>
        <td style="width: 397px; padding: 8px; border: 1px solid;">
            <div>Can use the <span style="font-family: &quot;Courier New&quot;;">turbolinks</span> RubyGem
                to install Turbolinks
            </div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div># Gemfile</div>
                <div>'turbolinks', '~&gt; 5.2.0’</div>
                <div><br/></div>
                <div>// application.js</div>
                <div>//= require turbolinks</div>
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h2>Troubleshooting</h2>

<p>First identify if it’s a problem with:</p>

<p><strong>Page Load</strong>:</p>

<ul>
<li>Initial page load (Uncommon - basically standard browser behaviour)</li>
</ul>


<p><strong>Advance or Replace</strong>:</p>

<ul>
<li>Displaying the preview of an application visit (flash of content or styling when navigating to pages the browser has already been to, or using the browser’s Forward button)</li>
<li>After new page has been downloaded and applied</li>
</ul>


<p><strong>Restoration</strong>:</p>

<ul>
<li>Retrieving page from cache for restore visits (using the browsers Back button)</li>
</ul>


<p>and then consult the relevant part of the table below.</p>

<h2>Cheatsheet</h2>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 104px;"/>
        <col style="width: 86px;"/>
        <col style="width: 167px;"/>
        <col style="width: 246px;"/>
        <col style="width: 211px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td colspan="2" style="width: 190px; padding: 8px; border: 1px solid;">
            <div><b>Type of visit</b></div>
        </td>
        <td style="width: 167px; padding: 8px; border: 1px solid;">
            <div><b>Page Load</b></div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div><b>Advance or Replace</b></div>
        </td>
        <td style="width: 211px; padding: 8px; border: 1px solid;">
            <div><b>Restoration</b></div>
        </td>
    </tr>
    <tr>
        <td colspan="2" style="width: 190px; padding: 8px; border: 1px solid;">
            <div>Occurs when</div>
        </td>
        <td style="width: 167px; padding: 8px; border: 1px solid;">
            <div>First page is loaded or browser is refreshed</div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div>Default: Clicking <span
                    style="font-family: &quot;Courier New&quot;;">&lt;a href&gt;</span> to the same
                domain, or calling <span style="font-family: &quot;Courier New&quot;;">Turbolinks.visit(location)</span>
            </div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><font face="Helvetica Neue"><b>Using replace instead of advance:</b></font></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>&lt;a href="http://greena13.github.io/edit" <span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">data-turbolinks-action="replace"</span>&gt;Edit&lt;/a&gt;<br/>
                </div>
                <div><br/></div>
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">Turbolinks.visit</span>("/edit",
                    { action: "replace" })
                </div>
            </div>
            <div/>
        </td>
        <td style="width: 211px; padding: 8px; border: 1px solid;">
            <div>Browser’s <b>Back</b> or <b>Forward</b> buttons</div>
            <div><br/></div>
            <div>Internal operation: don’t  annotate links or invoke <span
                    style="font-family: &quot;Courier New&quot;;">Turbolinks.visit </span>with an
                action of <span style="font-family: &quot;Courier New&quot;;">restore</span>.
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="2" style="width: 190px; padding: 8px; border: 1px solid;">
            <div>Disabling</div>
        </td>
        <td style="width: 167px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div><b>Limit Turbolinks to only a certain path across entire page</b></div>
            <div><br/></div>
            <div>Only load same-origin URLs that are prefixed with this path.</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>&lt;head&gt;</div>
                <div>  ...</div>
                <div>  <font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">&lt;meta
                    name="turbolinks-root" content="/app"&gt;</font></div>
                <div>&lt;/head&gt;</div>
            </div>
            <div><br/></div>
            <div><b>Disable for part of document</b></div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>&lt;a href="http://greena13.github.io/" <font
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">data-turbolinks="false"</font>&gt;Disabled&lt;/a&gt;
                </div>
                <div><br/></div>
                <div>&lt;div <font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">data-turbolinks="false"</font>&gt;
                </div>
                <div>  &lt;a href="http://greena13.github.io/"&gt;Disabled&lt;/a&gt;</div>
                <div>&lt;/div&gt;</div>
            </div>
            <div><br/></div>
            <div>Re-enable when ancestor has opted out:</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>&lt;div data-turbolinks="false"&gt;</div>
                <div>  &lt;a href="http://greena13.github.io/" <font
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">data-turbolinks="true"</font>&gt;Enabled&lt;/a&gt;
                </div>
                <div>&lt;/div&gt;</div>
            </div>
            <div/>
            <div><span style="font-family: Monaco;"><br/></span></div>
            <div><b>Cancel at runtime</b></div>
            <div><b><br/></b></div>
            <div>Listen to event <span style="font-family: &quot;Courier New&quot;;">turbolinks:before-visit</span>
                and use <span style="font-family: &quot;Courier New&quot;;">event.data.url</span> (or <span
                        style="font-family: &quot;Courier New&quot;;">$event.originalEvent.data.url</span>,
                when using jQuery) to decide whether to call <span
                        style="font-family: &quot;Courier New&quot;;">event.preventDefault().</span><br/>
            </div>
            <div><span style="font-family: &quot;Courier New&quot;;"><br/></span></div>
            <div><font face="Helvetica Neue">Disable showing a preview (if one is available) while
                page is being refetched (</font>still used for restoration visits):
            </div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>&lt;head&gt;</div>
                <div>  ...</div>
                <div> <font style="color: rgb(255, 38, 0); --inversion-type-color: simple;"> &lt;meta
                    name="turbolinks-cache-control" content=“no-preview"&gt;</font></div>
                <div>&lt;/head&gt;</div>
            </div>
            <div/>
        </td>
        <td style="width: 211px; padding: 8px; border: 1px solid;">
            <div><span style="font-weight: bold; font-size: 14px;">Disallowing caching</span></div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>&lt;head&gt;</div>
                <div>  ...</div>
                <div>  <font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">&lt;meta
                    name="turbolinks-cache-control" content="no-cache"&gt;</font></div>
                <div>&lt;/head&gt;</div>
            </div>
            <div><br/></div>
            <div>Force a full reload:</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>&lt;head&gt;<br/></div>
                <div>  ...</div>
                <div>  <span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">&lt;meta name="turbolinks-visit-control" content="reload"&gt;</span>
                </div>
                <div>&lt;/head&gt;</div>
            </div>
            <div/>
            <div><span style="font-family: Monaco;"><br/></span></div>
            <div><span style="font-weight: bold;">Cancel at runtime</span></div>
            <div><span style="font-weight: bold;"><br/></span></div>
            <div><font face="Helvetica Neue">Does not fire </font><span
                    style="font-family: &quot;Courier New&quot;;">turbolinks:before-visit</span><font
                    face="Helvetica Neue">, so can’t be cancelled in this way</font></div>
            <div/>
        </td>
    </tr>
    <tr>
        <td colspan="2" style="width: 190px; padding: 8px; border: 1px solid;">
            <div>Navigation</div>
        </td>
        <td style="width: 167px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div>Prevents the browser from following the link</div>
            <div><br/></div>
            <div>Uses the <span style="font-family: &quot;Courier New&quot;;">History</span> API to
                push a new entry onto the browser’s history stack (changes current URL): <span
                        style="font-family: &quot;Courier New&quot;;"><font
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">history.pushState</font></span>.
            </div>
            <div><br/></div>
            <div>Request:</div>
            <div><br/></div>
            <div>Always requests the new page using <span
                    style="font-family: &quot;Courier New&quot;;">XMLHttpRequest</span></div>
        </td>
        <td style="width: 211px; padding: 8px; border: 1px solid;">
            <div>Discards the topmost history entry: <span
                    style="font-family: &quot;Courier New&quot;;"><font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">history.replaceState</font></span>
            </div>
        </td>
    </tr>
    <tr>
        <td colspan="2" style="width: 190px; padding: 8px; border: 1px solid;">
            <div>Scroll Position</div>
        </td>
        <td style="width: 167px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div>If <span style="font-family: &quot;Courier New&quot;;">location</span> includes an
                anchor, attempts to scroll to the anchored element. Otherwise, it will scroll to the
                top of the page.
            </div>
        </td>
        <td style="width: 211px; padding: 8px; border: 1px solid;">
            <div>Saves scroll position before navigating away and automatically returns to this saved
                position on restoration visits.
            </div>
        </td>
    </tr>
    <tr>
        <td style="width: 190px; padding: 8px; border: 1px solid;" colspan="2">
            <div>Events &amp; Event listeners</div>
        </td>
        <td style="width: 167px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">turbolinks:load</span><span
                    style="font-family: &quot;Helvetica Neue&quot;;"> is fired i</span>n addition to
                standard:
            </div>
            <ul>
                <li>
                    <span style="font-family: &quot;Courier New&quot;;">window.onload</span>
                    
                </li>
                <li>
                    <span style="font-family: &quot;Courier New&quot;;"> DOMContentLoaded</span>
                    
                </li>
                <li>
                    
                        <a href="evernote:///view/117942769/s638/c01e60d5-cf95-406b-8b86-a50daa972f6b/c01e60d5-cf95-406b-8b86-a50daa972f6b/">jQuery's </a><a
                            href="evernote:///view/117942769/s638/c01e60d5-cf95-406b-8b86-a50daa972f6b/c01e60d5-cf95-406b-8b86-a50daa972f6b/"
                            style="font-family: &quot;Courier New&quot;;">ready</a>
                </li>
            </ul>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div><font face="Helvetica Neue">Can’t depend on a full page load to reset your
                environment every time you navigate.</font></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div><font face="Helvetica Neue"><b>Handle before page change</b></font></div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>document<font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.addEventListener("turbolinks:before-visit"</font>,
                    function() {
                </div>
                <div>  // ...</div>
                <div>})</div>
            </div>
            <div/>
            <div><font face="Helvetica Neue"><b><br/></b></font></div>
            <div><b>Handle after page change</b></div>
            <div><b><br/></b></div>
            <div><span style="font-family: &quot;Courier New&quot;;">turbolinks:load</span> is fired
                again after every page change
            </div>
            <ul>
                <li>
                    Can be used as <span style="font-family: &quot;Courier New&quot;;">DOMContentLoaded</span> replacement
                    
                </li>
                <li>
                    Don’t use to add event listeners directly to elements on the page body: Use
                        event delegation to register event listeners once on <span
                                style="font-family: &quot;Courier New&quot;;">document</span> or <span
                                style="font-family: &quot;Courier New&quot;;">window</span>.
                    
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>document<span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.addEventListener("turbolinks:load"</span>,
                    function() {<br/></div>
                <div>  // ...</div>
                <div>})</div>
            </div>
            <div/>
            <div><span style="font-family: Monaco;"><br/></span></div>
            <div><a href="https://github.com/turbolinks/turbolinks#full-list-of-events"><font
                    face="Helvetica Neue">Full list of events</font></a></div>
        </td>
        <td style="width: 211px; padding: 8px; border: 1px solid;">
            <div>Copies the page to cache using <span style="font-family: &quot;Courier New&quot;;">cloneNode(true)</span>,
                so when it’s returned from the cache, attached event listeners and associated data are
                discarded.
            </div>
            <div><br/></div>
            <div><span style="font-weight: bold;">Handle cache push</span></div>
            <div><br/></div>
            <div>E.g. Reset forms, Collapse expanded UI elements, Tear down third-party widgets</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>document<font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.addEventListener("turbolinks:before-cache"</font>,
                    function() {
                </div>
                <div>  // ...</div>
                <div>})</div>
            </div>
            <div/>
            <div><span style="font-weight: bold;"><br/></span></div>
            <div><span style="font-weight: bold;">Handle cache pop</span></div>
            <div><br/></div>
            <div>Turbolinks adds a <span style="font-family: &quot;Courier New&quot;;">data-turbolinks-preview</span>
                attribute to the <span
                        style="font-family: &quot;Courier New&quot;;">&lt;html&gt;</span> element when
                it displays a preview from cache.
            </div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>if (<font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">document.documentElement.hasAttribute("data-turbolinks-preview")</font>)
                    {
                </div>
                <div>  // Turbolinks is displaying a preview</div>
                <div>}</div>
            </div>
            <div/>
            <div/>
        </td>
    </tr>
    <tr>
        <td rowspan="5" style="height: 164px; width: 104px; padding: 8px; border: 1px solid;">
            <div>Rendering</div>
        </td>
        <td style="width: 86px; padding: 8px; border: 1px solid;">
            <div>General</div>
        </td>
        <td style="width: 167px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div>Will render a <span
                    style="font-weight: bold; color: rgb(255, 38, 0); --inversion-type-color: simple;">preview of the page</span><span
                    style="font-weight: bold;"/>from cache immediately after the visit starts, if
                possible
            </div>
        </td>
        <td style="width: 211px; padding: 8px; border: 1px solid;">
            <div>Renders <span
                    style="font-weight: bold; color: rgb(255, 38, 0); --inversion-type-color: simple;">copy of the page from cache</span>
                without making a request if possible<br/></div>
            <div/>
            <div/>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 86px; padding: 8px;">
            <div><font face="Courier New">window</font><font face="Helvetica Neue"> and </font><font
                    face="Courier New">document</font><font face="Helvetica Neue"> objects</font>
            </div>
        </td>
        <td style="width: 167px; padding: 8px; border: 1px solid;">
            <div>Reloaded from clean state</div>
        </td>
        <td colspan="2" style="width: 457px; padding: 8px; border: 1px solid;">
            <div><span
                    style="font-weight: bold; color: rgb(255, 38, 0); --inversion-type-color: simple;"><font
                    face="Helvetica Neue">Persisted (No change)</font></span></div>
            <div><font face="Helvetica Neue"><br/></font></div>
            <div><font face="Helvetica Neue">Retain their state across page changes, along with other
                objects you leave in memory.</font></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 86px; padding: 8px;">
            <div><font face="Courier New">&lt;html&gt;</font></div>
        </td>
        <td style="width: 167px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div><b><font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">Persisted
                (No change)</font></b></div>
            <div><b><font style="color: rgb(255, 38, 0); --inversion-type-color: simple;"><br/></font></b>
            </div>
            <div>Adds a <span
                    style="font-family: &quot;Courier New&quot;;">data-turbolinks-preview</span>
                attribute when displaying a preview from cache
            </div>
        </td>
        <td style="height: 92px; width: 211px; padding: 8px; border: 1px solid;" rowspan="3">
            <div><span style="font-weight: bold;">Replaced</span></div>
            <div><br/></div>
            <div><span style="font-size: 14px; font-weight: bold;">Merge current document contents with cached document</span>
            </div>
            <div><br/></div>
            <div>Mark elements as permanent so they’re not <span style="-en-paragraph:true;">reverted
</span> when the user navigates back (e.g. shopping cart counter):
            </div>
            <ul>
                <li>
                    Elements must have an id
                </li>
                <li>
                    Before each render, Turbolinks matches all permanent elements by id and
                        transfers them from the original page to the new page, preserving their data
                        and event listeners.
                    
                </li>
            </ul>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>&lt;div <font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">id="cart-counter"
                    data-turbolinks-permanent</font>&gt;1 item&lt;/div&gt;
                </div>
            </div>
            <div/>
            <div/>
            <div><b><br/></b></div>
            <div/>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 86px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">&lt;head&gt;</span></div>
        </td>
        <td rowspan="2" style="height: 56px; width: 167px; padding: 8px; border: 1px solid;">
            <div>Browsers loads and evaluates any <span style="font-family: &quot;Courier New&quot;;">&lt;script&gt;</span>
                elements 
            </div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div><b><font
                    style="color: rgb(255, 38, 0); --inversion-type-color: simple;">Merged</font></b>
            </div>
            <div><br/></div>
            <div>Appends any new <span
                    style="font-family: &quot;Courier New&quot;;">&lt;script&gt;</span> elements in
                the new page’s <span style="font-family: &quot;Courier New&quot;;">&lt;head&gt;</span>
                which aren’t in the current one (causing them to be loaded and evaluated) 
            </div>
            <div><br/></div>
            <div>Load your application’s JS bundle using <span
                    style="font-family: &quot;Courier New&quot;;">&lt;script&gt;</span> elements in
                the <span style="font-family: &quot;Courier New&quot;;">&lt;head&gt;</span> of your
                document to avoid reloading them with every page change.<br/></div>
            <ul>
                <li>
                    Use <span
                            style="font-family: &quot;Courier New&quot;;">&lt;script defer&gt;</span><font
                            face="Helvetica Neue"> instead of putting scripts at the end
                        of </font><span
                            style="font-family: &quot;Courier New&quot;;">&lt;body&gt;</span>
                </li>
            </ul>
            <div><br/></div>
            <div><span
                    style="font-size: 14px; font-weight: bold;">Force page reload if assets change</span>
            </div>
            <div><br/></div>
            <div>Track asset URLs in <span
                    style="font-family: &quot;Courier New&quot;;">&lt;head&gt;</span> between pages
                and automatically issue a full reload if they change
            </div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>&lt;head&gt;<br/></div>
                <div>  ...</div>
                <div>  &lt;link rel="stylesheet" href="http://greena13.github.io/application-258e88d.css"<span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;"> data-turbolinks-track="reload"</span>&gt;
                </div>
                <div>  &lt;script src="http://greena13.github.io/application-cbd3cd4.js" <span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">data-turbolinks-track="reload"</span>&gt;&lt;/script&gt;
                </div>
                <div>&lt;/head&gt;</div>
            </div>
            <div/>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 86px; padding: 8px;">
            <div><span style="font-family: &quot;Courier New&quot;;">&lt;body&gt;</span></div>
        </td>
        <td style="width: 246px; padding: 8px; border: 1px solid;">
            <div>Replaced</div>
            <div><br/></div>
            <div>Evaluates <span style="font-family: &quot;Courier New&quot;;">&lt;script&gt;</span>
                elements in a page’s <span
                        style="font-family: &quot;Courier New&quot;;">&lt;body&gt;</span> each time it
                renders the page.
            </div>
            <div><br/></div>
            <div>Use inline body scripts to:</div>
            <ul>
                <li>
                    Set up per-page JavaScript state
                </li>
                <li>
                    Bootstrap client-side models
                </li>
            </ul>
            <div><br/></div>
            <div>Don’t use to (use the <span style="font-family: &quot;Courier New&quot;;">turbolinks:load</span>
                event instead):
            </div>
            <ul>
                <li>
                    Install behavior, or
                </li>
                <li>
                    Perform more complex operations when the page changes
                </li>
            </ul>
            <div><br/></div>
            <div>Annotate <span style="font-family: &quot;Courier New&quot;;">&lt;script&gt;</span>
                elements with <span style="font-family: &quot;Courier New&quot;;">data-turbolinks-eval="false"</span>
                if you do not want Turbolinks to evaluate them after rendering.
            </div>
            <ul>
                <li>
                    Won’t prevent your browser from evaluating scripts on the initial page
                        load.
                    
                </li>
            </ul>
            <div/>
        </td>
    </tr>
    </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CanCanCan Cheatsheet]]></title>
    <link href="http://greena13.github.io/blog/2019/07/12/cancancan-cheatsheet/"/>
    <updated>2019-07-12T08:14:48+01:00</updated>
    <id>http://greena13.github.io/blog/2019/07/12/cancancan-cheatsheet</id>
    <content type="html"><![CDATA[<p>A breakdown of how to define and check abilities with CanCanCan, with an opinionated set of best practices based on experience.</p>

<!--more-->


<h2>Defining abilities</h2>

<h3>General Best practices</h3>

<h4>No access by default</h4>

<p>Give abilities as you discover you need them</p>

<ul>
<li>Don’t define them upfront because you think you’ll need them</li>
<li>Always use can? to enable a feature - never use cannot? to take it away</li>
</ul>


<p>Only use the standard <code>index</code>, <code>show</code>, <code>create</code>, <code>update</code>, <code>destroy</code> (edit is subset of updated and new is a subset of create)</p>

<h4>Your ability file is not somewhere to be DRY; being explicit and clear</h4>

<p>Don’t use <code>manage</code> (its too permissive)</p>

<p>Don’t define aliases - always be explicit and granular:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Bad</span>
</span><span class='line'><span class="n">alias_action</span> <span class="ss">:create</span><span class="p">,</span> <span class="ss">:read</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:crud</span>
</span><span class='line'><span class="n">can</span> <span class="ss">:crud</span><span class="p">,</span> <span class="no">User</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Good</span>
</span><span class='line'><span class="n">can</span> <span class="o">[</span><span class="ss">:create</span><span class="p">,</span> <span class="ss">:read</span><span class="p">,</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span><span class="p">,</span> <span class="no">User</span>
</span></code></pre></td></tr></table></div></figure>


<p>Define permissions for one resource at a time.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Bad: Update or destroy both articles and comments</span>
</span><span class='line'><span class="n">can</span> <span class="o">[</span><span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="no">Article</span><span class="p">,</span> <span class="no">Comment</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Good</span>
</span><span class='line'><span class="n">can</span> <span class="o">[</span><span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span><span class="p">,</span> <span class="no">Article</span>
</span><span class='line'><span class="n">can</span> <span class="o">[</span><span class="ss">:update</span><span class="p">,</span> <span class="ss">:destroy</span><span class="o">]</span><span class="p">,</span> <span class="no">Comment</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Syntax</h3>

<h4>Hash Conditions</h4>

<p>Preferred syntax (used most consistently without hidden side-effects between all 3 methods)
* can? &amp; authorize!: Keys match methods on instance, which must return values equal to the hash&rsquo;s values
* accessible_by: Generates a LEFT JOIN to query conditions on associated records (so almost anything you can pass to a hash of conditions in Active Record will work)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Project</span><span class="p">,</span> <span class="ss">active</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">user_id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can’t pass model instances into the hash - you must use their id instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Won’t work</span>
</span><span class='line'><span class="n">can</span> <span class="ss">:manage</span><span class="p">,</span> <span class="no">Project</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">groups</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Will work</span>
</span><span class='line'><span class="n">can</span> <span class="ss">:manage</span><span class="p">,</span> <span class="no">Project</span><span class="p">,</span> <span class="ss">group</span><span class="p">:</span> <span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">group_ids</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Must use lower-level attributes rather than your existing scopes that wrap them:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Article</span><span class="p">,</span> <span class="ss">is_published</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can use a range:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Project</span><span class="p">,</span> <span class="ss">priority</span><span class="p">:</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Defining conditions on associations:
* Will issue a query that performs an <code>LEFT JOIN</code> to query conditions on associated records</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Project</span><span class="p">,</span> <span class="ss">category</span><span class="p">:</span> <span class="p">{</span> <span class="ss">visible</span><span class="p">:</span> <span class="kp">true</span> <span class="p">}</span>
</span><span class='line'><span class="n">can</span> <span class="ss">:manage</span><span class="p">,</span> <span class="no">Part</span><span class="p">,</span> <span class="ss">service</span><span class="p">:</span> <span class="p">{</span> <span class="ss">account</span><span class="p">:</span> <span class="p">{</span> <span class="ss">user</span><span class="p">:</span> <span class="p">{</span> <span class="nb">id</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span> <span class="p">}</span> <span class="p">}</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Blocks</h4>

<p>Use only if you need to pass additional context or can’t express the logic using hashes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="ss">:create</span><span class="p">,</span> <span class="no">Project</span> <span class="k">do</span> <span class="o">|</span><span class="n">project</span><span class="p">,</span> <span class="n">remote_ip</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">can?</span> <span class="ss">:create</span><span class="p">,</span> <span class="no">Project</span><span class="p">,</span> <span class="n">request</span><span class="o">.</span><span class="n">remote_ip</span>
</span></code></pre></td></tr></table></div></figure>


<p>Only evaluated when an actual instance object is present</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="ss">:update</span><span class="p">,</span> <span class="no">Project</span> <span class="k">do</span> <span class="o">|</span><span class="n">project</span><span class="o">|</span>
</span><span class='line'>  <span class="n">project</span><span class="o">.</span><span class="n">priority</span> <span class="o">&lt;</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Scopes &amp; Raw SQL</h4>

<p>If you need an operator other than the equality one, or for other complex cases, you can provide a scope or a Raw SQL segment.</p>

<p>You must <strong>always also define a block</strong>, or you get an error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Article</span><span class="p">,</span> <span class="no">Article</span><span class="o">.</span><span class="n">published_recently</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Raises exception:</span>
</span><span class='line'><span class="c1"># The can? and cannot? call cannot be used with a raw sql &#39;can&#39; definition.</span>
</span><span class='line'><span class="c1"># The checking code cannot be determined for :read #&lt;Article ..&gt;.</span>
</span><span class='line'><span class="n">can?</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Article</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>When you also define a block:</p>

<ul>
<li>Block is used when <code>can?</code> and <code>authorize!</code> are passed an instance</li>
<li>Scope or Raw SQL segment is use when <code>accessible_by</code> is called</li>
<li>Neither are used when when <code>can?</code> and <code>authorize!</code> are passed a class (only matches on action and class type)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Article</span><span class="p">,</span> <span class="no">Article</span><span class="o">.</span><span class="n">published_recently</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span>
</span><span class='line'>  <span class="n">article</span><span class="o">.</span><span class="n">created_at</span> <span class="o">&gt;</span> <span class="no">DateTime</span><span class="o">.</span><span class="n">now</span> <span class="o">-</span> <span class="mi">3</span><span class="o">.</span><span class="n">days</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Works fine</span>
</span><span class='line'><span class="n">can?</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Article</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a SQL segment:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="ss">:update</span><span class="p">,</span> <span class="no">Project</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;priority &lt; ?&quot;</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">project</span><span class="o">|</span>
</span><span class='line'>  <span class="n">project</span><span class="o">.</span><span class="n">priority</span> <span class="o">&lt;</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Operators</h4>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 62px;"/>
        <col style="width: 274px;"/>
        <col style="width: 294px;"/>
        <col style="width: 93px;"/>
        <col style="width: 88px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td rowspan="2" style="height: 56px; width: 62px; padding: 8px; border: 1px solid;">
            <div>Operator</div>
        </td>
        <td rowspan="2" style="height: 56px; width: 274px; padding: 8px; border: 1px solid;">
            <div>Actions</div>
        </td>
        <td colspan="3" style="width: 475px; padding: 8px; border: 1px solid;">
            <div>Conditions</div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 294px; padding: 8px;">
            <div>Hash</div>
        </td>
        <td style="width: 93px; padding: 8px; border: 1px solid;">
            <div>Block</div>
        </td>
        <td style="width: 88px; padding: 8px; border: 1px solid;">
            <div>Raw SWL</div>
        </td>
    </tr>
    <tr>
        <td style="width: 62px; padding: 8px; border: 1px solid;">
            <div>AND</div>
        </td>
        <td style="width: 274px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>can <font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">[</font>:show<font
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">,</font>
                    :index<font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">]</font>
                </div>
            </div>
            <div/>
        </td>
        <td style="width: 294px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>can :read, Article, <span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">author_id: @user.id, is_published: false</span><br/>
                </div>
                <div><br clear="none"/></div>
                <div>WHERE ( `articles`.`author_id` = 97 AND `articles`.`is_published` = 0 )</div>
            </div>
        </td>
        <td rowspan="3" style="height: 92px; width: 93px; padding: 8px; border: 1px solid;">
            <div>Normal Ruby syntax</div>
            <div/>
        </td>
        <td rowspan="3" style="height: 92px; width: 88px; padding: 8px; border: 1px solid;">
            <div>Normal SQL syntax</div>
            <div/>
        </td>
    </tr>
    <tr>
        <td style="width: 62px; padding: 8px; border: 1px solid;">
            <div>OR</div>
        </td>
        <td style="width: 274px; padding: 8px; border: 1px solid;">
            <div>Read released or preview:</div>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>can :read, Project, released: true</div>
                <div><font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">can :read,
                    Project, preview: true</font></div>
            </div>
            <div/>
        </td>
        <td rowspan="2" style="height: 56px; width: 294px; padding: 8px; border: 1px solid;">
            <div>Not possible</div>
            <div/>
        </td>
    </tr>
    <tr>
        <td style="width: 62px; padding: 8px; border: 1px solid;">
            <div>NOT</div>
        </td>
        <td style="width: 274px; padding: 8px; border: 1px solid;">
            <div>Not recommended - always give abilities, don’t take them away</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div><font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">cannot</font>
                    :destroy, Project
                </div>
            </div>
            <div/>
        </td>
    </tr>
    <tr>
        <td style="width: 62px; padding: 8px; border: 1px solid;">
            <div>Precedence</div>
        </td>
        <td style="width: 274px; padding: 8px; border: 1px solid;">
            <div>An ability rule will override a previous one:</div>
            
            <div>
                <span>If they were reversed,</span>
                <span>cannot :destroy</span>
                <span> would be overridden by </span>
                <span>can :manage</span>
                <span>.</span>
            </div>
                                        
            <div/>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>can :manage, Project</div>
                <div>cannot :destroy, Project</div>
            </div>
            <div/>
        </td>
        <td style="width: 294px; padding: 8px; border: 1px solid;">
            <div>Equal</div>
            <div/>
        </td>
        <td style="width: 93px; padding: 8px; border: 1px solid;">
            <div>Normal Ruby precedence</div>
        </td>
        <td style="width: 88px; padding: 8px; border: 1px solid;">
            <div>Depends on your database</div>
        </td>
    </tr>
    </tbody>
</table>


<h4>Defining custom logic</h4>

<p>Useful when permissions are defined outside of Ruby such as when defining Abilities in Database
* Block will be triggered for every <code>can?</code> check, even when only a class is used in the check.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">can</span> <span class="k">do</span> <span class="o">|</span><span class="n">action</span><span class="p">,</span> <span class="n">subject_class</span><span class="p">,</span> <span class="n">subject</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Merging ability files</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ApplicationController.rb</span>
</span><span class='line'><span class="k">def</span> <span class="nf">current_ability</span>
</span><span class='line'>  <span class="vi">@current_ability</span> <span class="o">||=</span> <span class="no">ReadAbility</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="no">WriteAbility</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">current_user</span><span class="p">))</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Checking abilities</h2>

<h3>General best practices</h3>

<p>Never use <code>load_and_authorize_resource</code> or <code>load_resource</code>, instead use the more explicit <code>authorize!</code> call for readability and flexibiltiy</p>

<p>Use <code>check_authorization</code> to ensure all controller actions are authorized:
* Adds an <code>after_filter</code> to ensure <code>authorize!</code> is called for every controller action</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">check_authorization</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">skip_authorization_check</span> <span class="ss">:only</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">check_authorization</span> <span class="k">unless</span><span class="p">:</span> <span class="ss">:admin_subdomain?</span> <span class="c1"># Only skips checking authorization - still does the authorization</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">admin_subdomain?</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="n">subdomain</span> <span class="o">==</span> <span class="s2">&quot;admin&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>CanCanCan methods</h3>

<p>There are 3 methods for checking a user&rsquo;s abilities:</p>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 122px;"/>
        <col style="width: 227px;"/>
        <col style="width: 205px;"/>
        <col style="width: 250px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td rowspan="1" style="width: 122px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 227px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">can?</span></div>
        </td>
        <td rowspan="1" style="width: 205px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">authorize!</span></div>
        </td>
        <td rowspan="1" style="width: 250px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">accessible_by</span></div>
        </td>
    </tr>
    <tr>
        <td rowspan="1" style="width: 122px; padding: 8px; border: 1px solid;">
            <div>For</div>
        </td>
        <td colspan="2" style="width: 432px; padding: 8px; border: 1px solid;">
            <div>Checking user has ability to do an action on a resource</div>
        </td>
        <td rowspan="1" style="width: 250px; padding: 8px; border: 1px solid;">
            <div>Filtering a collection down to those resources a user has the ability to perform an action on
                (Default: <span style="font-family: &quot;Courier New&quot;;">:index</span>)
            </div>
        </td>
    </tr>
    <tr>
        <td rowspan="1" style="width: 122px; padding: 8px; border: 1px solid;">
            <div>Input</div>
        </td>
        <td colspan="2" style="width: 432px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">(action, class|instance[, additional_block_args])</span>
            </div>
        </td>
        <td rowspan="1" style="width: 250px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">accessible_by(current_ability[, action = :index])</span>
            </div>
        </td>
    </tr>
    <tr>
        <td rowspan="1" style="width: 122px; padding: 8px; border: 1px solid;">
            <div>Output</div>
        </td>
        <td style="width: 227px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Returns</span><span
                    style="font-family: &quot;Courier New&quot;;"> true/false</span></div>
        </td>
        <td rowspan="1" style="width: 205px; padding: 8px; border: 1px solid;">
            <div>Throws <span style="font-family: &quot;Courier New&quot;;">CanCan::AccessDenied</span>
                exception
            </div>
        </td>
        <td rowspan="1" style="width: 250px; padding: 8px; border: 1px solid;">
            <div>Returns scoped collection</div>
        </td>
    </tr>
    <tr>
        <td rowspan="1" style="width: 122px; padding: 8px; border: 1px solid;">
            <div>Application</div>
        </td>
        <td style="width: 227px; padding: 8px; border: 1px solid;">
            <div><span
                    style="font-family: &quot;Helvetica Neue&quot;;">Views (for toggling UI elements)</span>
            </div>
        </td>
        <td rowspan="1" style="width: 205px; padding: 8px; border: 1px solid;">
            <div>Controller actions (for rescuing exceptions and rendering unauthorized)</div>
        </td>
        <td rowspan="1" style="width: 250px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">index</span> action for filtering
                resources list
            </div>
            <div><br clear="none"/></div>
            <div>Elsewhere for filtering associations</div>
        </td>
    </tr>
    </tbody>
</table>


<p>Abilities are matched on up to 3 different attributes:</p>

<ul>
<li>An action type</li>
<li>A target or subject class</li>
<li>A set of conditions (optional, if defined)</li>
</ul>


<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 111px;"/>
        <col style="width: 77px;"/>
        <col style="width: 73px;"/>
        <col style="width: 114px;"/>
        <col style="width: 156px;"/>
        <col style="width: 288px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 111px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 77px; padding: 8px; border: 1px solid;">
            <div>Required for Definition</div>
        </td>
        <td colspan="4" style="width: 631px; padding: 8px; border: 1px solid;">
            <div>Required to match for check to pass</div>
        </td>
    </tr>
    <tr>
        <td style="width: 111px; padding: 8px; border: 1px solid;">
            <div>Action Type</div>
        </td>
        <td style="width: 77px; padding: 8px; border: 1px solid;">
            <div>Yes</div>
        </td>
        <td colspan="4" style="width: 631px; padding: 8px; border: 1px solid;">
            <div>Always</div>
        </td>
    </tr>
    <tr>
        <td style="width: 111px; padding: 8px; border: 1px solid;">
            <div>Target or Subject Type</div>
        </td>
        <td style="width: 77px; padding: 8px; border: 1px solid;">
            <div>Yes</div>
        </td>
        <td colspan="4" style="width: 631px; padding: 8px; border: 1px solid;">
            <div>Always</div>
        </td>
    </tr>
    <tr>
        <td rowspan="3" style="height: 92px; width: 111px; padding: 8px; border: 1px solid;">
            <div>Conditions</div>
            <div><br/></div>
            <div><br/></div>
        </td>
        <td rowspan="3" style="height: 92px; width: 77px; padding: 8px; border: 1px solid;">
            <div>No</div>
            <div><br/></div>
            <div><br/></div>
        </td>
        <td rowspan="1" style="width: 73px; padding: 8px; border: 1px solid;">
            <div>Target</div>
        </td>
        <td rowspan="1" style="width: 114px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">can?</span></div>
        </td>
        <td rowspan="1" style="width: 156px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">authorize!</span></div>
        </td>
        <td rowspan="1" style="width: 288px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">accessible_by</span></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 73px; padding: 8px;">
            <div>Instance</div>
        </td>
        <td colspan="2" rowspan="1" style="width: 270px; padding: 8px; border: 1px solid;">
            <div><span style="color: rgb(41, 41, 41); --inversion-type-color: simple;">Matches:</span><br/>
            </div>
            <ul>
                <li>
                    <font
                            style="color: rgb(255, 38, 0); --inversion-type-color: simple;">Block</font><font
                            style="color: rgb(41, 41, 41); --inversion-type-color: simple;"> if defined
                        (evaluate to true/false)</font>
                </li>
            </ul>
            <ul>
                <li>
                    <font
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">Hash</font><span
                        style="color: rgb(41, 41, 41); --inversion-type-color: simple;"> (if no block defined) Compares values of condition hash against those returned by calling the methods on the target with the same name as the corresponding condition hash key</span>
                </li>
            </ul>
            <div><span style="color: rgb(41, 41, 41); --inversion-type-color: simple;"><br/></span></div>
            <div><span style="color: rgb(41, 41, 41); --inversion-type-color: simple;">Ignores: </span></div>
            <ul>
                <li>
                    <span style="color: rgb(41, 41, 41); --inversion-type-color: simple;">Raw SQL or Scope (</span><span
                            style="color: rgb(41, 41, 41); --inversion-type-color: simple;">Throws error if block isn’t also defined)</span>
                </li>
            </ul>
        </td>
        <td style="width: 288px; padding: 8px; border: 1px solid;">
            <div><font style="color: rgb(110, 110, 110); --inversion-type-color: simple;">Not
                Applicable</font></div>
        </td>
    </tr>
    <tr>
        <td style="border: 1px solid; width: 73px; padding: 8px;">
            <div>Class</div>
        </td>
        <td colspan="2" style="width: 270px; padding: 8px; border: 1px solid;">
            <div><font style="color: rgb(110, 110, 110); --inversion-type-color: simple;">Ignored. Only ever
                matches on action ant target.</font></div>
            <div><font style="color: rgb(110, 110, 110); --inversion-type-color: simple;"><br/></font></div>
            <div><font style="color: rgb(110, 110, 110); --inversion-type-color: simple;">(Raw SQL or scope
                still throws error if block isn’t also defined)</font></div>
        </td>
        <td rowspan="1" style="width: 288px; padding: 8px; border: 1px solid;">
            <div><span style="color: rgb(41, 41, 41); --inversion-type-color:  simple;">Matches:</span></div>
            <ul>
                <li>
                    <span style="--inversion-type-color:  simple; color: rgb(41, 41, 41);"><font
                            style="color: rgb(255, 38, 0); --inversion-type-color: simple;">Raw SQL or Scope</font></span>:
                        Overrides other scopes you may have applied before calling  <span
                                style="font-family: &quot;Courier New&quot;;">accessible_by </span>- must use
                        as first scope
                </li>
                <li>
                    <font style="color: rgb(255, 38, 0); --inversion-type-color: simple;">Hash</font> (if
                        Raw SQL or Scope not defined) Constructs a<span
                                style="font-family: &quot;Courier New&quot;;"> LEFT JOIN </span>with them
                </li>
            </ul>
            <div><br/></div>
            <div>Ignores:</div>
            <ul>
                <li>
                    Block
                </li>
            </ul>
        </td>
    </tr>
    </tbody>
</table>


<h3>Usage examples</h3>

<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 77px;"/>
        <col style="width: 310px;"/>
        <col style="width: 250px;"/>
        <col style="width: 179px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td style="width: 77px; padding: 8px; border: 1px solid;">
            <div><br/></div>
        </td>
        <td style="width: 310px; padding: 8px; border: 1px solid;">
            <div>authorize!</div>
        </td>
        <td style="width: 250px; padding: 8px; border: 1px solid;">
            <div>can?</div>
        </td>
        <td style="width: 179px; padding: 8px; border: 1px solid;">
            <div>accessible_by</div>
        </td>
    </tr>
    <tr>
        <td style="width: 77px; padding: 8px; border: 1px solid;">
            <div>index</div>
        </td>
        <td style="width: 310px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>authorize! :index, Post</div>
                <div><br/></div>
                <div>@posts = Post.accessible_by(current_ability)</div>
            </div>
            <div/>
        </td>
        <td style="width: 250px; padding: 8px; border: 1px solid;">
            <div>Call on class (instance doesn’t make sense):</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>- if can? :index, Post</div>
                <div>  = link_to ’New post’, new_post_path</div>
            </div>
            <div/>
            <div/>
        </td>
        <td style="width: 179px; padding: 8px; border: 1px solid;">
            <div>Always <font face="Courier New">authorize!</font> first </div>
            <div><br/></div>
            <div>Always use as the first scope you apply</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>authorize! :index, Post</div>
                <div><br/></div>
                <div>@posts = Post.accessible_by(current_ability)</div>
            </div>
            <div/>
        </td>
    </tr>
    <tr>
        <td style="width: 77px; padding: 8px; border: 1px solid;">
            <div>show</div>
        </td>
        <td style="width: 310px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>@post = Post.find(params[:id])</div>
                <div><br/></div>
                <div>authorize! :show, @post</div>
            </div>
            <div/>
        </td>
        <td style="width: 250px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>- @post.each do |post|<br/></div>
                <div>  - if can? :show, post</div>
            </div>
            <div/>
        </td>
        <td style="width: 179px; padding: 8px; border: 1px solid;">
            <div>Can be used for scoping parent resources</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>@subject = Subject.accessible_by(current_ability,:show)</div>
                <div><br/></div>
                <div>@article = @subject.articles.find(params[:id])</div>
                <div><br/></div>
                <div>authorize! :show, @article</div>
            </div>
            <div/>
        </td>
    </tr>
    <tr>
        <td style="width: 77px; padding: 8px; border: 1px solid;">
            <div>create</div>
        </td>
        <td style="width: 310px; padding: 8px; border: 1px solid;">
            <div>Assign attributes before validating (but save after)</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>@post = Post.new(allowed_create_attributes)</div>
                <div><br/></div>
                <div>authorize! :create, @post</div>
            </div>
            <div/>
        </td>
        <td style="width: 250px; padding: 8px; border: 1px solid;">
            <div>Define new instance with known values:</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>- if can?, :create, Post.new(subject: @subject, author: current_user)</div>
            </div>
            <div/>
        </td>
        <td style="width: 179px; padding: 8px; border: 1px solid;">
            <div>Not applicable</div>
        </td>
    </tr>
    <tr>
        <td style="width: 77px; padding: 8px; border: 1px solid;">
            <div>update</div>
        </td>
        <td style="width: 310px; padding: 8px; border: 1px solid;">
            <div>Check requirements for:</div>
            <div>* the current values of the resource using the hash<br/></div>
            <div>* new values using  the context<br/></div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>can :update, Post, user_id: user.id do |post, new_attributes|</div>
                <div>  # User is now allowed to update their own posts, but not change who the post is
                    by
                </div>
                <div>  post.user_id == user.id &amp;&amp; new_attributes[:user_id] == post.user_id</div>
                <div>end</div>
                <div><br/></div>
                <div>@post = Post.find(params[:id])</div>
                <div><br/></div>
                <div>authorize! :update, @post, allowed_update_params</div>
            </div>
            <div/>
        </td>
        <td style="width: 250px; padding: 8px; border: 1px solid;">
            <div>For generic update:</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>- if can?, :update, @post</div>
                <div>  = link_to ‘Update’, edit_post_path(@post)</div>
            </div>
            <div/>
            <div><br/></div>
            <div>For sub-update:</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>- if can?, :update, @post, { archived: true }</div>
                <div>  = link_to ‘Archive’, archive_post_path(@post)</div>
            </div>
            <div/>
            <div/>
        </td>
        <td style="width: 179px; padding: 8px; border: 1px solid;">
            <div>Useful for rendering a list of resources that the user can bulk update:</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>@articles = Article.accessible_by(current_ability, :update)</div>
            </div>
            <div/>
        </td>
    </tr>
    <tr>
        <td style="width: 77px; padding: 8px; border: 1px solid;">
            <div>destroy</div>
        </td>
        <td style="width: 310px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>@post = Post.find(params[:id])</div>
                <div><br/></div>
                <div>authorize! :destroy, @post</div>
            </div>
            <div/>
        </td>
        <td style="width: 250px; padding: 8px; border: 1px solid;">
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>- if can?, :destroy, @post</div>
                <div>  = link_to ‘Delete’, post_path(@post), method: :delete</div>
            </div>
            <div/>
        </td>
        <td style="width: 179px; padding: 8px; border: 1px solid;">
            <div>Useful for rendering a list of resources that the user can bulk destroy:</div>
            <div><br/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>@articles = Article.accessible_by(current_ability, :destroy)</div>
            </div>
            <div/>
        </td>
    </tr>
    </tbody>
</table>


<h2>Handling failures</h2>

<p>For unauthorized requests, return <code>404</code> rather than <code>302</code> to avoid leaking information. However if you do want to render unauthorized:</p>

<p>Custom message to include in the exception thrown:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">authorize!</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Article</span><span class="p">,</span> <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">&quot;Unable to read this article.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Raising exception manually:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">raise</span> <span class="no">CanCan</span><span class="o">::</span><span class="no">AccessDenied</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Not authorized!&quot;</span><span class="p">,</span> <span class="ss">:read</span><span class="p">,</span> <span class="no">Article</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rescuing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApplicationController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">rescue_from</span> <span class="no">CanCan</span><span class="o">::</span><span class="no">AccessDenied</span> <span class="k">do</span> <span class="o">|</span><span class="n">exception</span><span class="o">|</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">head</span> <span class="ss">:forbidden</span> <span class="p">}</span>
</span><span class='line'>      <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{</span> <span class="n">redirect_to</span> <span class="n">main_app</span><span class="o">.</span><span class="n">root_url</span><span class="p">,</span> <span class="ss">:alert</span> <span class="o">=&gt;</span> <span class="n">exception</span><span class="o">.</span><span class="n">message</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">exception</span><span class="o">.</span><span class="n">action</span> <span class="c1"># =&gt; :read</span>
</span><span class='line'><span class="n">exception</span><span class="o">.</span><span class="n">subject</span> <span class="c1"># =&gt; Article</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Troubleshooting</h2>

<h3>Logging details of AccessDenied exceptions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># in ApplicationController</span>
</span><span class='line'><span class="n">rescue_from</span> <span class="no">CanCan</span><span class="o">::</span><span class="no">AccessDenied</span> <span class="k">do</span> <span class="o">|</span><span class="n">exception</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">development?</span>
</span><span class='line'>    <span class="n">matching_rules</span> <span class="o">=</span> <span class="n">current_ability</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:relevant_rules_for_match</span><span class="p">,</span> <span class="n">exception</span><span class="o">.</span><span class="n">action</span><span class="p">,</span> <span class="n">exception</span><span class="o">.</span><span class="n">subject</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">matching_rules</span><span class="o">.</span><span class="n">any?</span>
</span><span class='line'>      <span class="n">describe_rules</span> <span class="o">=</span> <span class="n">matching_rules</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">rule</span><span class="o">|</span> <span class="p">{</span> <span class="ss">conditions</span><span class="p">:</span> <span class="n">rule</span><span class="o">.</span><span class="n">conditions</span><span class="p">,</span> <span class="ss">block</span><span class="p">:</span> <span class="n">rule</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@block</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="s2">&quot;CanCanCan::AccessDenied: User has ability to </span><span class="si">#{</span><span class="n">exception</span><span class="o">.</span><span class="n">action</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="p">\</span>
</span><span class='line'>                         <span class="s2">&quot;</span><span class="si">#{</span><span class="n">exception</span><span class="o">.</span><span class="n">subject</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">, but failed to satisfy conditions: &quot;</span> <span class="p">\</span>
</span><span class='line'>                         <span class="s2">&quot;</span><span class="si">#{</span><span class="n">describe_rules</span><span class="o">.</span><span class="n">to_sentence</span><span class="p">(</span><span class="ss">two_words_connector</span><span class="p">:</span> <span class="s1">&#39; or &#39;</span><span class="p">,</span> <span class="ss">last_word_connector</span><span class="p">:</span> <span class="s1">&#39; or &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">debug</span> <span class="s2">&quot;CanCanCan::AccessDenied: User does not have ability to </span><span class="si">#{</span><span class="n">exception</span><span class="o">.</span><span class="n">action</span><span class="si">}</span><span class="s2"> &quot;</span> <span class="p">\</span>
</span><span class='line'>                         <span class="s2">&quot;</span><span class="si">#{</span><span class="n">exception</span><span class="o">.</span><span class="n">subject</span><span class="o">.</span><span class="n">inspect</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Order code is executed</h3>

<ul>
<li>Request is made and assigned to a controller</li>
<li>Controller instance calls current_ability method</li>
<li><code>current_ability</code> instantiates an instance of <code>CanCan::Ability</code> class (so your <code>ability.rb</code> file’s initialize method is called)</li>
</ul>


<p>Case: For <code>authorize!</code> or <code>can?</code></p>

<ul>
<li>Controller makes first call to <code>authorize!</code> or <code>can?</code> (which calls <code>can?</code> on your <code>current_ability</code> instance)</li>
<li>Matching rules are found based on the subject’s class and action</li>
<li>If the subject is a class, this is where the logic stops (and we only check for a matching action)</li>
<li>If the subject is an instance

<ul>
<li>If a block is defined, its evaluated, and logic ends</li>
<li>If a hash is defined, its values are matched against the subject’s attributes</li>
</ul>
</li>
</ul>


<p>Case: For <code>accessible_by</code></p>

<ul>
<li>Controller calls <code>model_adaptor</code> on your <code>current_ability</code> and other methods to find matching rules based on the subject’s class and action</li>
<li>Returns a <code>ActiveRecord::Relation</code> for the subject model class with the raw SQL or scope if one has bee defined, otherwise a <code>LEFT JOIN</code> with the attributes from the hash</li>
</ul>


<table style="border-collapse: collapse; min-width: 100%;">
    <colgroup>
        <col style="width: 107px;"/>
        <col style="width: 375px;"/>
        <col style="width: 333px;"/>
    </colgroup>
    <tbody>
    <tr>
        <td rowspan="1" style="width: 107px; padding: 8px; border: 1px solid;">
            <div>Checking</div>
        </td>
        <td rowspan="1" style="width: 375px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">authorize!</span> or <span
                    style="font-family: &quot;Courier New&quot;;">can?</span></div>
        </td>
        <td rowspan="1" style="width: 333px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Courier New&quot;;">accessible_by</span></div>
        </td>
    </tr>
    <tr>
        <td rowspan="1" style="width: 107px; padding: 8px; border: 1px solid;">
            <div>Current user and/or ability.rb logic</div>
        </td>
        <td colspan="2" rowspan="1" style="width: 708px; padding: 8px; border: 1px solid;">
            <div>Place logging statements in your <span style="font-family: &quot;Courier New&quot;;">ability.rb</span>
                file
            </div>
        </td>
    </tr>
    <tr>
        <td rowspan="1" style="width: 107px; padding: 8px; border: 1px solid;">
            <div>Action and Subject</div>
        </td>
        <td rowspan="1" style="width: 375px; padding: 8px; border: 1px solid;">
            <div>Rescue failed <span style="font-family: &quot;Courier New&quot;;">authorize!</span> in
                controller: 
            </div>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">rescue_from CanCan::AccessDenied </span>do
                    |exception|
                </div>
                <div>  p exception.subject</div>
                <div>  p exception.action</div>
                <div>end</div>
            </div>
            <div><br clear="none"/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Rails console:</span></div>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>user = User.create!</div>
                <div>ability = <span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">Ability.new(user)</span>
                </div>
                <div>ability.<span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">can?</span>(:destroy,
                    Project.new(user: user)<span
                            style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</span></div>
            </div>
            <div><br clear="none"/></div>
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">See if there is a matching rule for class and action:</span>
            </div>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div><span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">current_ability.send(:relevant_rules_for_match, action, class_or_instance)</span>
                </div>
            </div>
            <div><br clear="none"/></div>
            <div><span
                    style="font-family: &quot;Helvetica Neue&quot;;">See if the rule’s conditions match:</span>
            </div>
            <ul>
                <li>
                    <span style="-en-paragraph:true;">If not, use techniques below depending on how you’re defining your matching rule </span>
                </li>
            </ul>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>current_ability.send(:relevant_rules_for_match, action, class_or_instance).first<span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.matches_conditions?(action, subject, {})</span>
                </div>
            </div>
            <div><br clear="none"/></div>
        </td>
        <td rowspan="1" style="width: 333px; padding: 8px; border: 1px solid;">
            <div>Make sure:</div>
            <ul>
                <li>
                    Check class you’re calling accessible_by on and the arguments you’re passing it
                </li>
            </ul>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div><span
                        style="font-size: 12px; font-family: Monaco; color: rgb(255, 38, 0); --inversion-type-color: simple;">current_ability.can?(:index, ModelClass)</span>
                </div>
            </div>
        </td>
    </tr>
    <tr>
        <td rowspan="1" style="width: 107px; padding: 8px; border: 1px solid;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(20, 20, 20);">Raw SQL or scope</span>
            </div>
        </td>
        <td rowspan="1" style="width: 375px; padding: 8px; border: 1px solid;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(110, 110, 110);">Not applicable</span>
            </div>
            <div><br clear="none"/></div>
        </td>
        <td rowspan="1" style="width: 333px; padding: 8px; border: 1px solid;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(20, 20, 20); font-family: &quot;Helvetica Neue&quot;;">See SQL (works for hashes too):</span>
            </div>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>Project.accessible_by(ability)<span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.to_sql</span></div>
            </div>
        </td>
    </tr>
    <tr>
        <td rowspan="1" style="width: 107px; padding: 8px; border: 1px solid;">
            <div>Hash</div>
        </td>
        <td rowspan="1" style="width: 375px; padding: 8px; border: 1px solid;">
            <div>See the hash that’s used to match the instance’s values:</div>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>current_ability.model_adapter(exception.subject, exception.action)<span
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.conditions</span>
                </div>
            </div>
            <div><br clear="none"/></div>
        </td>
        <td rowspan="1" style="width: 333px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">See hash passed to where:</span></div>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>current_ability<span style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.model_adapter(TargetClass, :read).conditions</span>
                </div>
            </div>
            <div><br clear="none"/></div>
            <div>Test query by performing the same <font face="Courier New">LEFT JOIN</font> CanCanCan does:
            </div>
            <div><br clear="none"/></div>
            <div style="box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.15);-en-codeblock:true;">
                <div>User.where(id: current_user.id)<font
                        style="color: rgb(255, 38, 0); --inversion-type-color: simple;">.joins(</font>current_ability.model_adapter(TargetClass,
                    :read).conditions<font
                            style="color: rgb(255, 38, 0); --inversion-type-color: simple;">)</font></div>
            </div>
        </td>
    </tr>
    <tr>
        <td rowspan="1" style="width: 107px; padding: 8px; border: 1px solid;">
            <div>Block</div>
        </td>
        <td rowspan="1" style="width: 375px; padding: 8px; border: 1px solid;">
            <div><span style="font-family: &quot;Helvetica Neue&quot;;">Place logging or debugging statement in the block and check the result that’s returned</span>
            </div>
        </td>
        <td rowspan="1" style="width: 333px; padding: 8px; border: 1px solid;">
            <div><span
                    style="--inversion-type-color:  simple; color: rgb(110, 110, 110);">Not applicable</span>
            </div>
        </td>
    </tr>
    </tbody>
</table>


<h3>Common exceptions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">undefined</span> <span class="nb">method</span> <span class="sb">`klass&#39; for nil:NilClass</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Occurs when you&rsquo;ve defined an association name incorrectly in a condition hash.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emojis Are the Solution to Useless Commit Messages]]></title>
    <link href="http://greena13.github.io/blog/2016/08/19/emojis-are-the-solution-to-useless-commit-messages/"/>
    <updated>2016-08-19T18:32:38+01:00</updated>
    <id>http://greena13.github.io/blog/2016/08/19/emojis-are-the-solution-to-useless-commit-messages</id>
    <content type="html"><![CDATA[<p>In most git clients, commit messages are truncated after a single line. This is not enough space to fully describe the changes a commit contains - and to attempt do so would be misguided. A description that imparts as much detail as reviewing the changes themselves offers little in the way of useful abstraction. But these limitations may be overcome.</p>

<!--more-->


<p>The need for brevity can be partially addressed by ensuring descriptions are written so they read like steps in a set of instructions for how to modify the code: e.g. <em>Remove file X</em> is preferable to <em>Removed file X</em> or <em>Removing file X</em>. This leaves out distracting words and tense.</p>

<p>The problem remains, however, of deciding what information is useful and at what level of abstraction it should be expressed. This leads to inconsistencies in specificity depending on the nature and size of the changes, making it difficult to form any high level judgements about the code short of reading through the changes of each commit. A reader cannot ascertain the <em>type</em> of changes made, nor the reasons for making them, just from the commit&rsquo;s message.</p>

<p>Separate systems are maintained for tracking features and fixes (and the rationale behind them) but they deal in much higher levels of abstraction; they don&rsquo;t explain what a developer was hoping to achieve when they moved a method or renamed a constant. This information can be recorded in comments, but often only really makes sense within the context and scope of a change. Such comments only highlight what the code used to be - not what it is - and are either irrelevant or obsolete.</p>

<p>These problems can be addressed by labelling commit messages in a way that can help establish the nature of the changes and guide developers as they work. The commit author is then free to describe its details in the remaining space available, as normal.</p>

<p>This could be achieved by prefixing each commit to signify useful information about the changes it makes. Mnemonics, or abbreviations, have the benefit of consistency and accessibility, but are difficult for developers to memorise and use. They also lack the visual distinction to quickly tell the difference between similar strings of characters.</p>

<p>Emojis are perfect for capitalising on the brain’s ability to easily parse and distinguish between visual symbols. They also take up little space - a single character position each - and are designed to quickly impart concepts and ideas, yet be versatile enough to have different meaning depending on context. They are therefore more succinct and expressive than short mnemonics created from a series of letters.</p>

<h2>Related work</h2>

<p>Emojis have been used in commit messages for years now, helped along by <a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/">Github offerring support for them using printable characters</a>. However, I have not encountered them being used consistently or to convey as extensive a range of data as what is described below. It is worth noting that the emojis offered by Github are not as extensive as I require and although they are guaranteed to appear consistently on Github, they will not display at all in many git clients, instead rendering the longer sequence of characters that denote them - which cuts into the space afforded to the commit message itself. Git client support for them is likely to improve, however, so you may decide that staying within those offered by Github is right for you and your team.</p>

<p>The system that follows is an amalgamation of an earlier version of itself and <a href="https://github.com/slashsBin/styleguide-git-commit-message">Mohammad Shokri’s commit emojis</a> - the only other resource I was able to find online along similar lines. There are more than a few changes, exclusions and additions to fill some perceived gaps.  I believe Shokri remains within the Github emojis.</p>

<h2>Commit Emojis</h2>

<p>Each emoji is assigned a specific meaning and is a member of a larger group, intended to allow the reader to perform certain reasoning about the commit without actually reading its details.</p>

<h2>Change Types</h2>

<p>The best commits are atomic, have a clear focus and allow the option to revert without breaking or depending on adjacent commits. A developer should aim to have commits that are wholely described by a single <em>Change Type</em> emoji - combining them with one or more <em>Concern</em> emojis discussed below. Two <em>Change Type</em> emojis are often symptomatic of attempting to make too many changes at once - increasing the likelihood of mistakes or going too long before testing.</p>

<h3>Refactoring</h3>

<p>Refactoring is improving the structure of code without changing how it functions. Code that is successfully refactored has the same logical functionality as it did before and can be considered to have no behavioural changes. It does however, improve one of a few dimensions:</p>

<ul>
<li>🚀 <strong>Performance</strong> the code uses less of a given resource, whether it be time, memory, iterations or some other quantity. The system works more efficiently at performing the same function it did before.</li>
<li>👓 <strong>Readability</strong> the code is made easier to understand or read. This can range from re-ordering method definitions, adding or removing whitespace, introducing descriptively named routines or any other means of conveying meaning or clarity that does not change the way the system behaves.</li>
<li>👷 <strong>Structure</strong> the components of the system are restructured so that responsibilities are reassigned or to build a better basis for further expansion. The system as a whole behaves the same, but the parts that it comprises of and how they work together may change.</li>
<li>🔬 <strong>Testability</strong> improves the ease in which components can be tested together or in isolation. This usually involves altering how dependencies are resolved and passed around, allowing the substitution of system components for test mocks or spies.</li>
<li>☂️ <strong>DRYing up code</strong> finding instances of duplication of data or behaviour and consolidating them into a single source of truth that is referenced each time. The system should perform the same behaviour but with less code to maintain.</li>
<li>🌱 <strong>Extracting code</strong> relocating code that may be re-used or has its own concerns to a separate module. The external behaviour is preserved, it is just achieved using a new dependency.</li>
<li>✂️ <strong>Removing dead code</strong> deleting code that is never executed or has no effect on the system’s behaviour.</li>
<li>📻 <strong>Deprecation</strong> deprecating code in some way, whether it&rsquo;s adding deprecation warnings or refactoring to no longer use an old module or routine</li>
</ul>


<p>By attaching any of these labels to a commit, it tells the reader that - according to the developer&rsquo;s understanding at the time - the code should have the same behaviour after the commit as it did before. It clearly indicates both the developer’s intentions and the nature of the changes.</p>

<p>It now becomes possible to quickly examine the commit history - whether manually or by some automated means - to see how much work has been going into improving the design and performance of the codebase. This can be useful for keeping tabs on the growth of technical debt and draw attention to problematic areas of a system.</p>

<h3>Functional Changes</h3>

<p>Functional changes are those made to how a system behaves: it changes what output will result from one or more input values. There are two main reasons for such changes:</p>

<ul>
<li>🐛 <strong>Bugfixing</strong> making corrective changes to the way the system functions. There is a difference between how the system currently functions and how it should and it’s the developer’s job to close the gap.</li>
<li>⚙ <strong>Changing functionality</strong> altering how the system behaves to meet new requirements. Similar to bugfixing, but the way the system is intended to function has changed rather than just the system failing to meet that intention.</li>
</ul>


<p>These emojis clearly label the system as changing and give an indication of the resources being spent correcting bugs and changing existing functionality. Functional change emojis should <strong>not</strong> be used in the same commit messages as those in the Refactoring group. Perform refactoring and functional changes separately.</p>

<h3>Adding Functionality</h3>

<p>Separate from maintaining the existing behaviour of a system is adding new behaviour - usually while leaving the existing behaviour intact. It falls into one of a few categories:</p>

<ul>
<li>🌟 <strong>Adding new functionality</strong> new behaviour is being added that is separate from the concerns of the existing system. It does not break or compromise any dependencies, nor does it change how any facet behaves.</li>
<li>⚡️ <strong>Adding non-backwards compatible functionality</strong> this is new behaviour but it is intended to change or modify the existing behaviour of the system.</li>
<li>🕹 <strong>Prototyping</strong> an idea is being explored that may grow into a feature in the future. It is likely this code may be abandoned, or if it is built upon, it will likely need heavy refactoring and improvements.</li>
</ul>


<p>These emojis indicate effort spent on expanding the system as opposed to maintaining and modifying it. In the case of Prototyping, it also indicates exploratory efforts that will likely become sources of technical debt if adopted without proper re-writes.</p>

<h3>Infrastructure changes</h3>

<p>Often your software system is linked with dependencies and compiled according so some environment-specific settings. These changes do not modify the system directly, but can indirectly affect how it behaves through compiler arguments and the bundled libraries and assets to include.</p>

<ul>
<li>🔧<strong>Changing build settings</strong> changes to the way the project is built or developed. This includes establishing and maintaining different build environments and developments tools.</li>
<li><strong>Dependencies</strong>  ➡️ adding, ⬅️ removing, ⬆️ upgrading and ⬇️ downgrading dependencies often have a big impact on the behaviour of a system and should be marked clearly to make it easy to track when the libraries that your system depends on are changed. This makes it easier to identify the cause of newfound issues and to keep track of the addition of more prerequisites.</li>
</ul>


<h3>Non-functional Changes</h3>

<p>There are many changes to the code that do not effect the way a system functions, but instead are concerned with the supporting systems that help with development, maintenance and monitoring:</p>

<ul>
<li>📚 <strong>Documentation</strong> information included with or amongst the code intended for either maintainers or users of the system. This can include comments or Readmes or some other markup of the system and its behaviour.</li>
<li>✅  <strong>Increasing test coverage</strong> Adding more tests or improving the existing ones. These usually follow the addition of new functionality to the system.</li>
<li>💚 <strong>Fixing &amp; updating tests</strong> changes to the test suite are often required after changing existing behaviour.</li>
<li>👕 <strong>Linting</strong> changes to the rules used to perform static analysis during development.</li>
<li><strong>Logging</strong> 🔔 adding and 🔕 removing logging, or changing the log level.</li>
<li>📈 <strong>Analytics</strong> adjusting what event tracking is included in the system to better understand how it is being used by users.</li>
<li>🔭 <strong>Monitoring</strong> adjusting integrations with monitoring services.</li>
<li>🎥 <strong>Devops and Production environment configuration</strong> often the production build for a system involves additional optimisations, removal of development tools and other specialised configuration which must be added and maintained from time to time.</li>
</ul>


<h3>Milestones &amp; Stability</h3>

<p>In an earlier version of this system there were many more states, including a WIP state. I found this encouraged committing partially complete and broken code and ultimately was an exercise in documenting developer ignorance. There was little value in recording a developer’s understanding of the code’s stability at the time of completion  - because that is precisely when a developer knows the least about it. Code reviews, belated realisations and changing requirements often caused the commit to be mislabelled in hindsight.</p>

<p>Yet, three important states remain that should be quite clear at the time of committing the changes:</p>

<ul>
<li>💀 <strong>Unstable</strong> the code is known to be unstable or seriously incomplete, yet must be committed anyway because of some extenuating circumstances. This serves as a warning to all to not check out this commit and resume work.</li>
<li>📦 <strong>New version</strong> indicates the closing off and releasing of a version. It is in this commit that the new version string is saved and it this commit that is tagged.</li>
</ul>


<h3>Developer oriented</h3>

<ul>
<li>🏈 <strong>Hand-off</strong> indicates the code is being committed for the purpose of handing it from one developer to another and may not be complete or stable</li>
<li>🏷 <strong>Version control</strong> denotes a commit where merging, conflict resolution or reverting an earlier commit is taking place. Anything that is most readily expressed as a version control operation.</li>
</ul>


<h2>Concerns</h2>

<h3>Reasons for Changes</h3>

<p>If you are changing or adding functionality, there are some common motivations for doing so that are worth denoting. This is not an exhaustive list but includes the cases that are most often encountered:</p>

<ul>
<li>💬 <strong>Code review</strong> suggested changes that have come out of code review. They provide a useful indicator of how successfully and regularly reviews are being executed and acted upon.</li>
<li>👾 <strong>Supporting another platform</strong> this can be a device, operating system or software client. It is useful to label changes made to accommodate different environments to see how much work is being spent ensuring existing behaviour is accessible across all platforms.</li>
<li>⚔ <strong>Defensive programming</strong> covers anything that involves catering for the unexpected or miss-use of a system. This could be adding additional exception handling, catering for when an external service is down, or parameter checking to ensure helpful errors are raised when appropriate.</li>
<li>🔒 <strong>Security</strong> whenever changes are made to make the system more secure. This can range from adding additional sanitisation to upgrading dependencies with known security holes. These should be labelled clearly and obviously so it is apparent what concerns or problems have been addressed.</li>
</ul>


<h3>Common System Areas</h3>

<p>It can be useful to label what general areas of a system a commit makes changes to so that you may gauge where to focus testing or to expect new functionality.</p>

<ul>
<li>💄 <strong>Styling</strong> these are superficial changes that represent modifications to how something appears to an end user. These should not include changes to the system’s core behaviour, just how that behaviour is represented.</li>
<li>✏️ <strong>Copy changes</strong> changes to the text of an application, only.</li>
<li>🎩 <strong>Admin features</strong> changes that are not part of the system as the end user experiences them, but are instead part of the administrative features of the system.</li>
<li>📊 <strong>Database changes</strong> represent modifications to the data or the database that the system may maintain locally or remotely.</li>
</ul>


<h2>Using the emojis</h2>

<p>Select as many of the <em>Concerns</em> emojis (<em>Reason for Changes</em> and <em>Common System Areas</em> emojis) as are applicable and then select one <em>Change Type</em> emoji. If two or more <em>Change Type</em> emojis are applicable, attempt to separate out the commit into several smaller ones so that each only makes a single type of change. If this is not possible, select all the <em>Change Type</em> emojis that are applicable. Use whitespace in accordance with your personal preference. Complete the rest of the message with whatever issue number and description you normally would include.</p>

<p>Applying the emojis on a Macbook is very quick as you simply need to press ctrl + cmd + space to bring up the emoji selector. I prefer to add and group those emojis used above in my favourites so it is even easier to chose from among them. You can copy and paste the emojis into the search bar on the emoji picker to find them for the first time.</p>

<p>There are likely to be similar processes on other operating systems.</p>

<h2>Benefits</h2>

<p>The descriptive benefits of using a system like the emoji one described above are obvious. It provides high-level information about the type of changes being made and the nature of the work developers are doing - without meaningfully impacting developers’ ability to add short summaries of their changes. It also provides a useful overview during code review and to product management.</p>

<p>Through manual or automated analysis it is possible to establish an indicator of progress based on empirical data that is inexpensive to record. Such an analysis may be extended to not only individual commits, but sequences of them to highlight potential problems. A series of new feature commits absent a documentation commit may be cause to follow up on ensuring the new feature is adequately documented. A bugfix commit without any subsequent code review may suggest checking the review logs. Similarly, a new project without a lint commit may indicate the development environment may require further attention. These can be encoded and automated in the analysis tool of your choice, to raise warnings at the points in your workflow that make the most sense.</p>

<p>The real benefits, however, are when such a system is used prescriptively to encourage better code changes while they are being written. If a developer writes a commit messages before starting coding, it encourages them to carefully consider the changes they are about to make ahead of time. This process of thinking through the new feature or fix often leads to insights and allows recognising dead ends in advance, saving the time otherwise lost following them. Selecting the approriate emojis forces thinking in terms of the type of work to be done, keeping the developer focused and highlighting the testing and documentation that should be performed at each step.</p>

<p>I personally like to place the commit message somewhere on-screen that is always visible as it allows me to periodically check that I have not strayed from my original intent. It doesn&rsquo;t mean a commit&rsquo;s emojis or message cannot be changed, but it gives me something to work towards. I cannot suddenly start performing a different type of work, or begin working on another part of the system without realising it, because I see that I must change the emoji to match the changes being made and take pause.</p>

<h2>Potential problems</h2>

<p>There is the obvious disadvantage of emojis being represented differently across operating systems. However, although they may appear differently, the meaning assigned above is attached to the emoji&rsquo;s specification (a text description) and not necessarily the visual image. So if the colour, style, angle or other details of the emoji are different, the core concept remain constant. If you are part of a team that uses different environments and tools, you may wish to consider whether this is likely to be a problem for you.</p>

<p>Rendering emojis may also present a problem for some git clients (although I have not encountered any).</p>

<h3>Related articles</h3>

<ul>
<li><a href="http://greena13.github.io/blog/2016/07/21/10-things-good-front-end-developers-do">10 things good front-end developers do</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Shoot Trouble and Squish Bugs]]></title>
    <link href="http://greena13.github.io/blog/2016/08/07/how-to-shoot-trouble-and-squish-bugs/"/>
    <updated>2016-08-07T18:02:59+01:00</updated>
    <id>http://greena13.github.io/blog/2016/08/07/how-to-shoot-trouble-and-squish-bugs</id>
    <content type="html"><![CDATA[<p>It&rsquo;s frustrating to encounter a bug or failure when you know things <em>should</em> be working just fine. This is especially true when the last time something like this happened it was several hours before you found a solution. Even worse is when you are on the other side of those several hours and still have no idea how to solve your problem, despite having tried everything you can think of.</p>

<p>What you need is some debugging suggestions that will spark a new idea on how to go about finally finding that solution.</p>

<!--more-->


<h2>Don&rsquo;t solve problems that already have solutions</h2>

<p>If your goal is to solve a problem as quickly as possible, then you can probably jump right in and start googling around. This should be the first step and repeated at every point you gain a new level of insight.</p>

<h3>Search error messages</h3>

<p>Error messages, error codes and stack traces are gold for directing you to ready-made solutions. Be sure to exclude details specific to your system if you are not having any luck; filepaths with user names or custom install locations can prevent a search query from finding similar problems. If you are getting irrelevant results, however, try adding information to your query that provides context such as platform information and names of related modules.</p>

<h3>Find troubleshooting guides</h3>

<p>If you can&rsquo;t work from your problem backwards, look for lists of common problems and their solutions, to see if yours is on it. They are often under the title of <em>Troubleshooting</em> and don&rsquo;t have to be official or included in the documentation, to be helpful.</p>

<h3>Check the list of known issues</h3>

<p>It is worth checking a module&rsquo;s known issues to see if you can see anything that sounds familiar or gives you useful troubleshooting information. Your problem may be fixed with an upgrade or a workaround that someone has already found, but hasn&rsquo;t yet made its way into the official documentation.</p>

<h3>Find analogous situations</h3>

<p>The problem may not be unique to the library you are working with. Find cases of people using the same build or distribution system with other libraries. How they solved their problem may applicable to resolving yours.</p>

<h2>Find out as much context as possible</h2>

<p>To have the best chance of diagnosing a problem, it should be examined in place. Unusual inputs or the execution environment are behind many problems that are difficult to debug.</p>

<h3>Write out the error message</h3>

<p>It&rsquo;s tedious to read excuses for why you&rsquo;re day isn&rsquo;t going smoothly, so it is easy to miss important details in an error message. Writing the error out by hand is a good way to force your brain to pay attention and you will often find information missed on the first read. Draw diagrams to illustrate the relationship between each concept or try rephrasing the error. Pay attention to the names of files and routines to understand where the error is really coming from.</p>

<h3>Check the logs</h3>

<p>Run the program in verbose mode or increase the log level to gain more information about what is going on. Look for relevant warnings before the process failed and try and identify at what point something went wrong.</p>

<h3>Check the source code - briefly</h3>

<p>It may be obvious what is going awry if you check the source code mentioned in the stack trace. Often you will need to trace it up a few levels to get out of the error handling code and to where the actual problem occurs. Look out for debugging ideas, alternative input values and new arguments to test. But beware of going too deep. It is easy to lose a lot of time reading source code only to end up with nothing to show for it at the end. Set a timer and stop if you don&rsquo;t find anything useful in five minutes.</p>

<h2>Remove common causes of problems</h2>

<p>There are a few common causes of problems that occur over and over again, yet are easily overlooked because most of the time they are working just fine.</p>

<h3>Remove possible conflicts</h3>

<p>Close other processes that could be using the same resources to make sure no hidden conflicts are occurring and ensure only one instance of your program is running.</p>

<h3>Check versions</h3>

<p>Check the version of the code and documentation you are consulting. Perhaps the one you are using doesn&rsquo;t have a certain command or accepts different arguments.</p>

<h3>Check dependencies</h3>

<p>Check dependencies are in place and have compatible versions. Make sure nothing has been accidentally changed or updated.</p>

<h3>Check for mistakes easily made</h3>

<p>Look for simple explanations - typos can cause unpredictable results and are the simplest error to fix. The same is true of missing or moved files or settings. DSLs and configuration languages do a poor job or reporting malformed statements and instead quietly ignore them, reverting to the default setting.</p>

<h2>Diagnose the problem</h2>

<p>David J. Agans in his book, <em>Debugging: The 9 Indispensable Rules for Finding Even the Most Elusive Software and Hardware Problems</em> includes the advice <em>Quit Thinking and Look</em>: it is easy to get so caught up in theories and hunches that we forget to closely examine what is actually happening and work from the facts.</p>

<h3>Record what you’ve tried</h3>

<p>Record theories you may have about what&rsquo;s going on and come up with tests to verify or disprove them. Document the exact steps to reproduce the error and keep a record of things you have tried and what you found out. This helps you be systematic and avoid fooling or confusing yourself during debugging. It&rsquo;s also great for putting the problem down for a while and resuming right where you left off by reviewing your notes.</p>

<h3>Start simple and at the beginning</h3>

<p>Before jumping into the details, check that everything is working on a macro scale and that you are not seeing a manifestation of a larger more obvious issue that is easy to resolve. The program may be failing because a dependency has failed, a service is down or a file has been accidentally deleted. Try running the simplest version of the process, like asking it to display its version or to perform a dry run.</p>

<h3>Try and isolate the problem</h3>

<p>Comment code out and try running only certain parts of the process. Nick Parlante of Stanford University, in his list of <em>11 Truths of Debugging</em>, explains the importance of being systematic and changing only one thing at a time. The problem is not moving or changing its behavior; it&rsquo;s just waiting to be found by the careful deductive process of changing one thing at a time and evaluating the result.</p>

<h3>Compare it with something you know works</h3>

<p>Compare your code and configuration with one that you know works correctly. Whether it is a fresh install, an example implementation, or a previous version control commit that you know worked, see if there are any differences and remove them one by one to find the cause of the issue.</p>

<h3>Break it on purpose</h3>

<p>Similar to selectively executing only part of the program to find where a problem lies, you can intentionally break the system to see how it fails. Agans refers to this technique as <em>Make It Fail</em> and explains how it&rsquo;s possible to test theories or learn about the system by seeing how it behaves with know error conditions.</p>

<h2>Understand the problem</h2>

<p>If you have tried searching for the solution and failed to diagnose the problem, then it is time to sit down and study it from the top. It is likely to be more time consuming but provides the greatest chance of not only fixing your problem, but understanding why it occurred in the first place.</p>

<p>One of the Agans' rules is that you must understand a system in order to fix it. This is not strictly true, but it certainly does help you understand the implications of any work-arounds or patches that may be necessary and puts you in a better position to diagnose similar problems in the future.</p>

<h3>Find out how the system should behave</h3>

<p>As a general rule, if you don&rsquo;t know what to google to solve a problem, then don&rsquo;t try. Its difficult to figure out where to direct your debugging efforts if you are not familiar with the major components of a system. So instead focus on learning them and you will invariably gain the understanding you need to start asking the right questions.</p>

<h3>Look for tutorials and examples</h3>

<p>If researching the libraries in general feels a bit too academic or removed from the problem at hand, then search through the <em>Getting Started</em> section of the documentation. Often these will contain test steps or tidbits of information about the setup procedures that can give clues as to what is failing and why. At the very least, they should give you an idea of the components involved and what order they must be started in.</p>

<h3>Test you really understand it</h3>

<p><em>Saturarion</em>, as it is explained in James L. Adams', <em>Conceptual Blockbusting</em>, is the phenomenon where you think you have some information or understanding but cannot produce it when it comes time to do so. This happens a lot when researching a problem. Reading many sources on the same thing can leave you feeling like you have a much more complete understanding than you actually do.</p>

<p>Write down the steps and entities that should be taking place. Boxes and flowcharts are excellent at showing dependencies and protocols; lists are great for sequences. Colour coding statements and diagrams can be great for indicating the confidence you have in your understanding of different components and help direct your further learning: focus on what seems to be most relevant or what you still don&rsquo;t seem to understand that well. You&rsquo;re goal is to get to a point where you understand it well enough to see where it may go wrong.</p>

<p>Try and describe to someone what you think is happening and where the problem is. Verbalising your thoughts is a great way to test understanding and find gaps in it. This is closely related to <em>Rubber Duck Programming</em>.</p>

<p>If you are still stuck after all that, take a break and let your subconscious grapple with the problem. Some piece of information often falls into place - whether you are consciously aware of it or not - and often the problem&rsquo;s solution reveals itself in short order after taking another look.</p>

<p> And don&rsquo;t forget to up-vote any helpful solutions, thank any contributors and craft any pull requests that may resolve the problem for others.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 Things Good Front-end Developers Do]]></title>
    <link href="http://greena13.github.io/blog/2016/07/21/10-things-good-front-end-developers-do/"/>
    <updated>2016-07-21T19:08:15+01:00</updated>
    <id>http://greena13.github.io/blog/2016/07/21/10-things-good-front-end-developers-do</id>
    <content type="html"><![CDATA[<p>Without getting into the details of JavaScript, HTML, CSS, or any particular framework, there are some general things that most good front-end developers do and understand.</p>

<!--more-->


<p>The list that follows is intended as a jumping off point. Googling each concept will help you locate more context and the original authors; most originated from well renowned books on software engineering from the last century and are not new ideas.</p>

<h2>Know what you are doing</h2>

<p>A developer should be aware at all times of what type of work they are currently doing and why. This helps with focus and protects against accidental multi-tasking, which is a sure way to get lost and introduce bugs due to forgotten loose ends.</p>

<p>A developer is usually performing one of just a few types of work:</p>

<ul>
<li><strong>Refactoring</strong> - improving the structure of code without changing how it functions. It is also important to know if the goal in doing so is improvements in performance, readability, structure or testability.</li>
<li><strong>Bugfixing</strong> - making corrective changes to the way the system functions. There is a difference between how the system currently functions and how it should and it&rsquo;s the developer&rsquo;s job to close the gap.</li>
<li><strong>Changing functionality</strong> - altering how the system behaves to meet new requirements. Similar to bugfixing, but the intended way the system functions has changed.</li>
<li><strong>Adding functionality</strong> - adding new behaviour, while leaving the existing behaviour intact.</li>
<li><strong>Addressing non-functional concerns</strong>: not changing the way a system behaves as it is seen by the end user, but adding or changing something like logging, analytics, monitoring or fault tolerance</li>
</ul>


<p>The most valuable thing about a developer being mindful of what they are doing, is it helps them identify when they done. In particular, they should be able to answer the 3 important questions:</p>

<ul>
<li>What changes do I need to make?</li>
<li>How will I know when those changes have been successfully and completely made?</li>
<li>How will I know I have not caused any unintended side effects?</li>
</ul>


<h2>YAGNI</h2>

<p>If a feature is not currently needed, chances are You Ain’t Gonna Need It and building it now is likely to mean time wasted or mistakes made. This concept is from Extreme Programming (XP) and prescribes building a feature only when it is certainly needed and as close to when it is required as possible, to ensure the most current understanding is used.</p>

<h2>Single Responsibility</h2>

<p>Code modules of all levels of abstraction should have a single responsibility so when the requirements change, only that module must too. This is difficult to evaluate because it deals with unknown changes and it is challenging to consider things you are not aware of. I try to come up with a few hypothetical changes to the requirements and mentally walk through the modifications that would be needed to ensure I have made the right code design choices. This can feel at times like a contradiction with the YAGNI principle, so care must be taken to ensure considered design choices, without over-engineering the code for an eventuality that may never happen.</p>

<h2>Keep things DRY</h2>

<p>This one comes from the Ruby world and stands for Don’t Repeat Yourself. The same values, algorithms and functionality should never be repeated twice. Instead there should be an authoritative definition for each concept that is referenced whenever it is needed. Code should be refactored to abstract commonalities into reusable routines or modules and called in a way that expresses only the difference between the different use cases.</p>

<h2>Defensive Programming</h2>

<p>Program for failure. Especially those that come from outside your code. What happens when that external service goes down, or someone calls your module with incorrect arguments? The boundaries between programs - whether they be structural, network or user interaction - should be carefully examined to ensure all possibilities are handled appropriately if something unintended occurs.</p>

<h2>Separate imperative programming from declarative programming</h2>

<p>Imperative and declarative programming are two approaches to programming (but not the only ones). Imperative programming includes both what a program should do and how it should be done. Whereas declarative programming only describes what should be done and leaves the how to a lower level of abstraction: DSLs, SQL and regular expressions are popular examples. This allows a program to be written without concern for resource management or re-inventing common functionality as it is all handled by the lower level abstraction. It generally leeds to simpler programs and less bugs. However, if no lower level of abstraction is available, you should create your own by separating the imperative details into modules, packages, or functions that provide a nice declarative interface.</p>

<h2>Know the basics of Structured Programming</h2>

<p>Structured programming is a formal system that prescribes a series of models and rules governing program structure and control flow. In particular, it is most helpful to understand how and when to use the 3 primary ways of connecting statements:</p>

<ul>
<li><strong>Sequences</strong>: sequentially executed statements and subroutines</li>
<li><strong>Selections</strong>: conditionally executed statements and subroutines, depending on some system state</li>
<li><strong>Iterations</strong>: repeatedly executed statements and subroutines until some system state is achieved or all members of a collection are exhausted</li>
</ul>


<p>And the corresponding 3 control structures:</p>

<ul>
<li><strong>Subroutines</strong>: groupings of code that can be invoked using a single statement (procedures, functions, methods)</li>
<li><strong>Block structures</strong>: collection of statements invoked together under the same conditions</li>
<li><strong>Loops</strong>: collection of statements that are invoked repeatedly together until a particular state is reached (for and while loops)</li>
</ul>


<p>Note that throwing and catching exceptions are absent from this list and were actually discouraged by Structured Programming, but have since proven that their benefits outweighs the complexity they add and are regularly used in modern languages.</p>

<h2>Inversion of Control</h2>

<p>Described by Robert C. Martin &amp; Matin Fowler, Inversion of Control underpins most development I do from day to day.</p>

<p>Procedural programs consist of statements and routines that are executed according to one of the 3 ways mentioned above (sequences, selections, iterations) and the control flow of the program remains with the main routine itself. In a system that employs Inversion of Control, the main routine delegates control to other modules, which return it when they are done.</p>

<p>This approach summarises how many of the modern web development frameworks work. They define a main structure, but allow you to write modules for rendering responses or handling events that contain their own logic for how to function. As long as they implement a certain interface, the modules are free to control the framework to meet their specific needs - whether it be to redirect, render an error message or some other task the framework provides. This makes the framework more modular and extendable and enforces a consistent architecture that allows the developer to focus on just a single module’s responsibilities.</p>

<p>Understanding and recognising instances of this paradigm can add clarity to design decisions.</p>

<h2>Keep your code simple</h2>

<p>Code should be written for humans first and computers second. Readability has a direct and significant effect on maintenance speed and costs. The human brain tells stories and reasons in a linear fashion and can quickly make sense of code structured in the same way. It’s often possible to reduce nesting and abstract away iteration by separating nested routines and loops into descriptively named functions and methods. This has the dual purpose of making the code more sequential and abstracting away irrelevant details.</p>

<p>Steve McConnel’s <em>Code Complete</em> and Robert C. Martin’s <em>Clean Code</em> are two fantastic resources on this.</p>

<h2>Carefully order and label code</h2>

<p>You should be aiming to facilitate quick code navigation by providing useful levels of abstraction and descriptive labels for subroutines. Ensure routines do not have side-effects that are not apparent from their name. If it is difficult to succinctly name a routine, it is a sign of unclear intentions for that routine and it is probably time to consider refactoring it.</p>

<p>Position related routine definitions together and reflect dependencies by placing the dependent methods just above those they make calls to. Use whitespace to group and show relationships between steps in sequences and make it easy to track dependencies through a procedure.</p>

<p>Keeping a clear purpose and ensuring code is readable and well structured are just some of the concerns a front-end developer faces: design and requirements engineering before starting programming and reviews and testing afterwards, come to mind. But in my experience these are the ones that yield the greatest rewards if mastered - and the most pain if neglected.</p>

<h3>Related</h3>

<ul>
<li><a href="http://greena13.github.io/blog/2016/01/17/getting-to-better-code-reviews">Getting to better code reviews</a></li>
<li><a href="http://greena13.github.io/blog/2014/08/21/reducing-code-complexity">Reducing Code Complexity</a></li>
<li><a href="http://greena13.github.io/blog/2014/08/21/ordering-and-labelling-code">Ordering and Labelling Code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Learned to Learn]]></title>
    <link href="http://greena13.github.io/blog/2016/07/17/how-i-learned-to-learn/"/>
    <updated>2016-07-17T18:23:35+01:00</updated>
    <id>http://greena13.github.io/blog/2016/07/17/how-i-learned-to-learn</id>
    <content type="html"><![CDATA[<p>Every week I come into contact with over 20 programming languages, frameworks, APIs and other things I need to know. This is not remarkable for someone in the business of software development; there are many web technologies available - each regularly expanding its capabilities - and they may be connected in countless ways. However, there are common rules and patterns shared amongst them all.</p>

<!--more-->


<p> As an applier of these technologies, it is important to have a process for spotting the commonalities and being able to efficiently learn (or relearn) what you need to know and recognise the things you do not.</p>

<h2>The realisation</h2>

<p>I initially thought the road to mastery was through rote memorisation. My reasoning was if I got faster at mentally retrieving syntax to make my thoughts a reality, I would reduce the cognitive barrier to truly efficient expression. In their book, <em>Made to Stick</em>, Dan and Chip Heath explain this is common for novices. People inexperienced in an area see concrete details as suitable to build a greater understanding upon, but lack knowledge of the larger context. Experts instead see the same details as examples of greater patterns and appreciate that by themselves, these details have limited applicability outside the context that they were encountered. Their experience causes them to focus on recognising and remembering those larger patterns, which have a much wider applicability.</p>

<p>I came to see this myself. The languages I used changed; my understanding of what paradigms and constructs were important shifted; and APIs and interfaces evolved. It turns out that most of software development is understanding and adapting code, not long periods of synthesis. It’s more like editing than writing, and although an understanding of the proper grammar and vocabulary remain essential, its not the bottleneck in taking the code that you have and making it the code that you need.</p>

<p>When writing new code, a responsible developer will use well-established modules already written and tested by many contributors, whenever possible. So development often involves connecting components together, placing them within a larger architecture and wrapping them in logic to serve your needs. Each module has its own interface and must be adapted to work in harmony with the rest of your system, so you must learn its capabilities and limitations.</p>

<p>However, a developer’s job is often not to learn a software tool or component deeply and completely, but to establish a working understanding as quickly as possible: to see the utility of a tool, it’s limitations,  stability and how it compares to its alternatives. It also helps to learn compatible design patterns, paradigms and conventions to ensure you are using the tool as intended. This process involves holding a great many things in your mind at once, just long enough to make the necessary design decisions or implementations before moving on and establishing an entirely new mental context with different requirements and options.</p>

<p>I realised it wasn&rsquo;t an effective use of my time to memorise the minutiae of the components I was using. It was slow and the value was often more short-lived than I anticipated. It was better to leave this to the syntax highlighting and auto completion of a good IDE and linter. Instead I found it more efficient to memorise where to retrieve important information when I needed it: valuable resources, search terms and people that I could consult. Eventually I grew comfortable with knowing I knew where to find something, but couldn&rsquo;t recall it immediately - even if it made me sound less intelligent in conversation.</p>

<h2>The system</h2>

<p>I maintain a collection of bookmarks, carefully organised and labelled by the value it offers to help find what I am looking for when I need it. I drew inspiration from David Allen&rsquo;s description of a reference system in his book, <em>Getting Things Done</em>. In particular, there are no time-sensitive or actionable items included (these go into a separate system). There are no front pages of news outlets or blogs, or any other site that favours new content over the valuable - direct links to articles are fine. This is also in accordance with the idea of <em>Just In Time Information</em> as opposed to <em>Just In Case Information</em>, I first encountered listening to the <em>Tim Ferris Show</em> podcast. I do not want to be distracted by the bleeding edge of a technology I do not currently need. I review the collection to prune links no longer of use and to maintain an awareness of what sort of information is available.</p>

<p>Bookmarks are quick to create and maintain, but they point to entire documents and don’t help with digesting the information they contain. Each time I read something, I want it to be easier to retrieve the information I need or I am not much better off than using a good search engine. I use highlighting and virtual sticky notes for this.</p>

<p>For a while I worked with this combination of bookmarks and annotations with measured success. I  organised the bookmarks by situations and each document was annotated so it was trivial to locate what I was looking for. But the list of bookmarks quickly grew and I began to realise a problem. I discovered I would often need several bookmarks to provide an adequate explanation complete with all important caveats or limitations. It became harder to organise these similar bookmarks as they each provided part of a larger truth and were incomplete without the others.</p>

<p>In Peter Sim’s book, <em>Little Bets</em>, he writes of how innovation more closely resembles gathering insights rather than isolated acts of inspiration. He challenges the notion that these insights are siloed within a small number of resources and argues they are instead far more distributed across domains, and experts and novices alike. I was having a hard time connecting these insights from different sources as they were modelled as separate links, with no relationship information between them. So I started using  Evernote to create summaries of the highlights and notes I was making on some of the more important documents I was linking to. This allowed me to rephrase, reorder, compare and juxtapose ideas and information and organise them in ways that best served me and my needs.</p>

<p>These notes are like living documentation and are constantly updated with additions and modifications as with each revisit of a subject I strengthen my understanding and I want this reflected in my notes for the next time around. Occasionally, they cover a subject that changes regularly and the information must be updated to avoid being out of date.</p>

<p>This system has worked well, helping me to reach a better understanding of many concepts in a shorter period of time. And whenever I need to revisit a subject, I have a handy set of cheatsheets to get me back up to speed quickly without having to consult the source material once more.</p>

<h2>The process</h2>

<p>I annotate almost every page that I read when I am looking for particular information. It helps me keep track of where I am and makes me more resilient against disruptions. It also gives me the freedom to skim a document without losing track of where I have and have not read in-depth. If the document is a concise summary of a particular concept or piece of information that I believe I will need again, I add it to my bookmarks, labelled as what was useful about it. If the page forms part of a larger series of documents I have consulted on the subject that have yielded useful information, I start a new set of notes in Evernote to summarise and reorganise the information. If I end up doing this, I save a link to the original document in the notes for further reference.</p>

<p>I try not to copy information verbatim from the source material. This is not conducive to deeper learning and is an indication of time poorly spent. Unless I know I need information from a document available offline, it is better to simply link the original document rather than copy it out exactly, as little is gained in doing so.</p>

<p>When faced with a new library or language, I attempt to gain an understanding of what the entire documentation covers. I apply the 80/20 rule and spend a relatively large amount of time learning a relatively small amount: the fundamentals. It is here that I am looking for the patterns and the similarities and differences with the things I already know. I am not concerned with the details, as these are often unimportant until I have a better idea of what I need to know. I make highlights and annotations and then notes which I perform multiple parses on to make more concise. I then spend a little time getting to know what the rest of the documentation covers, so I know where to find this information when I need it. I may create some further bookmarks at this point to help remind me of what resources are available and what they contain.</p>

<p>In hindsight, taking notes on what is important and not wasting resources committing irrelevant details to memory seems obvious, but I wish someone had explained to me when I was starting out the dynamic nature of full stack development. Or perhaps warned me that mastering a single area of expertise and then expanding radially was likely to be costly in time and effort, as much of what I learned was  rendered inapplicable when external requirements inevitably changed. Or that no matter how dedicated I was towards learning and remembering new information, the rate I would forget things - especially when switching between similar contexts - would barely be outpaced by the rate at which I learnt new information, so I needed a way of externally recording it to be able to quickly refresh my memory. But above all, that learning how to learn and re-learn things quickly would be the most valuable skill I could attain.</p>

<h3>Related</h3>

<ul>
<li><a href="http://greena13.github.io/blog/2014/08/28/using-spaced-repetition-to-learn-programming-languages">Using Spaced Repetition to Learn Programming Languages</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Best Still Untitled: The Adam Savage Podcast Episodes]]></title>
    <link href="http://greena13.github.io/blog/2016/07/02/the-best-still-untitled-the-adam-savage-podcast-episodes/"/>
    <updated>2016-07-02T20:45:47+01:00</updated>
    <id>http://greena13.github.io/blog/2016/07/02/the-best-still-untitled-the-adam-savage-podcast-episodes</id>
    <content type="html"><![CDATA[<p>The Still Untitled: The Adam Savage podcast was one of the very first that I got into. Its conversational style and the fact that Adam regular answers listeners' questions makes for a welcoming and engaging listening experience.</p>

<p>Like many long-running, lightly produced podcasts, however, Still Untitled has touched on a great many subjects - some much more interesting than others. Here is a list of my favourite episodes, broken down into two categories.</p>

<!--more-->


<h2>Actionable Advice for Creative Work</h2>

<p>Many of these have very similar titles as they involve Adam answering questions from the Tested.com and maker community at large. There is some great advice and inspiration to be found in many of these episodes for creative work. Like <a href="http://greena13.github.io/blog/2016/06/25/the-best-tim-ferriss-show-podcast-episodes/">my Tim Ferriss Podcast recommendations</a>, I would suggest having a pen and paper handy in case you feel the need to take notes.</p>

<p>They are roughly grouped by theme and are not in chronological order, so be prepared to have to listen to five minutes or so of non-sequential preamble at the start of many episodes.</p>

<ul>
<li>Work ethic</li>
<li>Autodidacticism</li>
<li>Getting started making</li>
<li>Where to find stuff</li>
<li>Research tips</li>
<li>Scrounging, buying, finding materials</li>
<li>Skeptics</li>
<li>Shop storage schemes</li>
<li>Questions!</li>
<li>Your questions answered</li>
<li>Building an inexpensive toolkit for beginners</li>
<li>Etsy questions answered</li>
<li>Questions and answers</li>
<li>More questions!</li>
</ul>


<h2>Interesting Stories</h2>

<p>In addition to having a lot of knowledge to impart, Adam has lead a very interesting life. These episodes were particularly engaging stories from his past.</p>

<p>Listen when you want to be enthralled in a good, short story by a cool story or two.</p>

<ul>
<li>Video Games</li>
<li>Practical special effects</li>
<li>Adam&rsquo;s land cruiser</li>
<li>Flying in a U2</li>
<li>Tales of adventure</li>
<li>The significance of billiards</li>
<li>Rainy days</li>
</ul>


<h3>Related</h3>

<ul>
<li><a href="http://greena13.github.io/blog/2016/06/25/the-best-tim-ferriss-show-podcast-episodes">The Best Tim Ferriss Show Podcast Episodes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Facebook Origami Cheat Sheet]]></title>
    <link href="http://greena13.github.io/blog/2016/06/30/facebook-origami-cheat-sheet/"/>
    <updated>2016-06-30T13:36:51+01:00</updated>
    <id>http://greena13.github.io/blog/2016/06/30/facebook-origami-cheat-sheet</id>
    <content type="html"><![CDATA[<p><a href="http://facebook.github.io/origami/">Facebook&rsquo;s Origami</a> is an interesting UI prototyping tool that integrates nicely with <a href="https://www.sketchapp.com/">Sketch</a> and offers the ability to interact with your prototypes in a simulator or right on your mobile or tablet device.</p>

<p>This is a summary of the information I picked up from watching the <a href="http://facebook.github.io/origami/tutorials/">Origami video tutorials</a>.</p>

<!--more-->


<p>It&rsquo;s not a complete reference, but it succinctly captures most of the information contained in the video and can serve as a quick reference.</p>

<p>First, a note on terminology: as I am still learning my way around the Origami and Quartz Composer nomenclature, I may have incorrectly used some of the terminology concerned with what each of the components or widgets are called. I have also introduced groupings of layers and patches by function that were not suggested in the tutorials, but added clarity for me. They may, however, not necessarily correspond with discussion you read elsewhere.</p>

<h2>Overview</h2>

<p>Origami has two main concepts: patches and layers. Layers control what is rendered on the screen and can be thought of as the outputs of the prototype you are building. They take their input values from patches, which contain the logic of the prototype. And the patches take <em>their</em> input from user actions either on the simulator or the device that is running the prototype.</p>

<p>You connect patches and layers together by dragging lines between the inputs and outputs of components, in a fashion that is analogous to wiring an electrical circuit, or creating a flow chart.</p>

<p>So, the user interacts with the prototype, by scrolling, tapping or some other gesture. This gets relayed to your canvas of components using an interaction patch (discussed later) which represents the event as a binary value (1 when it&rsquo;s happening, otherwise 0) and you are free to perform any number of operations on this signal, like scale it, remap it, combine it, delay it or shape it, by connecting different transform patches together. When you are done, you should have a signal that can control one or more properties of the layers, like alpha, position, or size.</p>

<p>This is best represented visually, so it&rsquo;s probably worth watching the <a href="http://facebook.github.io/origami/tutorials/">first video tutorial</a> to get a feel for what this looks like. Once you have watched the first video, however, the remaining videos are more or less the same thing, using different patches. You can find a catalogue of the patches used in the videos below.</p>

<h2>Layers</h2>

<p>Layers describe how each content gets rendered on the device, by setting properties like:</p>

<ul>
<li>position</li>
<li>dimensions</li>
<li>rotation</li>
<li>image/mask image</li>
<li>colour</li>
<li>opacity</li>
<li>scale</li>
</ul>


<h3>Fixed Layer Components</h3>

<p>These components can&rsquo;t be changed by user interaction and represent constant properties of the simulation.</p>

<p><strong>Viewer</strong></p>

<p>Represents the output of the prototype, or the simulated device.</p>

<p><strong>Viewer Size</strong></p>

<p>Allows changing the simulated device (mobile devices, tablets or watch) and determines the dimensions of the layer group (see below).</p>

<h3>Dynamic Layer Components</h3>

<p>These components receive input signals from patches to control their values and are used to create the interactivity of the prototype.</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Key </th>
<th style="text-align:left;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> G </td>
<td style="text-align:left;"> Create layer group from selected </td>
</tr>
<tr>
<td style="text-align:center;"> Cmd + [, Cmd + ] </td>
<td style="text-align:left;"> Increment or decrement a selected layer&rsquo;s layer number </td>
</tr>
<tr>
<td style="text-align:center;"> Right click </td>
<td style="text-align:left;"> Quick alignment options </td>
</tr>
</tbody>
</table>


<p><strong>Layer Group</strong></p>

<p>Layer groups contain the things that will appear on the screen. They have square corners to distinguish them from non-groups. You enter a layer group by double clicking on them and exit them by clicking the up caret button in the top right of the screen.</p>

<p><strong>Image Patch</strong></p>

<p>The easiest way to add an asset is by dragging the image from Finder into the layer group on the screen and Origami will create an image patch and assigns a layer to it, which allows you to customise how it appears.</p>

<p><strong>Fill Layer</strong></p>

<p>Fill layers allow you to specify the colour and opacity of a fill.</p>

<p><strong>Text Layer</strong></p>

<p>Text layers displays font on screen and provide properties for changing position and styling.</p>

<h2>Patch creation</h2>

<p>Patches are created by using the corresponding keyboard shortcut or bringing up the patch list dialogue and either searching or clicking on the patch that you are looking for. Be careful not to select patches outside of the Origami package as some have very similar names to Origami ones.</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Key </th>
<th style="text-align:left;"> Patch </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Cmd + Enter </td>
<td style="text-align:left;"> Patch list dialogue </td>
</tr>
<tr>
<td style="text-align:center;"> T </td>
<td style="text-align:left;"> Transition </td>
</tr>
<tr>
<td style="text-align:center;"> I </td>
<td style="text-align:left;"> Interaction 2 </td>
</tr>
<tr>
<td style="text-align:center;"> A </td>
<td style="text-align:left;"> Pop animation </td>
</tr>
<tr>
<td style="text-align:center;"> L </td>
<td style="text-align:left;"> Layer </td>
</tr>
<tr>
<td style="text-align:center;"> C </td>
<td style="text-align:left;"> Conditional </td>
</tr>
<tr>
<td style="text-align:center;"> D </td>
<td style="text-align:left;"> Delay </td>
</tr>
<tr>
<td style="text-align:center;"> W </td>
<td style="text-align:left;"> Wireless </td>
</tr>
<tr>
<td style="text-align:center;"> Shift + S </td>
<td style="text-align:left;"> Switch </td>
</tr>
<tr>
<td style="text-align:center;"> Shift + A </td>
<td style="text-align:left;"> Logic </td>
</tr>
<tr>
<td style="text-align:center;"> R </td>
<td style="text-align:left;"> Reverse progress patch under cursor </td>
</tr>
<tr>
<td style="text-align:center;"> Alt + Click &amp; Drag </td>
<td style="text-align:left;"> Duplicate patch </td>
</tr>
</tbody>
</table>


<p>By hovering the cursor over a port and pressing the appropriate keyboard shortcut for the patch you want, the patch is automatically created and named based on the port that it is connected to.</p>

<h2>User Interaction Patches</h2>

<p>User interaction patches don&rsquo;t really have input ports and instead listen for events that occur when the user interacts with the prototype. They produce a signal on their output ports when a user event occurs that matches the patches type and options.</p>

<p><strong>Interaction 2 Patch</strong></p>

<p>Converts the user&rsquo;s simulated gestures to 1 or 0.</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Option </th>
<th style="text-align:left;"> Output Description </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> down </td>
<td style="text-align:left;"> 1 if finger held down, else 0 </td>
</tr>
<tr>
<td style="text-align:left;"> up </td>
<td style="text-align:left;"> 1 for a single frame following a finger release, else 0 </td>
</tr>
<tr>
<td style="text-align:left;"> tap </td>
<td style="text-align:left;"> 1 when finger is released from the screen and the finger is stationary, else 0 </td>
</tr>
<tr>
<td style="text-align:left;"> drag </td>
<td style="text-align:left;"> 1 when finger goes down to drag and remains 1 while dragging, else 0 </td>
</tr>
</tbody>
</table>


<p><strong>Scroll Patch</strong></p>

<p>Outputs 1 when a user scrolls an area.</p>

<p><strong>Swipe Patch</strong></p>

<p>Outputs 1 when a user swipes on an area.</p>

<p>The <strong>jump to start</strong> option is used for programatically triggering a swipe action, which is useful for back buttons and those that trigger swipe transitions.</p>

<p><em>Beware not to get the non-Origami one of the same name</em>.</p>

<p><strong>Hit Area Patch</strong></p>

<p>Limits the user input captured to a particular area of screen. You need to connect the hit area patch to the interaction patch via the interaction port at the top of the patch, to the right of the title.</p>

<h2>Transform Patches</h2>

<p>These patches are used to modify and combine the signals from the interaction patches. They are like the components of a circuit: the resistors, capacitors, transistors and transformers.</p>

<h3>Binary patches</h3>

<p>These are patches that output binary values: 0 or 1.</p>

<p><strong>Logic Patch</strong></p>

<p>These allow you to combine to signals in a logic operation. Invaluable when you need 2 things to be happening at once for a transition to occur, or to disable a behaviour if another is currently occurring.</p>

<p><strong>Conditional Patch</strong></p>

<p>Outputs 1 when the input signal satisfies a given constraint. Useful for waiting for a given threshold to be exceeded before setting off an event.</p>

<p><strong>Switch Patch</strong></p>

<p>Like a switch, it remembers and maintains its own internal state and uses its input signal to decide when to toggle that state. Useful for remembering if a user has already done something and triggering upstream events, accordingly.</p>

<p>There is a convention of naming these patches according to what the <em>on</em> state represents.</p>

<h3>Digital patches</h3>

<p>These are patches that output continuous data and are not limited to 0 or 1.</p>

<p><strong>Transition Patch</strong></p>

<p>Takes input between 0 and 1 and proportionally outputs a value within a different range. For example, for an output range between 1 and 10:</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Input </th>
<th style="text-align:left;"> Output </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 0 </td>
<td style="text-align:left;"> 1 </td>
</tr>
<tr>
<td style="text-align:left;"> 0.5 </td>
<td style="text-align:left;"> 5 </td>
</tr>
<tr>
<td style="text-align:left;"> 1 </td>
<td style="text-align:left;"> 10 </td>
</tr>
</tbody>
</table>


<p><strong>Pop Animation Patch</strong></p>

<p>Does the same thing as a transition patch, but using a more complex relationship. You can specify the bounciness and speed of the transition, so the equivalent value for a given input is not immediately available on the output. This is an effective way of converting a binary signal to an a digital one.</p>

<p><strong>Progress Patch</strong></p>

<p>A progress patch does the reverse of the transition patch: takes a range of input values and outputs value between 0 and 1.</p>

<p><strong>Reverse Progress Patch</strong></p>

<p>A reverse progress patch complements the signal of a progress patch it is plugged into. This is great for representing inverse relationships - say you want one component to fade in as another is fading out.</p>

<p><strong>Range Patch</strong></p>

<p>A range patch limits the possible set of values it receives. It outputs a clipped value and a rolled over value (how much the input has exceeded the specified range). This is good if you want to, have a widget change position relative to an input value, but limit its movement so it cannot go off the screen.</p>

<p><strong>Delay Patch</strong></p>

<p>Delay patches output their input signals after a specified delay. Useful for delaying animation and sequencing events.</p>

<h2>Keeping your canvas organised</h2>

<p>Patches and layers can be placed into layer groups in the same way files can be placed in directories to keep them organised. You can nest layer groups as deep as you like and give them useful names to help you navigate. It is useful to contain different screens and widgets in their own layer groups to keep them contained.</p>

<p>You can select patches and layers and cut and paste them inside your layer groups as you go along, or you can drag selected components on top of a layer group and they will be moved inside.</p>

<h3>Connecting patches</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> Key </th>
<th style="text-align:left;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> option + drag </td>
<td style="text-align:left;"> Drag from last selected input/output </td>
</tr>
</tbody>
</table>


<p>You can make a patch’s output port available as input for patches contained inside a layer group by dragging the output port onto the layer group and giving it a name in the dialogue that appears.</p>

<p>The reverse is possible as well: you can make a patch’s output available outside of the layer group that contains it by doing one of the following:</p>

<h4>Passing it up one layer at a time</h4>

<ul>
<li>Hover the cursor over the output port and press P and name the port</li>
<li>Navigate up one level</li>
<li>Connect another patch to the new output port that has appeared on the layer group</li>
</ul>


<h4>Use a Wireless Patch</h4>

<ul>
<li>Press W with the cursor hovered over the patch&rsquo;s output port</li>
<li>Click and rename the new wireless patch that appears on the canvas</li>
<li>Navigate up as many levels as you need</li>
<li>Press W while over the input port of the patch you wish to connect to OR shift + W with the cursor over the canvas (and not over a patch)</li>
<li>Select the wireless patch that appears and press Cmd + 2 to go into the settings panel and select the name of the wireless patch</li>
</ul>


<h2>Values</h2>

<p>You can long click on any value field to get a slider rather trying to calibrate numerical values to get what you are looking for.</p>

<h3>Related</h3>

<ul>
<li><a href="http://greena13.github.io/blog/2015/02/01/sourcetree-keyboard-shortcuts">SourceTree Keyboard Shortcuts</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Best Tim Ferriss Show Podcast Episodes]]></title>
    <link href="http://greena13.github.io/blog/2016/06/25/the-best-tim-ferriss-show-podcast-episodes/"/>
    <updated>2016-06-25T13:37:11+01:00</updated>
    <id>http://greena13.github.io/blog/2016/06/25/the-best-tim-ferriss-show-podcast-episodes</id>
    <content type="html"><![CDATA[<p>I have been needing an easy way of recommending episodes of the fantastic Tim Ferriss Show podcast for a while now. What follows is a list of the episodes I found the most value in.</p>

<!--more-->


<p>You can see the entire episode list on <a href="http://fourhourworkweek.com/podcast/">the podcast&rsquo;s website</a>.</p>

<p>The easiest way of listening to the episodes is to either go to the <a href="http://fourhourworkweek.com/podcast/">website</a> and search the episode titles or search on your favourite podcast app. Google will work, also.</p>

<p>Episodes are in the <em>approximate</em> order of strength of recommendation.</p>

<h2>Highly Actionable</h2>

<p>These podcasts are Tim talking to his audience, often answering up-voted questions or short verbal essays on a particular subject. They are generally shorter and immediately useful and actionable. Pausing and taking notes is highly recommended.</p>

<h3>Personal Focus</h3>

<ul>
<li>How to 10X Your Results, One Tiny Tweak at a Time</li>
<li>The 9 Habits to Stop Now — The Not-To-Do List 
Productivity” Tricks for the Neurotic, Manic-Depressive, and Crazy (Like Me) </li>
<li>5 Morning Rituals That Help Me Win The Day</li>
<li>What I’d Add To The 4-Hour Workweek for 2015 (And Much More)</li>
<li>How to Avoid the Busy Trap (and Other Misuses of Your Time)</li>
<li>Drunk Dialing Fans–Celebrating The 100th Podcast Episode!</li>
<li>25 Great Things I Learned from Podcast Guests in 2015</li>
<li>On Zero-to-Hero Transformations</li>
<li>The Unusual Books That Shaped Billionaires, Mega-Bestselling Authors, and Other Prodigies</li>
</ul>


<h3>Professional Focus</h3>

<ul>
<li>How Creatives should negotiate</li>
<li>Should You Start a ‘Startup’ or Build a Cash-Flow Business?</li>
<li>How to Build a Large Audience From Scratch (And More)</li>
<li>How to Build a World-Class Network in Record Time</li>
<li>The 5 Things I Did To Become a Better Investor</li>
</ul>


<h2>Guests - Actionable Advice</h2>

<p>These episodes are Tim interviewing guests, or guests answering listeners' questions. Generally they are much longer, and with more space between useful takeaways, but the podcast guests remain interesting or entertaining throughout. Note taking is encouraged, but not essential.</p>

<ul>
<li>Scott Adams: The Man Behind Dilbert</li>
<li>Derek Sivers on Developing Confidence, Finding Happiness, and Saying “No” to Millions</li>
<li>Derek Sivers Reloaded – On Success Habits and Billionaires with Perfect Abs</li>
<li>Ed Cooke, Grandmaster of Memory, on Mental Performance, Imagination, and Productive Mischief</li>
<li>Episode 2: JOSH WAITZKIN</li>
<li>What Evernote’s Phil Libin Learned from Jeff Bezos, Reid Hoffman, and Others</li>
<li>How One Computer Hacker Conquered Online Dating, Opens Locked Cars, and More</li>
<li>The Tim Ferriss Show: Interview with Peter Thiel, Billionaire Investor and Company Creator</li>
<li>The Tim Ferriss Show, Episode 18: James Altucher on How to Say “No”, Fail Better, and Build Businesses</li>
</ul>


<h2>Guests - Interesting People and Careers</h2>

<p>These interviews are with usually highly visible and always interesting people. Listen when you wish to be entertained and engaged, but don&rsquo;t necessarily want to have some useful takeaways.</p>

<ul>
<li>Tim Ferriss Interviews Arnold Schwarzenegger on Psychological Warfare (And Much More)</li>
<li>Jamie Foxx on Workout Routines, Success Habits, and Untold Hollywood Stories</li>
<li>The Tim Ferriss Show: Interview of Kevin Kelly, Co-Founder of WIRED, Polymath, - Most Interesting Man In The World?</li>
<li>Kevin Kelly on Artificial Intelligence and Designer Babies</li>
<li>Marc Goodman, FBI Futurist, on High-Tech Crime and How to Protect Yourself</li>
<li>Dissecting the success of Malcom Gladwell</li>
<li>Meet “Scorpion,” The Real-Life Santa Claus</li>
<li>The Tim Ferriss Show, Episode 22: Ed Catmull, President of Pixar, on Steve Jobs, Stories, and Lessons Learned</li>
<li>Tony Robbins on Morning Routines, Peak Performance, and Mastering Money</li>
<li>The Maverick of Brain Optimization</li>
<li>The Rags to Riches Philosopher: Bryan Johnson’s Path to $800 Million</li>
<li>How Facebook’s #30 Employee Quickly Built 4 Businesses and Gained 40 Pounds with Weight Training</li>
<li>Will MacAskill on Effective Altruism, Y Combinator, and Artificial Intelligence</li>
<li>Matt Mullenweg on Polyphasic Sleep, Tequila, and Building Billion-Dollar Companies</li>
<li>General Stan McChrystal on Anti-War Americans, Pushing Your Limits, and The - Three Military Tests You Should Take</li>
<li>The Tim Ferriss Podcast, Ep 15: Neil Strauss, Author of The Game</li>
</ul>


<h3>Related</h3>

<ul>
<li><a href="http://greena13.github.io/blog/2016/07/02/the-best-still-untitled-the-adam-savage-podcast-episodes">The Best Still Untitled: The Adam Savage Podcast Episodes</a></li>
<li><a href="http://greena13.github.io/blog/2015/02/13/how-to-start-a-startup-notes">Notes on how to start a startup</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Taught Myself the Colemak Keyboard Over a Weekend]]></title>
    <link href="http://greena13.github.io/blog/2016/01/17/how-i-taught-myself-the-colemak-keyboard-over-a-weekend/"/>
    <updated>2016-01-17T17:22:22+00:00</updated>
    <id>http://greena13.github.io/blog/2016/01/17/how-i-taught-myself-the-colemak-keyboard-over-a-weekend</id>
    <content type="html"><![CDATA[<p>The first step was to make little stickers, one for each key that had a different placement, and attach them to the keys on the keyboard. Then I went to Google to search for a typing program that could help me remap the muscle memory I already had established using qwerty for all those years.</p>

<!--more-->


<p>I found a site that let me type sequences of strings that at first had only a few different characters but slowly expanded to include more and more as I progressed through the lessons. This worked well enough in the beginning and let me quickly get a feel for how different the Colemak layout would be. But it had a number of flaws.</p>

<h1>Encountering some problems</h1>

<p>The first of these problems was that due to the way the tool worked, as a user I was forced to choose between progressing to the next level before I was ready or not going back to correct my mistakes. This was because mistyped characters did not lower the accuracy score if they were corrected before moving on. So in order to get the correct accuracy rating, I had to leave the mistakes, making it very difficult to reinforce the correct key after making an error, because the feedback loop was so long.</p>

<p>The second problem was I was typing characters as they appeared on the screen. I began to start associating seeing letters on the screen with pressing the corresponding buttons, which sounds great until you realise that this is quite far removed from what typing actually is. It more closely resembles dictation than copying out letters as they appear on the screen. This was made apparent when I later tried using an instant messaging client with auto-correct and the wrong word suggestions would appear only to have me start typing what I saw on the screen instead of what I intended.</p>

<p>Finally, the program also had a sound component that I found very distracting. For every error that was made a deterring sound would play that often ended up shocking me and taking me out of my concentration. Again, this did not map closely to the skill I was trying to acquire and the real feedback mechanism that I normally rely on to identify a mistype (a disconnect between what I thought I was typing and what appeared on the screen).</p>

<h1>Changing direction</h1>

<p>So, I changed tactics and decided to take stock of my progress so far by running through the alphabet and attempting to type each letter. I made notes on how easy each was to type on a scale of one to three. From this I was able to find which keys I was still really struggling with and focus on them for a while.</p>

<p>Although I had stickers over the keys, I was careful not to look at them any longer than I had too. I ended up removing some of them a couple of hours in because they began to peel away. And the rest a couple of hours after that. I didn&rsquo;t want to develop the crutch of having to look at the keyboard all of the time.</p>

<p>Noticing my progress was slowing considerably, I took a nap to consolidate what I had learnt so far. After waking, I turned my focus to technique and found that I had adopted the stiff hand placement that typing diagrams often demonstrate, where all your fingers are on the keyboard and your fingers are kept stationary except for the one being used to type the next key. I got around this by trying to bounce my fingers between key presses to relax them and achieve a configuration that was more like my day to day hand placement. It also allowed me to focus on pressing the right keys rather than having my hands in the right placement.</p>

<p>I found it helpful to regularly change levels of focus: first concentrating on individual letters, and then switching to think in terms of whole words and sentence fragments. Each time I jumped ahead my accuracy plummeted and often my brain would change gears and revert back to typing in qwerty. Nevertheless, it helped to maintain focus and push towards my intended goal rather than just getting really good at typing programs.</p>

<p>I noticed I would quickly feel fatigued and my accuracy would drop dramatically, so I started shortening my sessions and adding more breaks which helped with my perception of progress and kept me motivated.</p>

<h1>Progress at last</h1>

<p>As I continued to practice, I found myself beginning to add syllables to muscle memory and soon my hands started to type some of the smaller words by themselves. While there were whole syllables that started to flow from my fingertips, there were others that would always give me pause and really strain my concentration. It was particularly frustrating when these syllables had been easy to type using qwerty. I tried to identify these when they occurred and practice them separately.</p>

<p>The next breakthrough happened when I realised I was thinking in terms of finger placement: mapping keys to which finger should I place where when instead I should have been thinking in terms of the space the keyboard occupied. When I started to think about where the key was on the keyboard and not how to place my hands, my brain automatically did half the work for me and I saw another jump in progress.</p>

<p>I also became aware of how delicate my rote learning seemed to be. After a session of practicing using a program for improving my typing speed (which had me looking at the centre of the screen with no distractions) my accuracy would go up. However, when I then switched to a word processor where the cursor was more towards the bottom of the screen, I would struggle to find the keys that were so easy only moments ago. When I rearranged the word processor window to be positioned more like the typing program, then some of that difficulty dissipated.</p>

<h1>At the end of all things</h1>

<p>By the end of the weekend I am back to being almost as fast as I was with the qwerty keyboard. I can find each of the keys without consciously thinking about it, but not all of the little shortcuts for common letter combinations that I developed using the qwerty system have returned yet.</p>

<p>Although I have yet to see the speed improvements Colemak boasts, I am already aware of how much less my fingers are moving and can see with a little more work on reducing the time to recall key placements, this will probably become my preferred and most efficient method of typing.</p>

<h3>Related</h3>

<ul>
<li>[Improving Typing Speed](/blog/2014/09/08/improving-typing-speed</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting to Better Code Reviews]]></title>
    <link href="http://greena13.github.io/blog/2016/01/17/getting-to-better-code-reviews/"/>
    <updated>2016-01-17T12:36:29+00:00</updated>
    <id>http://greena13.github.io/blog/2016/01/17/getting-to-better-code-reviews</id>
    <content type="html"><![CDATA[<p>I recently set out to improve the process I use for reviewing code that myself and others have written. I wanted to focus on being more systematic and getting  consistent results for the time investment.</p>

<p>The reviews I was doing appeared to be going well enough: they were picking up problems and I was making sensible suggestions for how to improve code quality; less bugs seemed to be finding their way into the final product when I did the reviews than when I didn&rsquo;t and I felt more confident about code that had been through review. But I began to suspect that the quality of these reviews were variable and subject to random and unpredictable human factors.</p>

<!--more-->


<p>And although previous attempts to address this had left me with a checklist of common problems to look for, holding all thirty or so items on that checklist in my mind at once and trying to search for them all at the same time was too much complexity to effectively handle. I was applying this list in an attempt to be more consistent, but becoming overwhelmed and developing only a superficial familiarity with the code. Too often I was falling back on heuristics, like whether it looked correct, or whether I could spot anything obviously wrong with it (which are two ways of saying the same thing).</p>

<p>What&rsquo;s more, once the review was complete, there was no clear indication of the relative importance of the problems identified. Just because some problem had jumped out at me, there was no guarantee that it was the most important deficiency in the code and there wasn&rsquo;t a greater problem further upstream.</p>

<p>So I developed a system that simplified the list by grouping it into phases that made sense and allowed me to focus on looking for a single class of problem at each point in the process by running each piece of code through a series of three mental filters.</p>

<h1>Motivations and context</h1>

<p>The first phase is about establishing a high-level understanding of what the code change is, and why it&rsquo;s being made.</p>

<p>There are three reasons for making a change to a software system:</p>

<ul>
<li>To fix a bug (when the system currently performs in a way that is considered undesirable and a change to the way the code functions is required)</li>
<li>To add a new feature (when new functionality needs to be added, usually leaving the existing functionality intact)</li>
<li>To make a code improvement (when the current code functions correctly, however it can be cleaned up or made to function more efficiently, but still give the same behavior)</li>
</ul>


<p>Generally speaking each code change should attempt to do only one of the above, to avoid losing sight of why the change is being made. If you attempt two or more, it is much harder to verify the change is correct and has no unintended consequences.</p>

<p>I try to ask myself three questions:</p>

<ul>
<li>What changes need to be made to get the desired result?</li>
<li>How do I know the right changes have been made and I am getting the right result?</li>
<li>How do I know that nothing else has been broken as a consequence of the change?</li>
</ul>


<p>During this phase you can be looking for opportunities to increase how easy the code is to understand. Be on the look out for:</p>

<ul>
<li>Code that needs commenting</li>
<li>Poor naming of variables, classes and functions</li>
<li>Missing whitespace that could help group together code concerning the same semantic operation</li>
</ul>


<h1>Functional concerns</h1>

<p>The second phase is where you mentally break up the code into sequences, selections and iterations to get an overview of the structure and how the program flows. It&rsquo;s important to get a sense of:</p>

<ul>
<li>The full domain of input values</li>
<li>The number of execution paths and the conditions that must be satisfied for each</li>
<li>The stopping conditions for loops</li>
<li>All of the possible exit points, including those from exceptions that may be thrown</li>
</ul>


<p>Once you have this understanding, it is much easier to identify:</p>

<ul>
<li>Logic errors</li>
<li>Boundary errors</li>
<li>Failures to handle exceptions and error conditions</li>
<li>Implicit assumptions that may not always be true</li>
</ul>


<h1>Non-functional concerns</h1>

<p>Once you have convinced yourself that the code does what it is intended to do and that it is as readable and understandable as possible, then you can concern yourself with whether it is optimal from a performance, security and reliability perspective.</p>

<ul>
<li>Describe routines in terms of Big O notation</li>
<li>Consider which parameters are user input or from other sources that should be considered unsafe</li>
<li>Identify the scope of each variable and piece of data</li>
<li>External dependencies that may fail and how they are handled</li>
</ul>


<p>This makes it easier to locate:</p>

<ul>
<li>Any gross inefficiencies (this is not the time for micro-optimisations)</li>
<li>Poor choices of data structures and algorithms</li>
<li>Scope leakes</li>
<li>Security vulnerabilities</li>
</ul>


<p>And that&rsquo;s it. At first this list took a long time to run through, but it quickly became much faster to execute while still detecting a lot more problems.</p>
]]></content>
  </entry>
  
</feed>
