<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Key Shift in Cmd]]></title>
  <link href="http://greena13.github.io/atom.xml" rel="self"/>
  <link href="http://greena13.github.io/"/>
  <updated>2016-07-02T19:09:31+01:00</updated>
  <id>http://greena13.github.io/</id>
  <author>
    <name><![CDATA[Aleck Greenham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Facebook Origami Cheat Sheet]]></title>
    <link href="http://greena13.github.io/blog/2016/06/30/facebook-origami-cheat-sheet/"/>
    <updated>2016-06-30T13:36:51+01:00</updated>
    <id>http://greena13.github.io/blog/2016/06/30/facebook-origami-cheat-sheet</id>
    <content type="html"><![CDATA[<p><a href="http://facebook.github.io/origami/">Facebook&rsquo;s Origami</a> is an interesting UI prototyping tool that integrates nicely with <a href="https://www.sketchapp.com/">Sketch</a> and offers the ability to interact with your prototypes in a simulator or right on your mobile or tablet device.</p>

<p>This is a summary of the information I picked up from watching the <a href="http://facebook.github.io/origami/tutorials/">Origami video tutorials</a>. It&rsquo;s not a complete reference, but it succinctly captures most of the information contained in the video and can serve as a quick reference.</p>

<p>First, a note on terminology: as I am still learning my way around the Origami and Quartz Composer nomenclature, I may have incorrectly used some of the terminology concerned with what each of the components or widgets are called. I have also introduced groupings of layers and patches by function that were not suggested in the tutorials, but added clarity for me. They may, however, not necessarily correspond with discussion you read elsewhere.</p>

<h2>Overview</h2>

<p>Origami has two main concepts: patches and layers. Layers control what is rendered on the screen and can be thought of as the outputs of the prototype you are building. They take their input values from patches, which contain the logic of the prototype. And the patches take <em>their</em> input from user actions either on the simulator or the device that is running the prototype.</p>

<p>You connect patches and layers together by dragging lines between the inputs and outputs of components, in a fashion that is analogous to wiring an electrical circuit, or creating a flow chart.</p>

<p>So, the user interacts with the prototype, by scrolling, tapping or some other gesture. This gets relayed to your canvas of components using an interaction patch (discussed later) which represents the event as a binary value (1 when it&rsquo;s happening, otherwise 0) and you are free to perform any number of operations on this signal, like scale it, remap it, combine it, delay it or shape it, by connecting different transform patches together. When you are done, you should have a signal that can control one or more properties of the layers, like alpha, position, or size.</p>

<p>This is best represented visually, so it&rsquo;s probably worth watching the <a href="http://facebook.github.io/origami/tutorials/">first video tutorial</a> to get a feel for what this looks like. Once you have watched the first video, however, the remaining videos are more or less the same thing, using different patches. You can find a catalogue of the patches used in the videos below.</p>

<h2>Layers</h2>

<p>Layers describe how each content gets rendered on the device, by setting properties like:</p>

<ul>
<li>position</li>
<li>dimensions</li>
<li>rotation</li>
<li>image/mask image</li>
<li>colour</li>
<li>opacity</li>
<li>scale</li>
</ul>


<h3>Fixed Layer Components</h3>

<p>These components can&rsquo;t be changed by user interaction and represent constant properties of the simulation.</p>

<p><strong>Viewer</strong></p>

<p>Represents the output of the prototype, or the simulated device.</p>

<p><strong>Viewer Size</strong></p>

<p>Allows changing the simulated device (mobile devices, tablets or watch) and determines the dimensions of the layer group (see below).</p>

<h3>Dynamic Layer Components</h3>

<p>These components receive input signals from patches to control their values and are used to create the interactivity of the prototype.</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Key </th>
<th style="text-align:left;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> G </td>
<td style="text-align:left;"> Create layer group from selected </td>
</tr>
<tr>
<td style="text-align:center;"> Cmd + [, Cmd + ] </td>
<td style="text-align:left;"> Increment or decrement a selected layer&rsquo;s layer number </td>
</tr>
<tr>
<td style="text-align:center;"> Right click </td>
<td style="text-align:left;"> Quick alignment options </td>
</tr>
</tbody>
</table>


<p><strong>Layer Group</strong></p>

<p>Layer groups contain the things that will appear on the screen. They have square corners to distinguish them from non-groups. You enter a layer group by double clicking on them and exit them by clicking the up caret button in the top right of the screen.</p>

<p><strong>Image Patch</strong></p>

<p>The easiest way to add an asset is by dragging the image from Finder into the layer group on the screen and Origami will create an image patch and assigns a layer to it, which allows you to customise how it appears.</p>

<p><strong>Fill Layer</strong></p>

<p>Fill layers allow you to specify the colour and opacity of a fill.</p>

<p><strong>Text Layer</strong></p>

<p>Text layers displays font on screen and provide properties for changing position and styling.</p>

<h2>Patch creation</h2>

<p>Patches are created by using the corresponding keyboard shortcut or bringing up the patch list dialogue and either searching or clicking on the patch that you are looking for. Be careful not to select patches outside of the Origami package as some have very similar names to Origami ones.</p>

<table>
<thead>
<tr>
<th style="text-align:center;"> Key </th>
<th style="text-align:left;"> Patch </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> Cmd + Enter </td>
<td style="text-align:left;"> Patch list dialogue </td>
</tr>
<tr>
<td style="text-align:center;"> T </td>
<td style="text-align:left;"> Transition </td>
</tr>
<tr>
<td style="text-align:center;"> I </td>
<td style="text-align:left;"> Interaction 2 </td>
</tr>
<tr>
<td style="text-align:center;"> A </td>
<td style="text-align:left;"> Pop animation </td>
</tr>
<tr>
<td style="text-align:center;"> L </td>
<td style="text-align:left;"> Layer </td>
</tr>
<tr>
<td style="text-align:center;"> C </td>
<td style="text-align:left;"> Conditional </td>
</tr>
<tr>
<td style="text-align:center;"> D </td>
<td style="text-align:left;"> Delay </td>
</tr>
<tr>
<td style="text-align:center;"> W </td>
<td style="text-align:left;"> Wireless </td>
</tr>
<tr>
<td style="text-align:center;"> Shift + S </td>
<td style="text-align:left;"> Switch </td>
</tr>
<tr>
<td style="text-align:center;"> Shift + A </td>
<td style="text-align:left;"> Logic </td>
</tr>
<tr>
<td style="text-align:center;"> R </td>
<td style="text-align:left;"> Reverse progress patch under cursor </td>
</tr>
<tr>
<td style="text-align:center;"> Alt + Click &amp; Drag </td>
<td style="text-align:left;"> Duplicate patch </td>
</tr>
</tbody>
</table>


<p>By hovering the cursor over a port and pressing the appropriate keyboard shortcut for the patch you want, the patch is automatically created and named based on the port that it is connected to.</p>

<h2>Patch Types</h2>

<h3>User Interaction</h3>

<p>User interaction patches don&rsquo;t really have input ports and instead listen for events that occur when the user interacts with the prototype. They produce a signal on their output ports when a user event occurs that matches the patches type and options.</p>

<p><strong>Interaction 2 Patch</strong></p>

<p>Converts the user&rsquo;s simulated gestures to 1 or 0.</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Option </th>
<th style="text-align:left;"> Output Description </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> down </td>
<td style="text-align:left;"> 1 if finger held down, else 0 </td>
</tr>
<tr>
<td style="text-align:left;"> up </td>
<td style="text-align:left;"> 1 for a single frame following a finger release, else 0 </td>
</tr>
<tr>
<td style="text-align:left;"> tap </td>
<td style="text-align:left;"> 1 when finger is released from the screen and the finger is stationary, else 0 </td>
</tr>
<tr>
<td style="text-align:left;"> drag </td>
<td style="text-align:left;"> 1 when finger goes down to drag and remains 1 while dragging, else 0 </td>
</tr>
</tbody>
</table>


<p><strong>Scroll Patch</strong></p>

<p>Outputs 1 when a user scrolls an area.</p>

<p><strong>Swipe Patch</strong></p>

<p>Outputs 1 when a user swipes on an area.</p>

<p>The <strong>jump to start</strong> option is used for programatically triggering a swipe action, which is useful for back buttons and those that trigger swipe transitions.</p>

<p><em>Beware not to get the non-Origami one of the same name</em>.</p>

<p><strong>Hit Area Patch</strong></p>

<p>Limits the user input captured to a particular area of screen. You need to connect the hit area patch to the interaction patch via the interaction port at the top of the patch, to the right of the title.</p>

<h3>Transforms</h3>

<p>These patches are used to modify and combine the signals from the interaction patches. They are like the components of a circuit: the resistors, capacitors, transistors and transformers.</p>

<h3>Binary patches</h3>

<p>These are patches that output binary values: 0 or 1.</p>

<p><strong>Logic Patch</strong></p>

<p>These allow you to combine to signals in a logic operation. Invaluable when you need 2 things to be happening at once for a transition to occur, or to disable a behaviour if another is currently occurring.</p>

<p><strong>Conditional Patch</strong></p>

<p>Outputs 1 when the input signal satisfies a given constraint. Useful for waiting for a given threshold to be exceeded before setting off an event.</p>

<p><strong>Switch Patch</strong></p>

<p>Like a switch, it remembers and maintains its own internal state and uses its input signal to decide when to toggle that state. Useful for remembering if a user has already done something and triggering upstream events, accordingly.</p>

<p>There is a convention of naming these patches according to what the <em>on</em> state represents.</p>

<h3>Digital patches</h3>

<p>These are patches that output continuous data and are not limited to 0 or 1.</p>

<p><strong>Transition Patch</strong></p>

<p>Takes input between 0 and 1 and proportionally outputs a value within a different range. For example, for an output range between 1 and 10:</p>

<table>
<thead>
<tr>
<th style="text-align:left;"> Input </th>
<th style="text-align:left;"> Output </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 0 </td>
<td style="text-align:left;"> 1 </td>
</tr>
<tr>
<td style="text-align:left;"> 0.5 </td>
<td style="text-align:left;"> 5 </td>
</tr>
<tr>
<td style="text-align:left;"> 1 </td>
<td style="text-align:left;"> 10 </td>
</tr>
</tbody>
</table>


<p><strong>Pop Animation Patch</strong></p>

<p>Does the same thing as a transition patch, but using a more complex relationship. You can specify the bounciness and speed of the transition, so the equivalent value for a given input is not immediately available on the output. This is an effective way of converting a binary signal to an a digital one.</p>

<p><strong>Progress Patch</strong></p>

<p>A progress patch does the reverse of the transition patch: takes a range of input values and outputs value between 0 and 1.</p>

<p><strong>Reverse Progress Patch</strong></p>

<p>A reverse progress patch complements the signal of a progress patch it is plugged into. This is great for representing inverse relationships - say you want one component to fade in as another is fading out.</p>

<p><strong>Range Patch</strong></p>

<p>A range patch limits the possible set of values it receives. It outputs a clipped value and a rolled over value (how much the input has exceeded the specified range). This is good if you want to, have a widget change position relative to an input value, but limit its movement so it cannot go off the screen.</p>

<p><strong>Delay Patch</strong></p>

<p>Delay patches output their input signals after a specified delay. Useful for delaying animation and sequencing events.</p>

<h1>Keeping your canvas organised</h1>

<p>Patches and layers can be placed into layer groups in the same way files can be placed in directories to keep them organised. You can nest layer groups as deep as you like and give them useful names to help you navigate. It is useful to contain different screens and widgets in their own layer groups to keep them contained.</p>

<p>You can select patches and layers and cut and paste them inside your layer groups as you go along, or you can drag selected components on top of a layer group and they will be moved inside.</p>

<h2>Connecting patches</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> Key </th>
<th style="text-align:left;"> Description </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> option + drag </td>
<td style="text-align:left;"> Drag from last selected input/output </td>
</tr>
</tbody>
</table>


<p>You can make a patch’s output port available as input for patches contained inside a layer group by dragging the output port onto the layer group and giving it a name in the dialogue that appears.</p>

<p>The reverse is possible as well: you can make a patch’s output available outside of the layer group that contains it by doing one of the following:</p>

<h3>Passing it up one layer at a time</h3>

<ul>
<li>Hover the cursor over the output port and press P and name the port</li>
<li>Navigate up one level</li>
<li>Connect another patch to the new output port that has appeared on the layer group</li>
</ul>


<h3>Use a Wireless Patch</h3>

<ul>
<li>Press W with the cursor hovered over the patch&rsquo;s output port</li>
<li>Click and rename the new wireless patch that appears on the canvas</li>
<li>Navigate up as many levels as you need</li>
<li>Press W while over the input port of the patch you wish to connect to OR shift + W with the cursor over the canvas (and not over a patch)</li>
<li>Select the wireless patch that appears and press Cmd + 2 to go into the settings panel and select the name of the wireless patch</li>
</ul>


<h2>Values</h2>

<p>You can long click on any value field to get a slider rather trying to calibrate numerical values to get what you are looking for.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Best Tim Ferriss Show Podcast Episodes]]></title>
    <link href="http://greena13.github.io/blog/2016/06/25/the-best-tim-ferriss-show-podcast-episodes/"/>
    <updated>2016-06-25T13:37:11+01:00</updated>
    <id>http://greena13.github.io/blog/2016/06/25/the-best-tim-ferriss-show-podcast-episodes</id>
    <content type="html"><![CDATA[<p>I have been needing an easy way of recommending episodes of the fantastic Tim Ferriss Show podcast for a while now. What follows is a list of the episodes I found the most value in, but your results may vary. You can see the entire episode list on <a href="http://fourhourworkweek.com/podcast/">the podcast&rsquo;s website</a>.</p>

<p>The easiest way of listening to the episodes is to either go to the <a href="http://fourhourworkweek.com/podcast/">website</a> and search the episode titles or search on your favourite podcast app. Google will work, also.</p>

<p>Episodes are in the <em>approximate</em> order of strength of recommendation.</p>

<h2>Highly Actionable</h2>

<p>These podcasts are Tim talking to his audience, often answering up-voted questions or short verbal essays on a particular subject. They are generally shorter and immediately useful and actionable. Pausing and taking notes is highly recommended.</p>

<h3>Personal Focus</h3>

<ul>
<li>How to 10X Your Results, One Tiny Tweak at a Time</li>
<li>The 9 Habits to Stop Now — The Not-To-Do List 
Productivity” Tricks for the Neurotic, Manic-Depressive, and Crazy (Like Me) </li>
<li>5 Morning Rituals That Help Me Win The Day</li>
<li>What I’d Add To The 4-Hour Workweek for 2015 (And Much More)</li>
<li>How to Avoid the Busy Trap (and Other Misuses of Your Time)</li>
<li>Drunk Dialing Fans–Celebrating The 100th Podcast Episode!</li>
<li>25 Great Things I Learned from Podcast Guests in 2015</li>
<li>On Zero-to-Hero Transformations</li>
<li>The Unusual Books That Shaped Billionaires, Mega-Bestselling Authors, and Other Prodigies</li>
</ul>


<h3>Professional Focus</h3>

<ul>
<li>How Creatives should negotiate</li>
<li>Should You Start a ‘Startup’ or Build a Cash-Flow Business?</li>
<li>How to Build a Large Audience From Scratch (And More)</li>
<li>How to Build a World-Class Network in Record Time</li>
<li>The 5 Things I Did To Become a Better Investor</li>
</ul>


<h2>Guests - Actionable Advice</h2>

<p>These episodes are Tim interviewing guests, or guests answering listeners&#8217; questions. Generally they are much longer, and with more space between useful takeaways, but the podcast guests remain interesting or entertaining throughout. Note taking is encouraged, but not essential.</p>

<ul>
<li>Scott Adams: The Man Behind Dilbert</li>
<li>Derek Sivers on Developing Confidence, Finding Happiness, and Saying “No” to Millions</li>
<li>Derek Sivers Reloaded – On Success Habits and Billionaires with Perfect Abs</li>
<li>Ed Cooke, Grandmaster of Memory, on Mental Performance, Imagination, and Productive Mischief</li>
<li>Episode 2: JOSH WAITZKIN</li>
<li>What Evernote’s Phil Libin Learned from Jeff Bezos, Reid Hoffman, and Others</li>
<li>How One Computer Hacker Conquered Online Dating, Opens Locked Cars, and More</li>
<li>The Tim Ferriss Show: Interview with Peter Thiel, Billionaire Investor and Company Creator</li>
<li>The Tim Ferriss Show, Episode 18: James Altucher on How to Say “No”, Fail Better, and Build Businesses</li>
</ul>


<h2>Guests - Interesting People and Careers</h2>

<p>These interviews are with usually highly visible and always interesting people. Listen when you wish to be entertained and engaged, but don&rsquo;t necessarily want to have some useful takeaways.</p>

<ul>
<li>Tim Ferriss Interviews Arnold Schwarzenegger on Psychological Warfare (And Much More)</li>
<li>Jamie Foxx on Workout Routines, Success Habits, and Untold Hollywood Stories</li>
<li>The Tim Ferriss Show: Interview of Kevin Kelly, Co-Founder of WIRED, Polymath, - Most Interesting Man In The World?</li>
<li>Kevin Kelly on Artificial Intelligence and Designer Babies</li>
<li>Marc Goodman, FBI Futurist, on High-Tech Crime and How to Protect Yourself</li>
<li>Dissecting the success of Malcom Gladwell</li>
<li>Meet “Scorpion,” The Real-Life Santa Claus</li>
<li>The Tim Ferriss Show, Episode 22: Ed Catmull, President of Pixar, on Steve Jobs, Stories, and Lessons Learned</li>
<li>Tony Robbins on Morning Routines, Peak Performance, and Mastering Money</li>
<li>The Maverick of Brain Optimization</li>
<li>The Rags to Riches Philosopher: Bryan Johnson’s Path to $800 Million</li>
<li>How Facebook’s #30 Employee Quickly Built 4 Businesses and Gained 40 Pounds with Weight Training</li>
<li>Will MacAskill on Effective Altruism, Y Combinator, and Artificial Intelligence</li>
<li>Matt Mullenweg on Polyphasic Sleep, Tequila, and Building Billion-Dollar Companies</li>
<li>General Stan McChrystal on Anti-War Americans, Pushing Your Limits, and The - Three Military Tests You Should Take</li>
<li>The Tim Ferriss Podcast, Ep 15: Neil Strauss, Author of The Game</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Taught Myself the Colemak Keyboard Over a Weekend]]></title>
    <link href="http://greena13.github.io/blog/2016/01/17/how-i-taught-myself-the-colemak-keyboard-over-a-weekend/"/>
    <updated>2016-01-17T17:22:22+00:00</updated>
    <id>http://greena13.github.io/blog/2016/01/17/how-i-taught-myself-the-colemak-keyboard-over-a-weekend</id>
    <content type="html"><![CDATA[<h1>Getting started</h1>

<p>The first step was to make little stickers, one for each key that had a different placement, and attach them to the keys on the keyboard. Then I went to Google to search for a typing program that could help me remap the muscle memory I already had established using qwerty for all those years.</p>

<p>I found a site that let me type sequences of strings that at first had only a few different characters but slowly expanded to include more and more as I progressed through the lessons. This worked well enough in the beginning and let me quickly get a feel for how different the Colemak layout would be. But it had a number of flaws.</p>

<h1>Encountering some problems</h1>

<p>The first of these problems was that due to the way the tool worked, as a user I was forced to choose between progressing to the next level before I was ready or not going back to correct my mistakes. This was because mistyped characters did not lower the accuracy score if they were corrected before moving on. So in order to get the correct accuracy rating, I had to leave the mistakes, making it very difficult to reinforce the correct key after making an error, because the feedback loop was so long.</p>

<p>The second problem was I was typing characters as they appeared on the screen. I began to start associating seeing letters on the screen with pressing the corresponding buttons, which sounds great until you realise that this is quite far removed from what typing actually is. It more closely resembles dictation than copying out letters as they appear on the screen. This was made apparent when I later tried using an instant messaging client with auto-correct and the wrong word suggestions would appear only to have me start typing what I saw on the screen instead of what I intended.</p>

<p>Finally, the program also had a sound component that I found very distracting. For every error that was made a deterring sound would play that often ended up shocking me and taking me out of my concentration. Again, this did not map closely to the skill I was trying to acquire and the real feedback mechanism that I normally rely on to identify a mistype (a disconnect between what I thought I was typing and what appeared on the screen).</p>

<h1>Changing direction</h1>

<p>So, I changed tactics and decided to take stock of my progress so far by running through the alphabet and attempting to type each letter. I made notes on how easy each was to type on a scale of one to three. From this I was able to find which keys I was still really struggling with and focus on them for a while.</p>

<p>Although I had stickers over the keys, I was careful not to look at them any longer than I had too. I ended up removing some of them a couple of hours in because they began to peel away. And the rest a couple of hours after that. I didn&rsquo;t want to develop the crutch of having to look at the keyboard all of the time.</p>

<p>Noticing my progress was slowing considerably, I took a nap to consolidate what I had learnt so far. After waking, I turned my focus to technique and found that I had adopted the stiff hand placement that typing diagrams often demonstrate, where all your fingers are on the keyboard and your fingers are kept stationary except for the one being used to type the next key. I got around this by trying to bounce my fingers between key presses to relax them and achieve a configuration that was more like my day to day hand placement. It also allowed me to focus on pressing the right keys rather than having my hands in the right placement.</p>

<p>I found it helpful to regularly change levels of focus: first concentrating on individual letters, and then switching to think in terms of whole words and sentence fragments. Each time I jumped ahead my accuracy plummeted and often my brain would change gears and revert back to typing in qwerty. Nevertheless, it helped to maintain focus and push towards my intended goal rather than just getting really good at typing programs.</p>

<p>I noticed I would quickly feel fatigued and my accuracy would drop dramatically, so I started shortening my sessions and adding more breaks which helped with my perception of progress and kept me motivated.</p>

<h1>Progress at last</h1>

<p>As I continued to practice, I found myself beginning to add syllables to muscle memory and soon my hands started to type some of the smaller words by themselves. While there were whole syllables that started to flow from my fingertips, there were others that would always give me pause and really strain my concentration. It was particularly frustrating when these syllables had been easy to type using qwerty. I tried to identify these when they occurred and practice them separately.</p>

<p>The next breakthrough happened when I realised I was thinking in terms of finger placement: mapping keys to which finger should I place where when instead I should have been thinking in terms of the space the keyboard occupied. When I started to think about where the key was on the keyboard and not how to place my hands, my brain automatically did half the work for me and I saw another jump in progress.</p>

<p>I also became aware of how delicate my rote learning seemed to be. After a session of practicing using a program for improving my typing speed (which had me looking at the centre of the screen with no distractions) my accuracy would go up. However, when I then switched to a word processor where the cursor was more towards the bottom of the screen, I would struggle to find the keys that were so easy only moments ago. When I rearranged the word processor window to be positioned more like the typing program, then some of that difficulty dissipated.</p>

<h1>At the end of all things</h1>

<p>By the end of the weekend I am back to being almost as fast as I was with the qwerty keyboard. I can find each of the keys without consciously thinking about it, but not all of the little shortcuts for common letter combinations that I developed using the qwerty system have returned yet.</p>

<p>Although I have yet to see the speed improvements Colemak boasts, I am already aware of how much less my fingers are moving and can see with a little more work on reducing the time to recall key placements, this will probably become my preferred and most efficient method of typing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting to Better Code Reviews]]></title>
    <link href="http://greena13.github.io/blog/2016/01/17/getting-to-better-code-reviews/"/>
    <updated>2016-01-17T12:36:29+00:00</updated>
    <id>http://greena13.github.io/blog/2016/01/17/getting-to-better-code-reviews</id>
    <content type="html"><![CDATA[<p>I recently set out to improve the process I use for reviewing code that myself and others have written. I wanted to focus on being more systematic and getting  consistent results for the time investment.</p>

<p>The reviews I was doing appeared to be going well enough: they were picking up problems and I was making sensible suggestions for how to improve code quality; less bugs seemed to be finding their way into the final product when I did the reviews than when I didn&rsquo;t and I felt more confident about code that had been through review. But I began to suspect that the quality of these reviews were variable and subject to random and unpredictable human factors.</p>

<p>And although previous attempts to address this had left me with a checklist of common problems to look for, holding all thirty or so items on that checklist in my mind at once and trying to search for them all at the same time was too much complexity to effectively handle. I was applying this list in an attempt to be more consistent, but becoming overwhelmed and developing only a superficial familiarity with the code. Too often I was falling back on heuristics, like whether it looked correct, or whether I could spot anything obviously wrong with it (which are two ways of saying the same thing).</p>

<p>What&rsquo;s more, once the review was complete, there was no clear indication of the relative importance of the problems identified. Just because some problem had jumped out at me, there was no guarantee that it was the most important deficiency in the code and there wasn&rsquo;t a greater problem further upstream.</p>

<p>So I developed a system that simplified the list by grouping it into phases that made sense and allowed me to focus on looking for a single class of problem at each point in the process by running each piece of code through a series of three mental filters.</p>

<h1>Motivations and context</h1>

<p>The first phase is about establishing a high-level understanding of what the code change is, and why it&rsquo;s being made.</p>

<p>There are three reasons for making a change to a software system:</p>

<ul>
<li>To fix a bug (when the system currently performs in a way that is considered undesirable and a change to the way the code functions is required)</li>
<li>To add a new feature (when new functionality needs to be added, usually leaving the existing functionality intact)</li>
<li>To make a code improvement (when the current code functions correctly, however it can be cleaned up or made to function more efficiently, but still give the same behavior)</li>
</ul>


<p>Generally speaking each code change should attempt to do only one of the above, to avoid losing sight of why the change is being made. If you attempt two or more, it is much harder to verify the change is correct and has no unintended consequences.</p>

<p>I try to ask myself three questions:</p>

<ul>
<li>What changes need to be made to get the desired result?</li>
<li>How do I know the right changes have been made and I am getting the right result?</li>
<li>How do I know that nothing else has been broken as a consequence of the change?</li>
</ul>


<p>During this phase you can be looking for opportunities to increase how easy the code is to understand. Be on the look out for:</p>

<ul>
<li>Code that needs commenting</li>
<li>Poor naming of variables, classes and functions</li>
<li>Missing whitespace that could help group together code concerning the same semantic operation</li>
</ul>


<h1>Functional concerns</h1>

<p>The second phase is where you mentally break up the code into sequences, selections and iterations to get an overview of the structure and how the program flows. It&rsquo;s important to get a sense of:</p>

<ul>
<li>The full domain of input values</li>
<li>The number of execution paths and the conditions that must be satisfied for each</li>
<li>The stopping conditions for loops</li>
<li>All of the possible exit points, including those from exceptions that may be thrown</li>
</ul>


<p>Once you have this understanding, it is much easier to identify:</p>

<ul>
<li>Logic errors</li>
<li>Boundary errors</li>
<li>Failures to handle exceptions and error conditions</li>
<li>Implicit assumptions that may not always be true</li>
</ul>


<h1>Non-functional concerns</h1>

<p>Once you have convinced yourself that the code does what it is intended to do and that it is as readable and understandable as possible, then you can concern yourself with whether it is optimal from a performance, security and reliability perspective.</p>

<ul>
<li>Describe routines in terms of Big O notation</li>
<li>Consider which parameters are user input or from other sources that should be considered unsafe</li>
<li>Identify the scope of each variable and piece of data</li>
<li>External dependencies that may fail and how they are handled</li>
</ul>


<p>This makes it easier to locate:</p>

<ul>
<li>Any gross inefficiencies (this is not the time for micro-optimisations)</li>
<li>Poor choices of data structures and algorithms</li>
<li>Scope leakes</li>
<li>Security vulnerabilities</li>
</ul>


<p>And that&rsquo;s it. At first this list took a long time to run through, but it quickly became much faster to execute while still detecting a lot more problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes on How to Start a Startup]]></title>
    <link href="http://greena13.github.io/blog/2015/02/13/how-to-start-a-startup-notes/"/>
    <updated>2015-02-13T07:54:06+00:00</updated>
    <id>http://greena13.github.io/blog/2015/02/13/how-to-start-a-startup-notes</id>
    <content type="html"><![CDATA[<p>I recently finished listening to the fantastic set of lectures <a href="http://startupclass.samaltman.com/">How to Start a Startup</a> and I thought I&rsquo;d share a few things I found interesting from each lecture. These notes are <strong>not</strong> complete or guaranteed to be accurate and should not be acted upon without first either listening to or reading the transcripts of the <a href="http://startupclass.samaltman.com/">source material</a> yourself. Some of this content is stuff I am only superficially familiar with, so terminology and concepts may be mangled or misunderstood. Saying that, I would appreciate any feedback on glaring errors or omissions, using the comments below.</p>

<p>My intent is a summary of the content contained in the lectures that will serve as a quick reference for myself and others, but I do encourage experiencing the source material yourself if you are interested. It&rsquo;s very engaging and nuanced and features some fantastic speakers. It should be experienced firsthand to allow the content that resonates or is most applicable to you, to emerge. The original transcripts have been linked to for each lecture.</p>

<h2>Lecture 1</h2>

<h3>How to Start a Startup</h3>

<h4>Sam Altman, President of Y Combinator, and Dustin Moskovitz, Cofounder of <a href="https://www.facebook.com/">Facebook</a>, <a href="https://asana.com/">Asana</a>, and <a href="http://www.goodventures.org/">Good Ventures</a>. [<a href="http://genius.com/Sam-altman-lecture-1-how-to-start-a-startup-annotated">Original Transcription</a>]</h4>

<h2>Applicability</h2>

<p><em>Trying to act upon the advice in the lectures will not work in big companies or non-startups.</em></p>

<h2>Commitment and Motivation</h2>

<p>Never begin a startup for the sake of doing so - there are far easier ways to get rich. If it all works out, you&rsquo;ll need to be prepared to commit 10 years of your life.</p>

<h2>Prerequisites</h2>

<p>There are 4 areas a startup needs to excel at:</p>

<ul>
<li>Idea</li>
<li>Product</li>
<li>Team</li>
<li>Execution</li>
</ul>


<h2>The Idea</h2>

<p>The first thing you need is an idea based on a real need or problem; the best start-ups are often mission-oriented and it’s usually easier to get support as a startup working on a hard, important problem than it is for an easy problem. The best ideas are very distinct from existing solutions and those that tackle a problem with an existing solution and small differentiators usually fail.</p>

<p>Great ideas often seem bad (eg. the 13th search engine or a social network with college students as customers), but you need to be able to clearly articulate:</p>

<ul>
<li>Why it’s actually not a bad idea,</li>
<li>Why now is a better time than ever before for your idea</li>
<li>Why you are in a unique or privileged position to execute that idea</li>
</ul>


<p>It&rsquo;s because great ideas often sound bad that it&rsquo;s ok to tell people about them.</p>

<p>It is always advised to start with something simple; the smallest and most important subset of a problem. From there you can expand the idea into a more sophisticated or comprehensive solution.</p>

<p>There is an advantage to building something you yourself need so you can understand it without having to talk with customers first.</p>

<h2>Market</h2>

<p>In order to survive in the long run, you need to build a business model that is difficult to replicate. You want an idea that turns into a monopoly. This is easiest to achieve by finding a small market in which it&rsquo;s possible as a startup to achieve a monopoly; this then places you in a position to expand radially. You&rsquo;ll need to identify a market that’s going to be big in 10 years, preferably that few people have yet to recognise.</p>

<p>Making something people only like is to fail - you must make something people love. It&rsquo;s better to build something a small number of users love than a large number of uses merely like. This is because it is easier to expand from a product that few users love to one that many users love, than a product that many uses like to something a lot of users love. You will know when your idea is working because it will be growing by word-of-mouth.</p>

<p>Don’t worry about your competition - few start-ups die because of competition.</p>

<h2>Initial Users</h2>

<p>To get the first few users, you need to recruit by hand and do things that do not scale. Don’t put people between you and your customers - have as much contact with your customers as possible and use metrics to keep yourself honest on user numbers and adoption. Be sure to measure the things that matter to your startup and not get distracted by metrics that aren&rsquo;t aligned with your company&rsquo;s goals.</p>

<h2>Founders&#8217; Share</h2>

<p>At the end of things, founders are likely to have about 10% of the company.</p>

<h2>Lecture 2</h2>

<h3>Team and Execution</h3>

<h4>Sam Altman, President of <a href="https://www.ycombinator.com/">Y Combinator</a> [<a href="http://genius.com/Sam-altman-lecture-2-ideas-products-teams-and-execution-part-ii-annotated">Original Transcription</a>]</h4>

<h2>Finding Co-Founders</h2>

<p>You should only start a company with people you know and like or respect. This matters enough that it&rsquo;s better to have no co-founder than a bad co-founder. However, it&rsquo;s still bad to have no co-founder. You want to hold out for a co-founder that is “relentlessly resourceful.&ldquo; It&rsquo;s also valuable to seek out a tough and calm person.</p>

<p>The typical place to meet co-founders is in college, but if that is not an option, than you may choose to work in an interesting company to find co-founders.</p>

<h2>Early Hiring</h2>

<p>Hiring employees should be delayed until you no longer have a choice. Similar to a bad co-founder, the cost of a bad early hire is really high and very likely to be fatal.</p>

<p>Hiring should take 0% or 25% of your time. No more. When onboarding new hires, be sure to see if they have anyone in their network that might be an asset to your company. It&rsquo;s common at Facebook and Google for HR to interrogate you sometime in the first few weeks for any potential talent you know.</p>

<p>When considering applicants, you should assign appropriate importance to previous experience, depending on the role you are hiring for. Experience matters for hiring and management for large parts of business, but otherwise evaluate applicants solely on their aptitude - especially in the early days. You should be looking for people who are smart, good at getting things done, effective communicators, aren&rsquo;t afraid of risk and are someone you wouldn&rsquo;t mind spending a lot of time around.</p>

<p>The best way to properly evaluate a potential hire is to work together on something small. Both of you will learn a lot about each other and how you each work.</p>

<p>If you&rsquo;re planning on joining a startup yourself, you should pick a &ldquo;rocket ship&rdquo;: a company that is on a breakout trajectory but not many people have realised it yet.</p>

<h2>Employee Shares</h2>

<p>You should aim to give 10% of company to the first 10 employees. They will earn that over the first 4 years of employment, but if they leave within the first year they get nothing.</p>

<h2>Employee Motivation</h2>

<p><a href="http://www.ted.com/talks/dan_pink_on_motivation">Dan Pinker</a> lists the 3 things that motivate people to do great work as <em>autonomy</em>, <em>mastery</em> and <em>purpose</em>. Use this to inspire and motivate your employees.</p>

<h2>Firing</h2>

<p>You should quickly fire people causing office politics and who are always negative. They are toxic to the company.</p>

<h2>Co-founder Relationship Failure</h2>

<p><em>Co-founder vesting</em> is the pre-negotiation of what happens if one of the co-founders leaves, or is asked to leave the company. It is standard in Silicon Valley that it takes 4 years to earn all equity and if the founder leaves within the first 12 months, they receive nothing. If they leave after 12 months, they receive the 25% of their entitlement for the year they have stayed, plus whatever additional entitlement they have linearly accumulated beyond the first 12 months (up until the 4 years mark).</p>

<h2>Jobs of a CEO</h2>

<p>The typical responsibilities of a CEO can be summarised as:</p>

<ul>
<li>Subdivision of resources and work</li>
<li>Raising money to sustain the company</li>
<li>Promoting the product to people the company may be trying to recruit</li>
<li>Hiring and managing a team</li>
<li>Studying the execution bar and figuring out both what the company needs to do and how they can get it done</li>
<li>Focusing the company and keeping everyone aligned towards the same goals</li>
</ul>


<p>A founder needs to be very conscious of the things that they spend their time and money on. They need to ensure that they work on the right things each day ( 2 - 3 things, maximum). A founder may only do one of three things to address something that demands their attention: work on it, ignore it, or delegate it.</p>

<p>Clear goals are required and everyone in the company should execute off those goals.
The best founders are known for repeating these goals ad nauseum and not giving their employees a chance to forget them. Growth and movement are paramount in the early stages of a startup, and should be present in a company&rsquo;s goals. Weekly meetings should address both metrics and discuss how the company is tracking, and how it may improve.</p>

<h2>Growth</h2>

<p>Momentum and growth are paramount to a startup&rsquo;s health. Getting distracted is the most common cause of stagnating growth. Competitors making news is the most common reason for disrupting a company&rsquo;s momentum. Don’t worry about competitors until they’re beating you with a shipped product.</p>

<p>When you lose momentum, it is not helpful to give long speeches about the company&rsquo;s mission; save those for when things are going well. Instead, you must gain momentum back in the form of small wins. Sales fix everything, so focus on that.</p>

<p>When things are going poorly, people start to disagree about what needs to be done. A useful framework is to agree to ask your users and use that to chart a course of action.</p>

<p>Companies each grow in different ways so it is difficult to give general advice on how to maintain it. However, a good set of guidelines is to establish an operating rhythm: ship on a regular basis and review metrics weekly.</p>

<h2>Execution Speed</h2>

<p>The major advantage of startups are their execution speeds. They only work if a company and its founders have extremely intense focus and dedication. Small additional amounts of effort, work or insight can have a huge payoff: it can mean the difference between a recessive growth rate of 0.99 and an exponential one of 1.01. Outworking competitors by a small amount can yield a significant result on a company&rsquo;s longterm success.</p>

<p>A successful founder has a decision-making paradigm that is biased towards action, not indecision. A founder&rsquo;s ability to break things down into small tasks and execute on them quickly is the best predictor of a company&rsquo;s success. They respond to emails the fastest and make decisions rapidly. They are also present when it&rsquo;s important; they show up at meetings and come prepared to make decisions, take actions and persuade.</p>

<h2>An Obsession With Quality</h2>

<p>A complementary prerequisite to an ability to execute fast that has enormous baring on the success of a startup is an obsession with quality. Facebook&rsquo;s mantra: <em>Move fast and break things</em> is qualified with the implicit clause <em>but be obsessed with quality</em>. Major companies like Apple, Facebook and Google are all obsessed with quality. Saying that, as a startup you need to be frugal in the right places.</p>

<h2>Lecture 3</h2>

<h3>Before the Startup</h3>

<h4>Paul Graham, Founder, <a href="https://www.ycombinator.com/">Y Combinator</a> [<a href="http://genius.com/Paul-graham-lecture-3-counterintuitive-parts-of-startups-and-how-to-have-ideas-annotated">Original Transcription</a>]</h4>

<p>Startups are so unusual that you can’t trust your instincts on many things. An area where you <em>can</em> trust your intuition is when dealing with people.</p>

<p>What you need to a begin a successful startup is <em>not</em> expertise in startups, but expertise in your chosen domain, and in particular, in your users. Tricks or gaming the system will not work in the same way that they have worked in many other situation. You can’t fool users; you have to have something they want.</p>

<p>An interesting anology for the growth of technology is to envision it as a fractal where each leading edge is the forefront of a technology. You need to be riding one of these edges to break into a truly new market.</p>

<h2>Lecture 4</h2>

<h3>Building Product, Talking to Users, and Growing</h3>

<h4>Adora Cheung, Founder, <a href="https://www.homejoy.com">Homejoy</a> [<a href="http://tech.genius.com/Adora-cheung-lecture-4-building-product-talking-to-users-and-growing-annotated">Original Transcription</a>]</h4>

<h2>Research and Feedback</h2>

<p>It&rsquo;s really important to tell people about your idea if you are creating a product or service for users other than yourself. It can be disastrous to have a big product release and attract a lot of users only to have those users leave again because you have missed the mark by not getting any prior feedback. Friends and family members are great initial users for your production.</p>

<p>If at all possible, immerse yourself in the industry that you want to disrupt. Find the opportunities for efficiencies and improvements that are not obvious from outside the domain. Take some time to investigate your potential competitors and their offerings to ensure you have truly spotted a gap in the market. There should be no doubt that you are experts in your domain when it comes time to interact with your customers.</p>

<h2>Designing The User Experience</h2>

<p>Storyboard the whole user experience: how users find out about you, what they see when they come to your site, how they sign up, how they use your product, how they review your site and even how they leave. To achieve the minimum viable product, is not to skimp on the user experience.</p>

<p>The site should have a clear, short description or call-to-action to get users on board. Long or complicated descriptions confuse and dissuade users.</p>

<h2>Getting The Word Out</h2>

<p>Advertise your startup when you have a minimum viable product to get feedback from users: you can use <a href="https://news.ycombinator.com/show">Show Hacker News</a> and domain-specific mailing lists. A way to get rapid feedback before the monthly user retention data becomes available is to ask for user reviews. Use this information to calculate a <a href="http://www.netpromoter.com/why-net-promoter/know/">net promoter score</a>.</p>

<p>When evaluating feedback, you need to be aware of the &ldquo;honesty curve&rdquo;. Your friends and family have a vested interest in making you happy, which can be at the expense of being honest about your product. Strangers do not have the same conflict. It&rsquo;s helpful to get to paying users as quickly as possible because they will give you more honest feedback - especially if they feel you&rsquo;ve taken their money and not delivered on your claims.</p>

<h2>Prioritising Implementing User Feedback</h2>

<p>At each stage of development and growth, it is important to optimise and build  only those features necessary for getting to the next milestone of customers. It&rsquo;s often a bad idea to automate everything from the start; perform tasks manually to get a proper appreciation for what is involved and reduce the risk of automating yourself in a bad direction.</p>

<p>Prioritise your engineer&rsquo;s time by building only for the most common user. As you grow, the number of atypical users will grow and it will begin to make sense to spend time and resources on addressing their use cases.</p>

<p>Don’t build all the features users request; instead, figure out why they’re requesting it and then act accordingly. Get to the bottom of the underlying problem your users have and craft a solution that makes sense in the grander scheme of your product. User problems can be categorised as either a problem that has emerged through using your product, or one that is in a similar or related domain that you may be able to help with.</p>

<h2>Competitors</h2>

<p>Imitation is cheaper than innovation and your competitors are always going to be close behind, ready to copy features. And so it&rsquo;s valuable to gain the market share as soon as possible because that is not something competitors can copy. To do this, you must ship as soon as possible.</p>

<h2>Growth</h2>

<p>There are three types of growth: <em>Sticky Growth</em>, <em>Viral Growth</em> and <em>Paid Growth</em>.</p>

<p><em>Sticky growth</em> is when you get existing users to come back again or pay more for a superset of your product. Cohort Analysis can be used to examine your customer retention. It is most commonly performed by month. <em>Churn</em> refers to how many users you’re losing.</p>

<p><em>Viral growth</em> comes from when users talk about you to their friends, family and social network. To optimise this sort of growth you really need to give a fantastic experience to your users. You also need good mechanics around how your users talking about your product. A good referral program has good <em>customer touch points</em> (where and when you ask them to share your product with their friends) and often offers rewards for referring your product to people (discounts, upgrades, coupons, etc). Finally, you need to optimise the experience a referred user has when they encounter your site to maximise the chance of onboarding them (mention it is their friend who is recommending your product).</p>

<p><em>Paid growth</em> is that in which you pay for via advertising. The important metrics here are <em>Customer Acquisition Cost</em> (CAC), <em>Costs Per Click</em> (CPC) and conversion rate. CAC = CPC / conversion rate.</p>

<p>You should not have a team for growth as a small company. As a founder you should try one strategy at a time and focus on executing on it for a week. If it ends up working by the end of the week, continue with it. Otherwise move on. Always iterate and refine your approach; advertising channels are always changing and should be reviewed periodically to evaluate whether they&rsquo;re viable or not.</p>

<h2>Sustainability</h2>

<p>Your goals should always be to achieve sustainable growth. If you&rsquo;ve been fully executing on an idea and growth strategies and you experience three or four weeks of no growth or backwards growth, then it may be time to consider pivoting.</p>

<h2>Lecture 5</h2>

<h3>Competition is For Losers</h3>

<h4>Peter Thiel, Founder, <a href="www.paypal.com">Paypal</a>, Founder, <a href="www.palantir.com">Palantir</a>, and Founder, <a href="www.foundersfund.com/">Founders Fund</a> [<a href="http://genius.com/Peter-thiel-lecture-5-business-strategy-and-monopoly-theory-annotated">Original Transcription</a>]</h4>

<h2>Business Value</h2>

<p>What makes a business valuable is creating <em>X</em> dollars of value and capturing <em>Y</em> percent of that value. It is important to understand that <em>X</em> and <em>Y</em> are <em>independent</em> variables. A business can generate a small amount of <em>X</em> but capture a large percentage <em>Y</em> or a large <em>X</em> and capture a small percentage, <em>Y</em>.</p>

<h2>Industry Types</h2>

<p>Industries usually fall into one of two types: ones that are <em>perfectly competitive</em> and ones that are <em>monopolies</em>. It is often difficult to tell which industry a company is in because they have a vested interest in telling a narrative that places them in the other category. Perfectly competitive businesses risk being dismissed as a non-profitable company and companies that have a monopoly risk government regulation if identified as such.</p>

<h2>Perfect Competition</h2>

<p>In industries that are perfectly competitive, all consumer surplus is absorbed and all participants make very little money. Companies that are in a perfectly competitive market often tell a narrative that describes the business as doing something highly specific and therefore part of an industry that is not as competitive as it looks. This can be thought of as describing the company as the intersection of two sets of industries.</p>

<p>Industries that have monopolies pretend not to have them for fear of government regulation by describing themselves as being in a market that is bigger than it looks and therefore includes many competitors. This can be thought of as describing the company as the union of two or more sets.</p>

<h2>Achieving a Monopoly</h2>

<p>To attain a monopoly, a startup must go pursue a large share of a small market and then expand that business in concentric circles to include related markets. One component of a monopoly is some sort of proprietary technology and you want that technology to be an order of magnitude better than the closest competitor. If you are lucky enough to have something totally new, this equates to an infinite improvement.</p>

<p>Some of the benefits monopolies enjoy is a well established brand and significant network effects; economies of scale; and high fixed costs, but low marginal costs. Software businesses typically have low marginal cost and can grow quickly to keep up with the market.</p>

<p>In order for a monopoly to be effective, a company must maintain it; it&rsquo;s not enough to have a monopoly that lasts a short amount of time. You should aim to be the <em>last</em> company in a particular category. Most of the value in such companies exists in the future: 75% - 80% is in going to come from 10 years and beyond and so you need to be able to explain either why your company will be the last breakthrough in an area or why you will be able to innovate ahead of anyone else.</p>

<p>Humans naturally seek out things other people are doing; This tendency needs to be overcome in order to do something novel.</p>

<h2>Lecture 6</h2>

<h3>Growth</h3>

<h4>Alex Schultz, VP Growth, <a href="www.facebook.com">Facebook</a> [<a href="http://genius.com/Alex-schultz-lecture-6-growth-annotated">Original Transcription</a>]</h4>

<p>Start-ups should focus on getting their product market fit before worrying about growth. But once it comes time to be concerned about growth, the most important thing is retention rates. Pick your metrics wisely, whether they are <em>Confirmed Registered Users (CRU)</em> or <em>Activated Registered Users (ARUs)</em> or something else. Exactly what growth rates are needed for a startup depends on what industry they are in. E-commerce sites require a relatively low retention rate compared to social networks.</p>

<p>A user&rsquo;s <em>magic moment</em> is the point in which they realise the value of your product. This is what you need to get right to increase your user retention. Users need to be shepherded to their magic moment as quickly as possible.</p>

<p>To optimise your user experience, consider your power users. To improve your growth, focus on your marginal users.</p>

<h2>Techniques</h2>

<p>The point of conversion is important and every effort should be made to remove any friction from the work flow. New users should be made aware of your product and the value it offers in a way that it is then easy for the user to sign up and begin using your service.</p>

<p>A company should only resort to large growth tactics when you have established a high retention rate so people don’t come to the website and then leave again.</p>

<p>Ensure you are optimising your site for the right search terms. A useful tool for identifying the right terms is the <a href="https://adwords.google.co.uk/KeywordPlanner">Google keywords planner tool</a>. The most important technique for search engine optimisation is to get valuable links from high authority resources. Internal linking can further improve your ranking. Add a directory so Google can quickly access every page on the site.</p>

<h2>Lecture 7</h2>

<h3>How to Build Products Users Love</h3>

<h4>Kevin Hale Founder of <a href="http://www.wufoo.com/">Wufoo</a> [<a href="http://genius.com/Kevin-hale-lecture-7-how-to-build-products-users-love-part-i-annotated">Original Transcription</a>]</h4>

<p>Japanese has two ways in which to describe when you have finished something: <em>atarimae hinshitsu</em>, meaning <em>taken for granted quality</em> and <em>miryokuteki hinshitsh</em>, meaning <em>enchanting quality</em>. You want to aim for the latter.</p>

<h2>Customers Contact</h2>

<p>There are many opportunities in a product to first seduce the customer: the first email, the way the page links together, the first page load.</p>

<p>Give users an avenue to express their emotional state when asking for feedback or helping them on support. This makes users feel as if you are factoring in their distress or annoyance into the problem-solving process. Reply to customer support requests as soon as possible.</p>

<p>Time spent with direct exposure to customers is hugely beneficial to the quality of your software. <a href="https://www.uie.com/about/consultants/">Jared Spool</a>, founder of User Interface Engineering, found that there is a direct correlation between how much time engineers spend with direct exposure to users and how good their software&rsquo;s design is. The effect is only seen in instances of direct contact, where interaction happens more or less in real time and not through reports or graphs. It also has to be a minimum of every 6 weeks and for at least 2 hours. Otherwise, your software will get worse over time.</p>

<h2>Knowledge Gap</h2>

<p>The <em>knowledge gap</em> is the distance between the knowledge a customer has, and how much they need, to use your production. There are two ways to bridge this gap: get the user to increase their knowledge or decrease the amount of knowledge required to use your product by making it easier or more intuitive. You can teach users through constructs like FAQs, tooltips and documentation.</p>

<h2>Decreasing Churn</h2>

<p>Growth is a function of both user conversion and churn. A one percent increase in conversion and one percent decrease in churn does the same to your growth rate, but the latter is much easier and cheaper to achieve.</p>

<p>It&rsquo;s a good idea to find ways of telling your users what you have done for them since their last login. This communicates people are actively working to make their experience better. This is better than a blog (which most users won&rsquo;t read).</p>

<p>If at all possible, find a way to thank your users for using your product. When this becomes impossible to scale, focus on your highest-paying customers.</p>

<p>Michael Treacy and Fred Wiersema wrote of the <a href="http://www.amazon.com/Discipline-Market-Leaders-Customers-Dominate/dp/0201407191/">three ways to achieve market dominance</a>: you can either have the best price and focus on logistics (eg. Walmart, Amazon), the best product and focus on R&amp;D (eg. Apple) or the best overall solution and focus on being intimate with your customers (eg. luxury brands). The last one is the only one everyone can do at any stage of a company.</p>

<p>Focus on the ease of use of your product before adding polish. Marketing and promotion can be thought of as a tax you pay because your product isn’t fantastic.</p>

<h2>King for a Day</h2>

<p>Because hackathons result in a lot of wasted work that never ends up getting used, Wufoo decided to implement <em>King for a Day</em>, where a randomly selected employee gets the full resources of the company to fix the problems about the product that have been bothering them.</p>

<h2>Remote Work &amp; Organisation</h2>

<p>Wufoo uses remote employees that work four and a half days a week (Friday afternoon is for meetings). One of those days is to perform customer support. While in the three day work period, employees are not allowed to discuss anything for more than 15 minutes; it has to be shelved when the time limit is reached and scheduled for the Friday meeting. Often the problem resolves itself because those involved would sleep on it and come up with a solution or decide it was not really a problem at all.</p>

<h2>Hiring</h2>

<p>If you&rsquo;re going to hire someone to perform remote work for your company, hire them to work on a side project first.</p>

<h2>Workload</h2>

<p>As a manager, you must ride your engineers in a sustainable way so as to avoid burnout.</p>

<h2>Lecture 8</h2>

<h3>How to Get Started, Doing Things that Don&rsquo;t Scale</h3>

<h4>Stanley Tang, Founder of <a href="https://www.doordash.com/">Doordash</a> and Walker Williams of <a href="http://teespring.com/">TeeSpring</a> [<a href="http://genius.com/Walker-williams-lecture-8-doing-things-that-dont-scale-pr-and-how-to-get-started-annotated">Original Transcription</a>]</h4>

<p>A company should aim to turn users into champions for its product.</p>

<h2>Press</h2>

<p>A startup needs to have a goal beyond just being in the press, otherwise you will not end up getting what you want from the coverage.</p>

<p>There are many types of press stories:</p>

<ul>
<li>Product launches</li>
<li>Fundraising</li>
<li>Milestones or metrics</li>
<li>Business stories (New Yorker wants to cover the history of your company)</li>
<li>Stunts</li>
<li>Hiring Announcements</li>
<li>Contributed articles (opinion piece on tech blogs or similar)</li>
</ul>


<p>The mechanics of getting a press release involve evaluating whether people will be interested in hearing about what you want reported. It doesn&rsquo;t need to be ground-breaking - just interesting or new enough. Approaching reporters is like a sales call, so don&rsquo;t get disappointed if individual reporters are not interested in covering you. It&rsquo;s easier to get in touch through someone you know rather than cold calling a reporter.</p>

<p>You must contact reporters far enough in advance that they have enough time to write about your story and publish by your deadline - at least a week before. Once you have a reporter that is interested, you should have as much contact with them as possible (face-to-face or phone calls - not email). You want reporters to invest time in you to increase the chance of them writing about you.</p>

<p>It&rsquo;s helpful to outline the story you want published and go through it over the phone when you speak to the reporter. This is a great way to make sure you don&rsquo;t forget any of the important points</p>

<p>Send a followup email a few days before the story is due to be published with the important information in bold to ensure that nothing is missed or mistakenly reported. This also a time when you should be providing videos, pictures or other accompanying media.</p>

<p>Getting press coverage doesn’t mean you’re successful; you&rsquo;re not getting money or making users happy. Press coverage can be good for getting the first few hundred users, but people do get sick of hearing about you. Saying that, you do want to have a regular PR presence to prevent people from forgetting about you.</p>

<p>After you have laid out your roadmap, you should see if any of it meets any of the 7 story types above. Spacing stories out intelligently can prevent people from getting bored of hearing about you or forgetting about you completely.</p>

<p>It is worth going back to the same reporters and each time offering them leads to other startups or things they may be interested. It will strengthen your relationship and make their job easier.</p>

<p>Some good literature on the subject is stuff by <a href="https://www.google.co.uk/search?q=Startup+PR+Advice+from+former+TechCrunch+writer">Jason Concape</a> (former tech crunch reporter) and the book <a href="http://www.amazon.co.uk/Trust-Me-Lying-Confessions-Manipulator-ebook/dp/B0074VTHH0/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;sr=&amp;qid=">Trust Me, I’m Lying</a> by Ryan Holiday, a former marketer at American Apparel, for the darker side of marketing.</p>

<h2>Lecture 9</h2>

<h3>How to Raise Money</h3>

<h4>Marc Andreessen, Founder of Netscape and Andreessen Horowitz, Ron Conway, Founder of <a href="https://angel.co/silicon-valley-growth-syndicate-1">SV Angel</a>, and Parker Conrad, Founder of <a href="http://www.zenefits.com/">Zenefits</a> [<a href="http://genius.com/Marc-andreessen-lecture-9-how-to-raise-money-annotated">Original Transcription</a>]</h4>

<p><em><em>NB</em>: This was a panel lecture and the views expressed by one or two panel members have been generalised here for simplicity. Please see the <a href="http://genius.com/Marc-andreessen-lecture-9-how-to-raise-money-annotated">source material</a> for a higher-fidelity account of the information contained within.</em></p>

<h2>What Investors Look For</h2>

<p>The things that a venture capitalist considers when contemplating investing in a company are do the founders seem like leaders? And are they highly focused and obsessed with the product? A question that is also often asked of the founders is what inspired them to create the product. Investors are usually looking for a personal problem the founders had. Good communication skills are considered highly important.</p>

<p>Venture capitalism is a business of outliers and extreme exceptions. Of the 4000 venture-fundable companies a year, 200 are funded by top-tier VCs, 15 of those will someday get to a 100 million dollars in revenue and will go on to generate 97% of all returns.</p>

<p>Investors will search for strength, rather than a lack of weakness. Companies that checks all the boxes may still be missing what makes them something special. Companies that have an extreme strength, however, may often have big flaws that investors are willing to tolerate.</p>

<p>When a founder first meets an investor, they must be able to say what their product does in a single sentence.</p>

<p>Founders that attract investor&rsquo;s interest are decisive: decisive to hire, fire and chose direction.</p>

<h2>Investor Risk</h2>

<p>A start-up at the very start just represents a list of risks:</p>

<ul>
<li>Founding team risk</li>
<li>Product risk</li>
<li>Technical risk</li>
<li>Launch risk</li>
<li>Market acceptance risk</li>
<li>Revenue risk</li>
<li>Cost of sale risk</li>
<li>Viral growth risk</li>
</ul>


<p>The <a href="http://pmarchive.com/guide_to_startups_part2.html">onion theory of risk</a> models these risks as a series of layers. The company raises money to peel away layers of risk: raising seed money peels away founding team risk, product risk and initial launch risk; A Round investment peels away product risk, recruiting risk and customer risk. As a founder seeking additional funding, you must be able to illustrate how you&rsquo;ve used previous investments to peel away risks by achieving milestones. You have to calibrate the amount of money you raise and spend to the risk you&rsquo;re facing.</p>

<h2>Fundraising</h2>

<p>Don’t ask for a NDA, it makes investors feel untrusted, but do get things in writing; type an email after investment meetings to confirm what was just said.</p>

<p>Fundraise as efficiently as possible. It&rsquo;s a small step on the way to building your company and should be done quickly so that you may focus on the real work.</p>

<h2>Seed Investments</h2>

<p>Seed investments are generally the first round of funding and are typically in the range of one or two million dollars. The SVG syndicate invest in one of the 30 companies they see every week.</p>

<p>The selection process begins with sending in an executive summary. The investment team votes on whether to make a phone call to proceed with the process. The call is made by someone on the team with the relevant domain knowledge. Background checks are performed on the founders and the market in question is investigated. After a meeting, if the syndicate is interested they try and get other value-add investors involved.</p>

<h2>Venture Stage: Series A Stage</h2>

<p>The top tier venture capitalists usually only invest in two kinds of companies: those that have previously raised a seed round or those with proven founders. The best way to get an introduction is through the seed investors referral network.</p>

<p>Don’t waste time and effort by make it difficult for yourself and seeking more money than you need.</p>

<p>There are limits to how much of the company you should be selling at each stage of fundraising: 10 - 15% at the seed stage and 20 - 30% at the venture stage (venture capitalises tend to be ownership focused). It&rsquo;s important for founders to ask themselves at what point a loss of ownership will start to demotivate them.</p>

<p>Venture capitalises will invest in team first, and the product second. This is in no small part because products often change, but the team does not.</p>

<h2>Lecture 10</h2>

<h3>Culture</h3>

<h4>Brian Chesky, Founder of <a href="www.airbnb.com">Airbnb</a> and Alfred Lin, Former COO of <a href="http://www.zappos.com/">Zappos</a> and partner at Sequoia Capital [<a href="http://genius.com/Alfred-lin-lecture-10-company-culture-and-building-a-team-part-i-annotated">Original Transcription</a>]</h4>

<h2>Defining Company Culture</h2>

<p>It&rsquo;s important to define your company&rsquo;s culture. This can be achieved by a sentence similar to <em>Every day the <strong>blank</strong> and <strong>blank</strong> of each member of the team in pursuit of our company <strong>blank</strong></em>. One set of values to fill in the blanks is: <em>core behaviours, real action, mission</em>.</p>

<p>As a founder, you have to ask yourself what your personal values are: what&rsquo;s most important to you, the business and the people you work with. You should also realise that what <em>not</em> to do is more important than what to do: what are the opposites of the values of the people you don’t like working with? A good culture will allow you to figure out what employees you don’t want to retain.</p>

<p>Define the company culture before you get too big. You must be specific and in-depth when defining the company&rsquo;s goals and values. Good culture values will be supportive of the company’s mission and must be both <em>credible</em> and <em>uniquely tied to</em> the company&rsquo;s mission - not too vague or broad.</p>

<h2>Dysfunctional Teams</h2>

<p>In his book, <a href="http://www.amazon.com/The-Five-Dysfunctions-Team-Leadership/dp/0787960756">The 5 Dysfunctions of a Team</a>, Patrick Lencioni discusses how a lack of trust can derail a company. A healthy team needs conflict and debate to arrive at the right answer and be sure it&rsquo;s the right answer. A reluctance to commit is another problem common in teams - usually because of a lack of confidence in an answer due to the absence of debate. A third failure is people not being held accountable for the things they have committed to.</p>

<p>Companies should interview for both tech and culture fit. You want diversity of background, <em>not</em> diversity of values. AirBnB actually has separate core values interviewers as part of their hiring process.</p>

<h2>Cultural Maintenance</h2>

<p>Culture should be maintained daily by the founders. The first phase of a start-up is building a great product; the second and much longer phase is building and maintaining a great company. Companies that are around a long time have a clear mission, sense of values and a way of doing things that is unique to them. There are usually three to five things that are specific to the company (not nebulous concepts like <em>integrity</em>). Two of AirBnB&rsquo;s values are <em>Champion The Mission</em> and <em>Creative and Frugal</em>.</p>

<p>Being particular about culture is about a long-term investment and can actually slow down progress in the short term. There is no such thing as a good or bad culture; just a strong or weak one.</p>

<p>If there isn’t a deeper core belief within your company, it becomes merely a utility and utilities get sold at commodity prices.</p>

<h2>Lecture 11</h2>

<h3>Hiring and Culture</h3>

<h4>Ben Silberman (Founder of <a href="https://www.pinterest.com/">Pinterest</a> and John and Patrick Collison (Founders of <a href="www.stripe.com">Stripe</a>) [<a href="http://genius.com/Patrick-collison-lecture-11-company-culture-and-building-a-team-part-ii-annotated">Original Transcription</a>]</h4>

<p>The core pieces of culture are:</p>

<ul>
<li>Who do you hire (and what are their values)</li>
<li>What do you do each day (and why do you do it)</li>
<li>What do you choose to communicate (internally and externally)</li>
<li>What do you choose to celebrate</li>
</ul>


<h2>Hiring</h2>

<p>Culture is more like gardening than architecture: you plant seeds and remove weeds.</p>

<p>When hiring the first 10 people of a startup, they should be treated as if each will bring another 10 people along like themselves. The things that are important in the first few employees are:</p>

<ul>
<li>They are genuine and intellectually honest</li>
<li>They are people that others will want to work with and trust</li>
<li>They like to get things finished and care about things deeply.</li>
</ul>


<p>Hiring people off Github resumes or similar is not usually a good idea because it puts a premium on having many shallow projects. You want people who have committed and succeed at deep, significant projects.</p>

<p>Seek people who are doing things differently. You should be trying to hire people who are under-valued or early in their careers. Have a good elevator pitch and perfect your ability to get people excited about your company, quickly. Everyone you speak to may be potential future employees once you have grown your company a little more.</p>

<p>It&rsquo;s often the most difficult to hire people to work on niche or overly specific things. Be upfront about the risks of your business so potential hires are informed are prepared.</p>

<p>When interviewing, have a list of questions you can rotate through and constantly reevaluate whether they are good differentiators between good and bad candidates. Try turning qualitative questions into quantitative ones. Ask references <em>Is this person in the top 1%, 5%, or 10% of the people you’ve worked?</em> rather than <em>What&rsquo;s the best thing about this person?</em>. Ask candidates about their references: <em>If I asked <strong>blank</strong> what it is that you’re best at, what would they say?</em></p>

<p>When hiring a new employee, make sure you give them an overview and don’t let them just think your company is the little problem they’ve been hired to help solve. Get a new hire up and running as quickly as possible to find and resolve problems early. Give constant feedback to new additions to the company. In start-up companies, you need every employee to be able to start contributing value immediately.</p>

<h2>Scaling</h2>

<p>When scaling the business, established self-contained units; think of them as mini-start-ups. Be sure to give them the resources they need to achieve their goals and make sure they understand their objectives.</p>

<p>The time ahead for which you plan grows as the business does. In the first few months, you are often thinking only a month or so in advance while after the first 12 or 18 months, you should be planning 12 months in advance.</p>

<p>As your company grows, you need to be aware that what is optimal for you is not necessarily optimal of the business or the other employees working for it.</p>

<h2>Lecture 12</h2>

<h3>Building the Enterprise</h3>

<h4>Aaron Levie - CEO &amp; Cofounder of <a href="www.box.com">Box</a> [<a href="http://genius.com/Aaron-levie-lecture-12-sales-and-marketing-annotated">Original Transcription</a>]</h4>

<p>Enterprise software is traditionally very competitive and difficult to build a business out of. It was very slow moving (couldn&rsquo;t break anything for existing customers) and the sales took a long time to execute. Customers could take a long time to spend any money - it could be years before they decide to buy - and it could take several more years before it was implemented and used. It was also difficult and costly to sell. The technology was usually complex and little thought was put into UI design.</p>

<p>Enterprise software has now moved largely into the cloud. This shift means it can now make sense for much smaller companies to produce enterprise software. Enterprise software has also become more user-led, rather than IT lead. This is great news because when tech decisions are IT-lead, the incumbents generally win the business because they already have relationships. With user-lead tech, users are bringing in their own software. This creates an opportunity to sell to the enterprise that wants to have better control or consistency across their system. With the introduction of mobile phones, enterprises now have to monitor their full network.</p>

<p>Another significant change is that enterprises are now changing how they’re getting their products to people and they need platforms to be able to do that. The customers enterprises go after need new experiences of working with the enterprises&#8217; products for them to remain engaged or connected.</p>

<p>When considering building enterprise software, always look for environments with changing technology factors. The moments of opportunity where a tech revolution is about to happen in an industry occur when the raw materials change: for example, the cost of data storage going down and an increase in connection speeds make it easier to centralise data storage and services and let users access them on demand. Enterprises are not looking for the cheapest solution, but overall efficiency; they have a different value equation to commercial software.</p>

<p>Enterprises have to adapt to disruptions to their industries. All industries are currently going through business model and technology-oriented disruptions and they are going to need startup software to survive. One area of interest is <em>omni-channel commerce</em>, or the ability for customers to shop online, on your phone or in store and have things delivered. Another such area is <em>Telemedicine</em>: transferring health records, offering health monitoring and purchasing wellness programs. Similarly, entertainment is now moving from linear programming to on-demand; media companies will want big data to find their target viewers.</p>

<p>To identify technology disruptions, look for new enabling technologies or trends that create a wide gap between how things are currently done and how they can be improved.</p>

<p>Businesses try the same ideas that were trialed 10 - 15 years ago, but with the current technology. Take note of when a technology becomes available that makes an old idea now possible. You need to find gaps that are significant enough and that you can provide a solution to, where incumbents offering a whole solution cannot compete because it does not make technical or financial sense. A great example is building software that is platform agnostic: incumbents want software that is only compatible with their other offerings, to form a vertical stack.</p>

<p>You want to modularise your enterprise software, rather than customise. Build a platform rather than a custom vertical experience. Give thought to openness and APIs to work with other software the company may wish to use.</p>

<p>Going forward, every enterprise will have a software component. They will form lots of partnerships to work faster rather than trying to acquire the necessary expertise in all the necessary areas, themselves.</p>

<h2>Securing Customers</h2>

<p>Find potential customers that are at the edge of their group and leverage them as your first users. Focus on the user and hire salespeople that are domain space oriented to help potential customers navigate your product and landscape.</p>

<p>Some suggested reading is <a href="http://www.amazon.co.uk/Crossing-Chasm-Marketing-Technology-Mainstream/dp/1841120634">Crossing the Chasm</a>, <a href="http://www.amazon.co.uk/Innovators-Dilemma-Technologies-Management-Innovation-ebook/dp/B00E257S86/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1424295512&amp;sr=1-1&amp;keywords=innovators+dilemma">The Innovator&rsquo;s Dilemma</a> and <a href="http://www.amazon.co.uk/Behind-Cloud-Salesforce-com-Billion-Dollar-Company--ebook/dp/B002PJ4SU2/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1424295563&amp;sr=1-1&amp;keywords=behind+the+cloud">Behind the Cloud</a>.</p>

<h2>Lecture 13</h2>

<h3>How to be a Great Founder</h3>

<h4>Reid Hoffman founder of <a href="www.linkedin.com">LinkedIn</a> [<a href="http://genius.com/Reid-hoffman-lecture-13-how-to-be-a-great-founder-annotated">Original Transcription</a>]</h4>

<h2>Team</h2>

<p>It&rsquo;s more appealing to investors if you’re a team of two or three to spread expertise and skills across multiple people and compensate for any one founder&rsquo;s weaknesses. Investors will pay special attention to what domain you’re in and which co-founders are important for that domain. The founding team will need to adapt the company as is needed. A high degree of trust between co-founders is essential.</p>

<p>Founders should be willing to relocate to wherever maximises their chances of success for the company’s product. This is to take advantage of network effects.</p>

<p>Being contrarian, or contrary in your views, is easy, but being contrarian and right is difficult. To be contrarian is to be contrary within a particular context or audience. You need to know and be able to articulate what it is that you know that others do not.</p>

<h2>Investment Thesis</h2>

<p>As a founder, you must navigate a good many paradoxes people tell you about what you’re supposed to be doing and how you&rsquo;re supposed to be behaving. Examples include: you have to do things yourself <em>and</em> recruit people to do those things; you must be flexible <em>and</em> persistent; you must have vision <em>and</em> stay firm; listen to data, listen to customers <em>and</em> pivot.</p>

<p>To guide you as to when you should do each, you need an investment thesis that includes what you know that you think other people don’t know. Use this thesis to evaluate whether what you&rsquo;re doing is <em>increasing</em> confidence in your thesis, or <em>decreasing</em> it. If what you’re doing is not increasing confidence in your investment thesis, you can use it to guide you on what you should do to get back on track. This will allow you to hold your beliefs, but still listen to criticism, hear negative feedback, and evaluate competitive entries and see whether each changes your investment thesis, or strengthens it.</p>

<p>Your investment thesis will focus you both internally, when building the product and ignoring competitors, and externally when recruiting, meeting people and gathering domain intelligence. If you are creating a market rather than discovering one, you need to include in your investment thesis how you’re going to get early adoption and why that market should exist.</p>

<p>You should be always combining your vision with the available data. It&rsquo;s important to understand that the data exists within the framework of your vision and sometimes the data can change end up changing it.</p>

<h2>Risk</h2>

<p>Entrepreneurs are often seen as risk-takers and the greatest opportunities exist when there is considerable risk. However, you must pick the important risks and minimise others. Think through minimising the risks as you&rsquo;re executing.</p>

<h2>Strategy</h2>

<p>You should always be focused on solving the problem that is immediately in front of you, but also making sure you’re largely working in your intended direction.</p>

<p>The levels of strategy you should be thinking in are (in order):</p>

<ol>
<li>Product</li>
<li>Distribution: it should be specialised, <em>what is the hack that I know that other people don’t know?</em></li>
<li>Finance</li>
</ol>


<p>You must execute with all aspects of your strategy in mind. It can be helpful to be paranoid about whether you’re tracking against your investment thesis or not.</p>

<h2>Lecture 14</h2>

<h3>How to Operate</h3>

<h4>Keith Rabois Partner at Khosla Ventures and former COO of Square [<a href="http://tech.genius.com/Keith-rabois-lecture-14-how-to-operate-annotated">Original Transcription</a>]</h4>

<h2>Process</h2>

<p>You want to eventually get a company that “idiots could run”; eventually you want to be at a point where all procedures are either automated or easily executable.</p>

<p>Your role as a leader is to maximise output of your group (and those that are dependent on your group). A good book to read on the subject is by <a href="http://www.amazon.com/High-Output-Management-Andrew-Grove/dp/0679762884/ref=la_B000AQ48KW_1_1?s=books&amp;ie=UTF8&amp;qid=1424297526&amp;sr=1-1">High Output Management</a>. There is an old adage warning about measuring motion and confusing it with progress. You want to focus on output, not input.</p>

<p>When you start out as a company, everything should feel like a mess (otherwise you&rsquo;re likely not moving or innovating fast enough). You shouldn’t have too much process or predictability. Your role as a leader is to triage problems and decide what problems need to be addressed and what will likely go away on their own.</p>

<h2>Being an Editor</h2>

<p>An apt metaphor for categorising different jobs is as either one of two tasks: editing or writing. The most important task of an editor is to simplify things; you need to boil most things down to a framework of two or three things so people can easily keep it in mind and apply it. Editors also ask questions and search for ambiguities and seek out clarifications. It&rsquo;s helpful to find the three or four most important questions to ask for a given situation and not get bogged down in extraneous details and unknowns. Editors also work to establish a consistent voice across a product or company.</p>

<p>Rather importantly, editors also allocate resources and delegate tasks. A side effect of this is that you become responsible for every task you have delegated. The trick is to be able to delegate but not abdicate by managing intelligently, based on the colleague and the task. The more the person you are delegating to has done similar work before, the more freedom you should award. In this respect, your management style should be dictated by your employees, not you. Deciding when you should perform a task yourself or delegate it can be resolved by considering your own confidence in the task and how important it is that it not be done wrong. If you are confident in your own abilities and the importance of the task is great, complete it yourself. If you have low confidence in your abilities or the task is of low importance, delegate it.</p>

<h2>Two Types of Employees</h2>

<p>The team is also something that will require editing from time to time. People can be considered either <em>barrels</em> (of weapons, not containers) or <em>ammunition</em>. You can only &ldquo;shoot through the number of barrels you have&rdquo;; barrels can take an idea from conception to execution and align others in the same direction. You can identify barrels by expanding the responsibilities of employees to see what they can cope with.</p>

<h2>Managing Focus</h2>

<p>You often need to spend a lot of time focusing people. Peter Thiel of Paypal insisted everyone just focus on one thing because most people will solve “B+” problems instead of “A+” problems if they have multiple responsibilities. You need to give them no other choice but to solve the hard, important problems for the business.</p>

<h2>Automation Tools and Metrics</h2>

<p>Your goal as a editor is to use “less red ink” over time; this is a good way to gauge how effectively you are communicating with your colleagues. You don’t want to have to make all decisions yourself, you want to aim for procedures and tools that make the same decisions you would, with a high fidelity. This can be achieved by building a dashboard, which must be drafted by the founder. It will feature metrics for what is important to the company because everyone in the company should have access to this information to see how the company is tracking. Notes for every meeting can also be sent to staff to keep everyone abridge of what is going on.</p>

<p>It&rsquo;s important to ensure you capture paired metrics for all measures of progress to fight against measuring only one dimension, to the detriment of another. An example is if you wished to reduce the fraud rate in your system, you must also measure how many false positives occur to ensure you have the full picture. Keep an eye out for anomalies or deviations from the expected behaviour.</p>

<p>Try to get all the details right to improve the how the company is executing overall. Perform calendar audits and compare your priorities with how much time you’re spending addressing each.</p>

<h2>Lecture 15</h2>

<h3>How to Manage</h3>

<h4>Ben Horowitz founder of <a href="http://a16z.com/">Andreessen Horowitz</a> and <a href="https://www.crunchbase.com/organization/opsware">Opsware</a> [<a href="http://genius.com/B-horowitz-lecture-15-how-to-manage-annotated">Original Transcription</a>]</h4>

<p>When you are making a management decision, you have to understand how it’s going to be interpreted by all points of view. You need to add up to all employees&#8217; views and incorporate that into your decision.</p>

<h2>Case Study 1</h2>

<p>To illustrate, a case study: dealing with an executive that is a hard worker, but isn’t working out. First option: fire them. It&rsquo;s harder for an employee to explain to future employers that they&rsquo;ve been fired than demoted. Second option: demotion.
If the employee has high equity, people aren’t going to think it’s fair that a non-executive has so much equity. Third option: revoke some of his equity when you demote him. It&rsquo;s likely that an ex-executive is no longer going to be productive after their equity has been revoked. And now people will see him in his new position as less important and not worth listening to.</p>

<h2>Case Study 2</h2>

<p>A second case study: an employee asks for a raise. Employees asks for raises for a reason and you want to be fair to your good employees. First option: give them a raise. The employee will feel great, but suddenly other employees will be pressured to ask for a raise because maybe they are missing out on money. It seems that you’re not evaluating performance, but instead rewarding those who just ask for a raise. Second option: user a transparent, structured and periodic review process. A process protects the culture because it lets employees know that you will evaluate performance by incorporating different views from within the company, on your own schedule. The rest of the time they don&rsquo;t have to worry about whether they should be asking for a raise or not.</p>

<h2>Employee Shares</h2>

<p>Reviewing one of Sam Atlman’s blog posts: when an employee leave a company, they often don’t have the money to buy stock options before the required 90 days before forfeiture, so they are stuck at the company or are helpless if they get fired. Sam suggests a 10 year time span to buy the shares, instead.</p>

<h2>Firing</h2>

<p>As a hirer it’s your job to hire someone capable for the job and to match the hire’s abilities with the needs of the company. If it doesn&rsquo;t work out and they need to be fired, you need to explain the situation you are in and what you didn’t know or understand at the point when they were hired.</p>

<h2>Lecture 16</h2>

<h3>How to Run a User Interview</h3>

<h4>Emmett Shear, Founder and CEO of <a href="http://justin.tv/">Justin.tv</a> and <a href="http://www.twitch.tv/">Twitch</a> [<a href="http://genius.com/Emmett-shear-lecture-16-how-to-run-a-user-interview-annotated">Original Transcription</a>]</h4>

<h2>Choosing Your Inteviews</h2>

<p>Talk to all the different users that are going to use your service, but focus on the important users and figuring out who they are. Talk to six or seven different people who represent different potential user types. In your discussions, focus on the problems that they face and their current usage habits. Stay as far away from features as possible because you end up getting feature requests. You just want to understand how they solve their problem using their current approach.</p>

<h2>Getting Feedback and Commitment</h2>

<p>You need to come up with that special thing that will get users to switch from what they’re already using to your product. You want to get a prototype in front of users as quick as possible to get feedback. While people will agree a feature sounds great, often they’re unwilling to switch to get it and a prototype helps identify how persuasive the product really is at luring users from other approaches. You can use whether or not people are willing to pay for the service to quickly clarify whether you’re onto something or not.</p>

<h2>Identifying Product Problems</h2>

<p>The problems people using your service raise are probably not really your product&rsquo;s big problems because people are using your service despite them. Feedback from people who are using competitor products will tell you the problems that are so bad that they are preventing users from using your service. Non-users are also good to talk to, to find out what would make them start using a service like yours. It will help you learn the things that allow you to expand the size of your market.</p>

<p>A good way to get buy in from your colleagues about new directions or feedback is to record interviews. Taking notes is disruptive in the interview and are not as persuasive once you get back to the company.</p>

<h2>Interview Mistakes</h2>

<p>A mistake often made in user interviews is showing people your product. You&rsquo;re interested in what&rsquo;s already in their heads and habits. Another mistake is asking users about a feature <em>you</em> really want to build. A third is talking to who’s available rather than who you need to be talking to. Really put effort into getting to talk to people that will give different dimensions to who might your use your production.</p>

<p>You should be conducting interview that are interactive in person, on the phone or over Skype, so that you can invite elaboration on points of interest. Email is not a good tool for conducting an interview.</p>

<h2>Lecture 17</h2>

<h3>How to Design Hardware Products</h3>

<h4>Hosain Rahman, CEO and Founder of <a href="https://jawbone.com/">Jawbone</a> [<a href="http://tech.genius.com/Hosain-rahman-lecture-17-how-to-build-products-users-love-part-ii-annotated">Original Transcription</a>]</h4>

<h2>The Internet of Things</h2>

<p>The <em>Internet of Things</em> is a bit of a mess; everything has a wireless connection and an app, but there is little connectivity between devices. It needs organising principles and the focus needs to shift from the <em>Internet of Things</em> and to the individual users.</p>

<p>Your smart devices can become a “perfect context engine” for your life and your health. To do well as the industry moves in this direction, you need to be good at the full stack. You need to build hardware that is comfortable and non-intrusive and software that is pleasant and informative to use, and bring it together with data analysis that is able to discern and present useful information.</p>

<h2>The Hardware Creation Process</h2>

<p>The process of hardware creation has the following phases:</p>

<ul>
<li>Exploration</li>
<li>Early Validation</li>
<li>Conception</li>
<li>Heavy Planning</li>
<li>Launch</li>
<li>Iteration</li>
</ul>


<p>During the Exploration Phase, you need to think about where the world&rsquo;s going, what the company&rsquo;s strategy is, and what the brand stands for. You need to imagine the future and how you’re going to disrupt the status quo. It&rsquo;s much like a building and tinkering phase.</p>

<p>In the Early Validation Phase, you try and prove the concepts you came up with and perform empirical data collection to see where you think the ideas might go. The Conception Phase occurs once you&rsquo;ve proven some of your theories and is the opportunity for innovation about how the product’s going to work.</p>

<p>The Heavy Planning Phase involves deciding on all the necessary trade-offs across  all levels of the stack to make your product possible. And then its the Development Phase and you&rsquo;re solving problems as you implement the product.</p>

<p>During the Launch Phase you learn what users think and are able to reevaluate where the product sits in the <em>experience continum</em>. This is when you examine what you achieved and where you failed. It&rsquo;s using this insight that you iterate and begin the process again.</p>

<h2>Lecture 18</h2>

<h3>Legal and Accounting Basics for Startups</h3>

<h4>Kirsty Nathoo, CFO at Y Combinator, and Carolynn Levy, General Counsel at Y Combinator [<a href="http://genius.com/Kirsty-nathoo-lecture-18-mechanics-legal-finance-hr-etc-annotated">Original Transcription</a>]</h4>

<h2>Formation</h2>

<p>A company is a separate legal entity and insulates the founders from personal financial liability. An online service that can help you get incorporated is <a href="www.clerky.com">clerky</a>. The easiest place in America to form a company is Delaware.</p>

<p>You need to assign all intellectual property to the company, or establish that all code you or any employees write belongs to the company, otherwise the company has no value.</p>

<h2>Equity Allocation</h2>

<p>The equity should be about even. The execution of an idea has greater value than the idea itself. Don&rsquo;t over-assign equity to the founder that is credited with coming up with the idea for the company.</p>

<p>Vesting is when a founder gets full ownership over their shares over a period of time (usually 4 years). If they leave early the company can buy back some of the shares. The arrangement is also usually conditioned by a 1 year cliff; if the individual leaves before 1 year, they receive none of their shares. The company purchases back shares at the same price per share as the founder paid.</p>

<p>Vesting protects the founders who stay in the company for the long haul from their co-founders leaving early and taking a large part of the company with them. It also invests the founders in the success of the company.</p>

<h2>Raising Money</h2>

<p>There are two ways of raising money: when the price or value of the company is set, typically in the &ldquo;series &#8220;A or &#8220;series B&rdquo; rounds; or when the price isn&rsquo;t set, typically in the &ldquo;seed round&rdquo;. But people can call rounds whatever they want. Not setting the price is the most straightforward and fast way of raising money. This is usually done using convertible notes or safes, meaning the investor is paying money up front for the right to receive stock at a later date when price is set by investors in a priced round. In this instance, the investor is not a shareholder and therefor has no voting rights. A <em>valuation pack</em> sets the cap on the price for conversion into shares when it comes time to receive the stock.</p>

<p>Investors should be sophisticated; they should have money to invest and understand the nature of investing. Such investors are typically termed <em>accredited investors</em>.</p>

<h2>Common Investor Requests</h2>

<p>Commonly investors will request a board seat, either to keep a close eye on their money or because they believe they can add value to the business through their expertise. Usually, you should decline. Investors should take on the role of defacto advisor with no official title.</p>

<p>Investors may also request pro-rata rights, or the right to maintain a given percentage ownership of a company by being able to buy more shares. This is a common request and not necessarily a bad thing. It often ultimately means dilution of the founder&rsquo;s ownership, though.</p>

<p>Investors can also request information rights. While monthly updates are good, giving updates that are more often or more invasive than that is a cause for concern.</p>

<h2>Founder Payroll</h2>

<p>Founders are really just employees of the company. As working for free is illegal, the founders must be paid (at least minimum wage) and the company must pay payroll taxes.</p>

<h2>Firing</h2>

<p>Fire quickly and don’t let a bad employee linger. Be sure to communicate effectively and make clear statements. Don&rsquo;t apologise. Fire employees face-to-face and in the presence of a third party. When the ex-employee leaves, cut off access to all systems and purchase the shares they have now forfeited, immediately.</p>

<h2>Metrics</h2>

<p>The key financial metrics for a start-up are <em>cash position</em> and <em>burn rate</em> or how quickly you are going through your funding.</p>

<h2>Lecture 19</h2>

<h3>Sales and Marketing; How to Talk to Investors</h3>

<h4>Tyler Bosmeny, founder and CEO of <a href="https://clever.com/">Clever</a> and Michael Seibel, founder of <a href="http://justin.tv/">Justin.tv</a> and <a href="https://socialcam.com/">Socialcam</a> and Partner at Y Combinator [<a href="http://genius.com/Tyler-bosmeny-lecture-19-sales-and-marketing-how-to-pitch-and-investor-meeting-roleplaying-annotated">Original Transcription</a>]</h4>

<p>At the early stages of your startup you’re either talking to users or building your product. Talking to users is sales and your advantages as a founder are your passion and domain knowledge.</p>

<h2>Finding and Approaching Potential Customers</h2>

<p>The stages of sales can be thought of as a funnel that you move customers through. The first stage is <em>Prospecting</em> or figuring out who&rsquo;s interested.</p>

<p>Everett Rogers&#8217; adoption curve illustrates that only 2.5% of companies are early adopters and will even consider buying a service from a startup. Use your personal network and industry conferences to find some members of that 2.5%. You can use emails to approach potential clients and keep them really concise and to the point; it makes it possible to customise each to the recipient. Tell them who you are, what you do and extend an invitation to meet and talk more.</p>

<p>During phone conversations, shut up and listen. Some sellers aim for as low as 30% talking, 70% listening. Ask questions such as why they even took your call and find out as much as you can from the potential customers. <a href="https://www.uberconference.com/">UberConference</a> is a tool that can tell you how much time you spent talking on each phone call.</p>

<p>Followup emails and have a drive to seek closure. Finding out who is really serious about buying your production. Get people to a <em>yes</em> or <em>no</em> as quickly as possible; <em>maybes</em> are a drain on your resources.</p>

<p><em>Redlining</em> is the process of negotiating details of the purchase of your product. One of the closing traps companies fall into are quibbling over minor details, or encountering customers that saying they would commit to buying your product if there was just one more feature. If this occurs you should either get them to sign on the condition that you include in the contract that you will build the feature or pass on them completely. Another mistake is falling into the <em>free trial trap</em>; if a customer asks for a free trial, instead offer them a period in which they are able to opt-out if they don&rsquo;t like your product.</p>

<h2>Revenue</h2>

<p>Do things that don’t scale and find the things that can be adapted to scale.
<a href="http://christophjanz.blogspot.co.uk/2014/10/five-ways-to-build-100-million-business.html">5 Ways to Build a 100 Million Dollary Company</a> explains how you can sell 1000 products at $100,000 or 10,000 products at $10,000 or 100,000 products at $1000, etc. You need to know which bucket your company is going to fall into and scale your price and approach accordingly.</p>

<h2>Pitch</h2>

<p>The best way to improve your pitch is to make your company better.</p>

<p>You have to be able to simply explain what you do and why you need money. You should have two pitches: A thirty second patch and a two minute pitch. In the thirty seconds pitch, you should have three sentences. The first should be what your company does, assuming the listener knows nothing about your industry or technology. The second sentence should reveal how big your market is. The third is how much traction your company has - you must convince people that you&rsquo;re moving fast.</p>

<p>The two minute pitch should be reserved for people who are interested. This is for people who may wish to give you money or work for you. Here you must provide a unique insight about your market; tell the investors something they, or the major players in your market, don&rsquo;t already know. You need to also discuss your business model: how you&rsquo;re going to make money. There is no need to be original and no one will hold you to your ideas for a revenue stream down the line.</p>

<p>Investors will also want to know about your team: only mention impressive things your team has done that may have made other investors money. Explain how many founders there are (hopefully between 2 and 4), how many of them are technical (hopefully > 50%), how you know each other (hopefully for at least 6 months) and how much time you are all dedicating to the company (hopefully all full time).</p>

<p>You need to know what you&rsquo;re asking for from investors. You need to be able to articulate whether you want convertible notes, or safes or something else; what the cap of that safe is; how much money you&rsquo;re seeking to raise and what&rsquo;s the minimum cheque size.</p>

<p>Tell a narrative about your company and the problem it is trying to solve that make sense to people. Ask for money and be specific. Anything other than a cheque or wired funds is a &lsquo;No&rsquo;. Do due diligence on investors and confirm they are the sort of investors you want for your company.</p>

<h2>When to Fundraise</h2>

<p>Raise money when you have more traction, not less. Talk to people about your startup to get the word out and build traction and have a plan to get your product to market with very little money. Schedule all fundraising during the same week and get it over and done with quickly. And know when to stop fundraising.</p>

<h2>Lecture 20</h2>

<h3>Later-stage Advice</h3>

<h4>Sam Altman [<a href="http://genius.com/Sam-altman-lecture-20-closing-thoughts-and-later-stage-advice-annotated">Original Transcription</a>]</h4>

<p>There are some things you need to think about as your company scales (after you have product market fit) and become important between months 12 and 24 - usually when you&rsquo;re about 25 people.</p>

<h2>Management</h2>

<p>When you start, management is totally flat and everyone reports to the founders. This works best in the beginning and allows you to move fast. However, when this communication structure fails, it will fail all at once. You need to replace this with a system in which all employees know who the exactly one person that they report to, is. Clarity and simplicity in a management structure are paramount. As a founder, when you reach about 25 people, the focus shifts from creating a great product to creating a great company, which is much harder.</p>

<h2>Common Mistakes</h2>

<p>A common mistakes made by founders is being afraid to hire senior employees. In the beginning, hiring senior people is usually a mistake. However, when it comes time to implement more structure, it&rsquo;s valuable to hire senior executives who will take over and run parts of the company so the founder can focus on what&rsquo;s important.</p>

<p><em>Hero Mode</em> is the extreme of leading by example. You should not continue to burn the midnight oil to get all the work done as it grows with your company. Its ok to get behind on work temporarily why you go off and hire people to help do that work. Hire enough people that based on your trajectory, they will handle the workload for quite a while.</p>

<p>Delegation is sometimes difficult to do correctly. Be sure to allow managers the  autonomy to make important decisions; it&rsquo;s better to explain your considerations and the importance of the decision and let them make it.</p>

<p>Another problem is not getting your personal organisation right. Be sure that how you&rsquo;re spending your time matches your priorities. It&rsquo;s helpful to write down how you do things and why. An internal wiki is the only way of scaling the company&rsquo;s core processes and rationale to all employees as you grow.</p>

<p>Generally as a company grows, employees don’t get as clear feedback about performance. If they’re doing well, there should be a clear path to how it relates to compensation. Compensation bands are useful as a company grows to create a clear path or progression for employees.</p>

<h2>Equity</h2>

<p>As a founder, you should be giving out equity to employees. You should plan to give out between three and five percent of the company every year. You should also stay in front of people’s vesting and have refresh packages available to keep good employees as they approach the end of their vesting.</p>

<p>You should be aware that when you cross a certain number of employees, your company will have new legal standards to meet (sexual harassment, etc).</p>

<p>Monitor employees for burnout and schedule work accordingly.</p>

<p>Announce potential new hires internally before extending an offer to see what your current employees may already know about the new hire. Have a good on-boarding program to get new hires set up and running as quickly as possible.</p>

<p>A company suffers without diversity and you should make a special effort to introduce diversity of perspective before you reach 25 people. You want diversity of backgrounds, but <em>not</em> diversity of vision. Hire people that are complementary and aligned towards the same goal.</p>

<h2>Company Productivity</h2>

<p>As a company grows, the productivity of its employees goes down. You need to keep the company aligned in the same direction and every employee should know the roadmap for the next three to six months. It&rsquo;s important to simplify and reiterate the company&rsquo;s goals and not give your employees a chance to forget.</p>

<p>Establish and maintain transparency and rhythm within your company. Have a management meeting every week and an all-hands meeting once a month.</p>

<h2>IP and Trademarks</h2>

<p>In America, 11 months after you announce something it is a good time to file a provisional patent - this buys you an addition 12 months to file a full patent if you decide you need one and is much cheaper than purchasing that patent upfront. This is also a good time to file trademarks and collect domains.</p>

<h2>Finance and Tax</h2>

<p>Create a <em>Financial Planning and Analysis (FP&amp;A)</em> model of the business and hire a full-time fundraiser. Set up the tax structure of the organisation.</p>

<h2>Losing Focus</h2>

<p>As you grow, your customers and the media start to turn against you. Be prepare for this and don&rsquo;t lose focus. Losing focus can also be a sign of burnout. When this happens, you start to want to do easy or gratifying things rather than the important ones.</p>

<h2>Business Development</h2>

<p>Try to develop a relationship with the people you’re doing business with and find a way to connect with them beyond the deal. Always try to have alternative options. Be persistent and ask for what you want.</p>

<h2>Failing</h2>

<p>The overwhelming majority of startups fail. If you are going to fail, tell your investors you&rsquo;re failing - they expect most of their investments to fail. You don&rsquo;t want it to come as a shock to your employees. Help them find new jobs and offer three to four weeks severance pay.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SourceTree Keyboard Shortcuts]]></title>
    <link href="http://greena13.github.io/blog/2015/02/01/sourcetree-keyboard-shortcuts/"/>
    <updated>2015-02-01T09:32:42+00:00</updated>
    <id>http://greena13.github.io/blog/2015/02/01/sourcetree-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<p>After wasting hours in search of a good list of keyboard shortcuts available in Atlassian&rsquo;s SourceTree and feeling utter despair at <a href="https://answers.atlassian.com/questions/238357/where-can-i-find-a-list-of-mac-keyboard-shortcuts-for-sourcetree">how slow Atlassian is being at delivering this information</a>, I thought I&rsquo;d share the ones that I discovered through brute force and determination.</p>

<p>These were discovered and are only applicable on a Mac (although I am sure the Windows equivalents are easy to deduce), at the Commit All.. Screen (cmd + shift + c).</p>

<p>I would be <em>extremely</em> interested in hearing about any that are not already listed. Please post in the comments below.</p>

<h2>Navigation &amp; Menus</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>File Status Screen</strong> </td>
<td style="text-align:right;"> cmd + 1 </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Log Screen</strong> </td>
<td style="text-align:right;"> cmd + 2 </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Search Screen</strong> </td>
<td style="text-align:right;"> cmd + 3 </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Repo select window</strong>  </td>
<td style="text-align:right;">  cmd + b  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>New repo</strong>  </td>
<td style="text-align:right;">  cmd + n  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Command history</strong>  </td>
<td style="text-align:right;">  cmd + shift + w </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Hide/show sidebar</strong>  </td>
<td style="text-align:right;">  cmd + shift + k </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Spelling and grammar</strong>  </td>
<td style="text-align:right;">  cmd + shift + ; </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Settings</strong>  </td>
<td style="text-align:right;">  cmd + ,  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Help</strong>  </td>
<td style="text-align:right;">  cmd + shift + / </td>
</tr>
</tbody>
</table>


<h2>Staging &amp; Commit Operations</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>Commit All&hellip; Screen</strong>  </td>
<td style="text-align:right;">  cmd + shift + c </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Commit options</strong>  </td>
<td style="text-align:right;">  cmd + shift + o </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Reset Selected File</strong> </td>
<td style="text-align:right;">  cmd + shift + r </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Diff</strong>  </td>
<td style="text-align:right;">  cmd + d  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Remove Selected File</strong> </td>
<td style="text-align:right;"> cmd + delete </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Search</strong>  </td>
<td style="text-align:right;">  cmd + shift + h </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Refresh</strong>  </td>
<td style="text-align:right;">  cmd + r  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Find</strong>  </td>
<td style="text-align:right;">  cmd + f  </td>
</tr>
</tbody>
</table>


<h2>Branch  Operations</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>Stash</strong>  </td>
<td style="text-align:right;">  cmd + shift + s </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Add Tag</strong>  </td>
<td style="text-align:right;">  cmd + shift + t </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Branch</strong>  </td>
<td style="text-align:right;">  cmd + shift + b </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Merge</strong>  </td>
<td style="text-align:right;">  cmd + shift + m </td>
</tr>
</tbody>
</table>


<h2>Repository Operations</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>Fetch</strong>  </td>
<td style="text-align:right;">  cmd + shift + f </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Pull from repository</strong>  </td>
<td style="text-align:right;">  cmd + shift + l </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Remotes</strong>  </td>
<td style="text-align:right;">  cmd + shift + , </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Open Working Copy</strong>  </td>
<td style="text-align:right;">  cmd + o  </td>
</tr>
</tbody>
</table>


<h2>Window (Normal Mac Shortcuts)</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> <strong>Action</strong>  </th>
<th style="text-align:right;"> <strong>Shortcut</strong> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> <strong>Quit</strong>  </td>
<td style="text-align:right;">  cmd + q  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Close window</strong>  </td>
<td style="text-align:right;">  cmd + w  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Hide</strong>  </td>
<td style="text-align:right;">  cmd + h  </td>
</tr>
<tr>
<td style="text-align:left;"> <strong>Minimise</strong>  </td>
<td style="text-align:right;">  cmd + m  </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Questions for a Development Job]]></title>
    <link href="http://greena13.github.io/blog/2015/01/17/interview-questions-for-a-development-job/"/>
    <updated>2015-01-17T08:35:20+00:00</updated>
    <id>http://greena13.github.io/blog/2015/01/17/interview-questions-for-a-development-job</id>
    <content type="html"><![CDATA[<p>Last year I went through the rather exciting process of interviewing for a series of positions in search of a new development job. Having sat down and thought about what I had gained from my previous working environments, I compiled a list of questions that I thought would help me gauge the type of work I would be doing and the environment I would be a part of if I took the position.</p>

<p>In the hope that they may assist others, I have decided to document them here. I do not claim to have come up with them all myself (some are from friends and family, others I ran across somewhere on the web), but most were inspired by my own previous experience.</p>

<h2>People &amp; Company</h2>

<ul>
<li>What projects are currently on-going?</li>
<li>What is the current team like?</li>
<li>What sort of working environment do you offer?</li>
<li>How does the company support people of different personality types and empower them to get the best from themselves within your working environment?</li>
<li>How do you meet and communicate information within the company?</li>
<li>How do you share knowledge and resources within the company?</li>
<li>What sort of office hierarchy does the company use? How flexible is it?</li>
<li>What parts about how the office is organised and run are open to suggestions? What things are not?</li>
<li>What sized teams do people work in? How often do those teams change? How are they organised?</li>
<li>How do you invest in and support your developers?</li>
<li>What’s important to the company&rsquo;s culture?</li>
<li>What is the company’s goals or road map for the next 12 months?</li>
<li>What attracted you to the company?</li>
<li>How do most people choose to get to work each morning?</li>
</ul>


<h2>Job Responsibilities</h2>

<ul>
<li>Does this position involve design as well as development?</li>
<li>How much technical and creative freedom is to be expected?</li>
<li>What would be my role here in the company for the first few weeks and how will it change in 3 months time?</li>
<li>What is your best guess at the relative time spent developing new features and performing maintenance or bug fixing?</li>
</ul>


<h2>Technical</h2>

<ul>
<li>What technology could this role offer me the chance to work with?</li>
<li>What sort of testing and quality management measures do you have in place?</li>
<li>What software do you use in the office for version control, communication, deployment, data storage and bug tracking?</li>
<li>What hardware do you use for development, networking, storage and presenting?</li>
</ul>


<h2>Procedures</h2>

<ul>
<li>How do you plan work, estimate risk and agree on deadlines and milestones?</li>
<li>How involved are clients in the design process and in offering feedback?</li>
<li>What sort of review opportunities do you offer, both technical and performance?</li>
<li>How do you track development progress and allow developers to identify and raise problems early?</li>
<li>How do you handle work that is not going to plan, is late or not going to meet a deadline?</li>
<li>How does the company use data and data analysis in its day-to-day operation?</li>
<li>How flexible are the work hours?</li>
<li>Do you offer the freedom to occasionally work from home?</li>
</ul>


<h2>Feedback</h2>

<ul>
<li>Do you have any concerns with my ability to fulfil this role that I can address right now?</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving Typing Speed]]></title>
    <link href="http://greena13.github.io/blog/2014/09/08/improving-typing-speed/"/>
    <updated>2014-09-08T16:01:41+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/08/improving-typing-speed</id>
    <content type="html"><![CDATA[<p>Always in search of productivity gains in my programming work, recently I have been looking into improving my typing speed. I read Jeff Atwood&rsquo;s <a href="http://blog.codinghorror.com/we-are-typists-first-programmers-second/">We Are Typists First, Programmers Second</a> and was enthused, despite a few commenters pointing out that typing speed is rarely the bottleneck when it comes to coding. Atwood rightly responded that it is a matter of mental &ldquo;bandwidth&rdquo;: ideally, typing should be a function performed entirely autonomously without error or disruption - the mental interference of having to consider which keys should be pressed or what corrective action is needed to rectify a mistype can be detrimental to productivity and creativity. This mirrors a similar sentiment discussed in the highly recommended <a href="http://www.amazon.co.uk/Practice-Perfect-Rules-Getting-Better-ebook/dp/B007ZQ34V4">Practice Perfect</a> by Doug Lemov, Erica Woolway and Katie Yezzi. Lemov and his co-authors discuss practicing monotonous, formulaic and repetitive skills to the point of being able to execute them effortlessly and flawlessly provides more cognitive horsepower for creativity and efficacy.</p>

<p>From working with colleague and peers, I gained the impression I had a pretty average typing speed for a regular computer user and programmer, but I wanted to try and find out a base line. I encountered many figures of average and exceptional typing speeds online, including some <a href="http://en.wikipedia.org/wiki/Words_per_minute">rather unbelievable world records</a>, but I could not find any information on the sort typing I was interested in: programming, using just about every key on the keyboard and not just the alphanumeric and punctuation keys. Unable to find the information I wanted, I resigned myself to using what I had. I took a few free typing tests I found online and got an average of about 60 WPM. This is, from what I can gather, above average and more than adequate to produce code efficiently.</p>

<p>However, I knew that my typing speed slowed considerably when I had to code as opposed to writing an email but I was unsure by exactly how much. So I went in search of a tool that might help me find out. I found <a href="https://typing.io/">typing.io</a>, a service that allows you to type code from open source repositories for a number of different languages and frameworks while it measures your typing speed and error rate. Each code excerpt is broken down into chunks called <em>lessons</em>. The free version of the tool was enough to tell me my average typing speed for programming was close to 30 WPM - a rather concerning reduction of 50%. What wasn&rsquo;t available in the free version, however, was exactly which keys it was that was dragging down my typing speed.</p>

<p>I decided to invest in the paid subscription to gain greater access to the lessons and more importantly, to identify which keystrokes were causing me the most problems. I thought if I could find the worst culprits, I could correct the <a href="http://en.wikipedia.org/wiki/Pareto_principle">fabled 20%</a> and get my 80% improvement.</p>

<p>So, I started working through the lessons and one of the most interesting things I discovered was how I seem to deviated from the prescribed correct finger placements to suit my preferred style of typing. Typing.io provides a virtual keyboard on the bottom of the screen while you are typing, illustrating key placement on your keyboard and the correct fingers that should be used to press it. I have quite long fingers and I oftentimes use this length to my advantage by favouring the longer index and middle fingers to reach keys that are technically designated as the responsibility of the shorter, ring and little fingers.</p>

<p>I wondered if perhaps this overuse of the fingers that sat in the center of the keyboard was contributing to the slower execution of keystrokes attached to keys located towards the outer edge of the board. So within the first 30 minutes of practice, after seeing no improvement in speed - and an increasing error rate as I tried to push myself out of frustration - I decided I would focus on returning to the correct form I had first learnt in highschool to see if it had any effect on my speed.</p>

<p>Initially my error rate soared to around 35%, but gradually it began to come down as I focused on addressing each problem key individually and after more than 11 hours of practice over a period of a week or so, I began to arrive back at levels of ease similar to those I experienced before adjusting my technique and a nice little boost in my speed of 3 - 5 WPM.</p>

<p>After almost 12 hours of use, I had a few observations of typing.io. While the report at the end of each &lsquo;lesson&rsquo; is helpful, it doesn&rsquo;t really tell me what I want to know and can be misleading at times. An infographic of a keyboard is shown and each key is coloured in increasingly warmer colours, with bright red being reserved for the keys you had mistyped the greatest percentage of times. This means that if you typed a key twice and mistyped it once, it appears redder than a key you typed 17 times and mistyped 8 times. This is obviously not useful for identifying the keys that you most often mistype. It would be more useful if data from previous lessons were included as well - perhaps weighted appropriately so the most recent previous lessons had a greater significance.</p>

<p>The infographic also doesn&rsquo;t appear to display any information about how long it takes to press particular keys and therefor where improvement could to be made. It would be further helpful if the tool provided you the top five or ten slowest key transitions, so that you knew which sequences of keys to practice - assuming they occurred frequently enough to justify the effort.</p>

<p>Another gripe is with the virtual keyboard that appears while you are typing, showing you the key and finger combination necessary to achieve the next keystroke. Often I mistyped something and was left confused as to where I had gone wrong; it would have been very helpful if the virtual keyboard had shown what key I had actually pressed so I could correct my form without having to glance down at the actual keyboard.</p>

<p>Typing.io also did not distinguish between which shift key was being pressed and it accepted keystrokes that had been generated with the incorrect shift key. This made it especially difficult to recognise mistakes and correct them because the tool was giving feedback indicating they were correct.</p>

<p>An interesting observation was that the greatest determinant of speed and error rate, was which language I was typing code for. It seems there are languages which lend themselves to be typed much quicker and with less errors. High-level languages with CamelCase variable and method naming conventions were by far the easiest to transcribe. They generally included less operator keystrokes, less opening and closing brackets and none of the dreaded shift + underscore key combination that is so slow and difficult to reach with you little finger. It has left with me with an interesting (but ultimately minor) consideration when selecting suitable languages for future projects.</p>

<p>Overall, this was an curious experience that I would tentatively claim as a measured success. It remains unclear whether adjusting my technique to be more consistent with the suggested finger configurations has improved my typing speed, or whether I just got more accustom to the nuances of the program. I intend to continue with the program with a less intensive regime to see if more clearer results emerge after a longer time period.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Factories]]></title>
    <link href="http://greena13.github.io/blog/2014/09/06/factories/"/>
    <updated>2014-09-06T18:24:52+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/06/factories</id>
    <content type="html"><![CDATA[<p>The finer points of the different factory design patterns has always escaped me, so I decided to look it up recently and found <a href="http://stackoverflow.com/questions/4209791/design-patterns-abstract-factory-vs-factory-method">this rather helpful stackoverflow answer</a>. I thought I&rsquo;d summarise what I learnt below (all diagrams were generated using <a href="www.yuml.me">yUML</a>).</p>

<p>A factory design pattern in the most general sense is one that entrusts a class or object with the creation or instantiation of another object. Commonly, the class or object that does the creating is called the Factory object and the object being created is called the Product object. Bare this in mind when viewing the diagrams that follow.</p>

<h2>Static Factories</h2>

<p>A <em>Static Factory</em> is a class that defines a static method that generates various subtypes of a Product. It accepts an argument to determine which Product subtype to generate (shown as a string here, but it could be just about anything). The static factory does not need to be instantiated in order to generate a Product subtype. In some languages, Product&rsquo;s constructor is typically made private so it can only be called within the Product class and thereby prevent the factory from being bypassed.</p>

<p>If the system is later updated and a new Product subtypes is added, the static factory class must be updated to include the new Product subtype.</p>

<p><strong>NB:</strong> I&rsquo;ve used underscore here to indicate a static method as yUML doesn&rsquo;t appear to be able to underline text.</p>

<p><img src="http://www.yuml.me/1e74d10f" alt="Static Factory" /></p>

<h2>Simple Factories</h2>

<p>While static factories define a static method for generating Product subtypes, a <em>Simple Factory</em> is a <em>separate</em> class that defines an <em>instance</em> method to generate instances of Product subtypes. Again, the method typically accepts an argument to indicate which Product subtype to generate. The Product constructor&rsquo;s visibility can be restricted to <em>package</em> if the simple factory and product are packaged together.</p>

<p>The simple factory class must first be instantiated before it can be used to generate a Product instance. Similar to static factories, if a new Product subtype is added, the simple factory class needs to be updated to include it.</p>

<p><img src="http://www.yuml.me/b1f57365" alt="Simple Factory" /></p>

<h2>Factory Method</h2>

<p>A <em>Factory Method</em> class introduces another level of abstraction by defining a <em>Factory Method</em> interface that includes a method to produce Product subtypes. Concrete factory method classes implement this interface and define the factory method to generate Product subtypes related to its (the concrete Factory Method class) own type. Again, you need to create an instance of the concrete Factory Method class before you can create an instance of a Product subtype.</p>

<p>If a new Product subtype is added, each concrete factory method class that needs to be able to generate the new Product subtype, will need to be updated.</p>

<p><img src="http://www.yuml.me/d7f2e8c3" alt="Factory Method" /></p>

<h2>Abstract Factories</h2>

<p>The <em>Abstract Factories</em> is useful when when you have several Product objects that are related conceptually, but not through inheritance. It adds a factory method to the interface for each Product object (each of which has its own set of Product subtypes). It can be thought of as overlapping two or more Factory Methods on top of each other.</p>

<p><img src="http://www.yuml.me/989345bf" alt="Abstract Factory Method" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inversion of Control]]></title>
    <link href="http://greena13.github.io/blog/2014/09/03/inversion-of-control/"/>
    <updated>2014-09-03T08:52:19+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/03/inversion-of-control</id>
    <content type="html"><![CDATA[<p>Popularised by Robert C. Martin and Martin Fowler, <em>Inversion of Control</em> is a design principle where <em>custom code components</em> receive the control flow from general <em>library components</em>, similar to custom code modules being written for a larger general-purpose framework. This is an inversion of the traditional control flow found in <a href="http://greena13.github.io/blog/2014/08/31/procedural-programming">procedural programming</a> where the custom components encode the program&rsquo;s functionality in terms of general purpose libraries. The pattern offers the advantage of making the program more modular and extendable.</p>

<p>Inversion of control is related to Martin&rsquo;s <a href="http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming">dependency inversion principle</a>, which is concerned with having high and low level code depend an abstraction, rather than directly on each other, thereby inverting the direction of dependency. This is analogous to the way high-level, general components yield control to the low-level specific code in Inversion of Control, thereby inverting the traditional flow of control.</p>

<p>Although the term is most often used in the context of object-oriented programming, there are design patterns with wider applications that follow the Inversion of Control principle, such as software frameworks, callbacks and <a href="http://greena13.github.io/blog/2014/09/02/dependency-injection">dependency injection</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dependency Injection]]></title>
    <link href="http://greena13.github.io/blog/2014/09/02/dependency-injection/"/>
    <updated>2014-09-02T10:56:14+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/02/dependency-injection</id>
    <content type="html"><![CDATA[<p><em>Dependency Injection</em> is a software design pattern that works by <em>injecting</em> a reference to a dependency object into a dependent one, where it is stored and made part of the dependent object&rsquo;s state and behaviour. This separates the creation of the dependency object from the dependent object&rsquo;s code. In doing so, it more loosely couples the two objects and abides by the principles of <a href="http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming">Dependency Inversion</a> (because the dependent object is coupled with the dependency object&rsquo;s interface, rather than directly) and <a href="http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming">Single Responsibility</a> (because the dependent object is only responsible for its own behaviour, not the creation of the dependency object).</p>

<h2>Design Pattern Elements</h2>

<p>The pattern involves 4 elements:</p>

<ul>
<li><strong>Dependency Object</strong>: A concrete dependency object</li>
<li><strong>Dependent Object</strong>: A concrete dependent object that relies on the dependency one</li>
<li><strong>Dependency Interface</strong>: An interface used by the dependent object to communicate with the dependency object</li>
<li><strong>Injector Object</strong>: A concrete injector object responsible for injecting the dependency object into the dependent one</li>
</ul>


<p>The implementation of the Dependency Injection pattern is similar to that of the Strategy pattern, but the semantics differ. The same dependency object is intended to be used for the duration of the dependent object&rsquo;s lifetime, while a strategy often needs to be interchanged throughout an object&rsquo;s lifetime.</p>

<h2>Depdency Injection Techniques</h2>

<p>Martin Fowler defined 3 ways of injecting a dependency:</p>

<ul>
<li><strong>Constructor Injection</strong>: Dependencies are provided to the dependent object&rsquo;s constructor at the time of creation. This requires the dependency object to be instantiated before the dependent instance and is the preferred method because it avoids the dependent instance ever being in an invalid state. Dependencies injected in this way, however, don&rsquo;t permit the interchanging of the dependency instance.</li>
<li><strong>Setter Injection</strong>: The dependent object provides a setter method that accepts the dependency. This can lead to the problem of needing to make sure the dependency has been set before the dependent object is used; furthermore, it does not explicitly state the relationship between the dependent and dependency object, which is <a href="http://greena13.github.io/blog/2014/08/21/reducing-code-complexity">considered bad practice</a>. It does, however, allow changing the dependency object later in the dependent object&rsquo;s lifetime.</li>
<li><strong>Interface Injection</strong>: The dependency interface provides a method that accepts the dependent object, for the dependency object to inject itself into the dependent object. For this to work, the dependent object must also have a setter method for the dependency object to use to inject itself. This differs from the <em>Setter Injection</em> technique because it goes one step further and makes the dependency object itself a <em>Dependency Injector</em>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Five Principles of Object-Oriented Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming/"/>
    <updated>2014-09-01T20:18:37+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/01/first-five-principles-of-object-oriented-programming</id>
    <content type="html"><![CDATA[<p><strong>SOLID</strong> is an acronym mnemonic coined by Michael Feathers for Robert C. Martin&rsquo;s &ldquo;first five principles&rdquo; for object-oriented programming. Each concept is worth looking at briefly so I have tried to summarise the important points of each below.</p>

<h2>Single Responsibility Principle</h2>

<p>Robert C. Martin introduced in his book <a href="http://www.amazon.co.uk/Software-Development-Principles-Patterns-Practices/dp/0132760584">Agile Software Development, Principles, Patterns and Practices</a> the <em>Single Responsibility Principe</em>, which states code modules (whether they be classes, methods, variables, etc.) should have a single responsibility, or rather a single reason for the module to need updating if a program&rsquo;s specifications were ever to change. Examples of the application of this principle can be seen in the separation of <em>presentation</em> and <em>content</em> commonly performed in object-oriented systems.</p>

<h2>Open/Closed Principle</h2>

<p>The <em>Open/Closed Principle</em> has always referred to the fact that modules should &ldquo;be open for extension but closed for modification&rdquo;, but exactly what that meant has had two different interpretations.</p>

<h3>Meyer&rsquo;s Open/Closed Principle</h3>

<p>Bertrand Meyer is attributed with creating the term <em>open/closed principle</em> in the 1988 book, <a href="http://www.amazon.co.uk/Object-Oriented-Software-Construction-Prentice-Hall-Resource/dp/0136291554">Object Oriented Software Construction</a>. Meyer&rsquo;s definition of the rule prescribed that once a module had been coded it should only be altered directly to fix errors - all other modifications should be completed by creating a new class - usually via inheritance to reuse code from the original class. In this form of the open/closed principle, the new class need <em>not</em> reuse the interface of the old class.</p>

<h3>Polymorphic Open/Closed Principle</h3>

<p>In the 1990s the term was largely redefined to refer to the use of abstracted interfaces instead of concrete ones. In contrast to Meyer&rsquo;s version of the principle, concrete classes could be modified and swapped out, so long as the module&rsquo;s <em>interface</em> was closed to modifications. According to the rule, changes or extensions could be performed by altering the concrete implementations freely, so long as the original interface was persisted and only added to.</p>

<p>Where Meyer&rsquo;s principle preserved <em>implementation</em> and allowed for the modification of interfaces, the polymorphic open/closed principle preserves <em>interfaces</em> and allows for the modification of implementations.</p>

<p>Robert C. Martin&rsquo;s article in 1996, <em>The Open-Closed Principle</em>, was instrumental in forwarding this approach and it is the latter definition that is in common use today.</p>

<h2>Liskov Substitution Principle</h2>

<p>The <em>Liskov Substitution Principle</em> put forth by Barbara Liskov&rsquo;s 1987 &lsquo;<em>Data abstraction and hierarchy</em>&rsquo; states that a programmer should be able to substitute an object with an instance of one of its subtypes without altering the surrounding code&rsquo;s behaviour. This is another way of saying that any subtype of an object must completely honour the interface and observable behaviour of its supertype.</p>

<p>To achieve this, a number of requirements must be met that govern the subtype&rsquo;s signature:</p>

<ul>
<li>It must have <a href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance">contravariant method arguments</a></li>
<li>It must have <a href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance">covariant method return types</a></li>
<li>No new exceptions should be thrown from subtype class&rsquo;s methods other than when they are themselves subtypes of exceptions thrown by the supertype</li>
</ul>


<p>Beyond maintaining the same interface, a number of behavioural conditions for the subtype must also be satisfied:</p>

<ul>
<li>Preconditions are not to be strengthened in the subtype, i.e. the subtype must not depend on any more prerequisites than its supertype</li>
<li>Postconditions cannot be weakened in the subtype, i.e. the subtype must perform the same behaviour as the supertype</li>
<li><a href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance">Method arguments invariants</a> and <a href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance">method return type invariants</a> of the supertype must be preserved in a subtype</li>
<li>The introduction of new methods cannot allow the subtype to enter a state that would not have been possible in the supertype and thereby change its behaviour; This is often referred to as the <em>History Constraint</em>.</li>
</ul>


<h2>Interface Segregation Principle</h2>

<p>The <em>Interface-Segregation Principle</em> states client code should not be able to see any interface points it does not need access to in order to function. Access should be done instead via a <em>role interface</em>, which is tailored to the particular needs of the client code. In short, many specific interfaces are better than a single general purpose one.</p>

<h2>Dependency Inversion Principle</h2>

<p><em>Dependency Inversion</em> is a design pattern that focuses on decoupling software components of different abstractions. Traditionally, high-level components defined functionality in broad strokes and low-level components grew to support the high level code.</p>

<p>Dependency Inversion is based on the notion that rather than having code components with a high level of abstraction depending directly on code components with a low level of abstraction, both components should instead depend on an abstraction. The details of these components should be coded to the abstractions, and not the abstractions to the details.</p>

<p>This design pattern separates the code responsible for connecting the high-level components to the low-level components into an abstract interface, simplifying each component and allowing greater reusability. Often the components are divided into different libraries where the high-level components and interfaces for the functionality needed of the low-level code are bundled together; the low level components are given their own package. Because the interfaces the low-level components implement (and thus depend on) are bundled with the high-level code, the dependency flows up and it is this inversion of dependency direction for which the design pattern gets its name.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Covariance and Contravariance]]></title>
    <link href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance/"/>
    <updated>2014-09-01T16:37:28+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance</id>
    <content type="html"><![CDATA[<p>I have found variance one of the more difficult things to get my head around in computer science, so I have tried to document the basics as a way of teaching myself.</p>

<p><em>Variance</em> in object-oriented programming refers to how subtyping works between complex types. For example, if <em>B</em> is a subtype of <em>A</em> and <em>CA</em> and <em>CB</em> are enumerable collections (our complex types) that contain items of type <em>A</em> and <em>B</em>, respectively, is the collection <em>CB</em> a subtype of the collection <em>CA</em>?</p>

<ul>
<li>If the enumerable collection is <strong>covariant</strong> then <em>CB</em> is a subtype of <em>CA</em> and the subtyping relation is said to be <strong>preserved</strong>.</li>
<li>If the enumerable collection is <strong>contravariant</strong> then <em>CB</em> is a subtype of <em>CA</em> and the subtyping relation is said to be <strong>reversed</strong>.</li>
<li>If the enumerable collection is <strong>invariant</strong> then <em>CA</em> and <em>CB</em> are not related by type at all and the subtyping relation is said to be <strong>ignored</strong>.</li>
</ul>


<h2>Argument And Return Type Variance</h2>

<p>When inheriting from a parent class and overwriting a method, a programmer is faced with a number of options for the argument and return types of that method, depending on the programming language being used.</p>

<p>Considering the argument type first, programming languages will either offer invariant, contravariant or covariant argument types. A language that offers <em>invariant argument types</em> (C++, Java, C#) requires the arguments of the overriding method to be of the same type as the overridden method. Languages that offer <em>contravariant argument types</em> allow arguments to be supertypes of the overridden method&rsquo;s arguments. Similarly, languages offering <em>covariant argument types</em> permit arguments of subtypes of those for the overridden method.</p>

<p>Return types are much the same; languages offer either covariant (C++, Java) or invariant (C#) return types.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/09/01/functional-programming/"/>
    <updated>2014-09-01T09:52:42+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/01/functional-programming</id>
    <content type="html"><![CDATA[<p>As part of my continuing efforts to clarify fundamental software engineering concepts, I recently read and summarised the most interesting points of the <a href="http://en.wikipedia.org/wiki/Functional_programming">functional programming</a> Wikipedia page.</p>

<p>Functional programming is a <a href="http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming">declarative programming</a> paradigm that treats computations as evaluations of mathematical functions and avoids referencing a system state and mutable data. It was developed, primarily, as an attempt to avoid side effects and make subroutines much easier to reason about. It introduces a number of interesting and useful concepts that are not often encountered or emphasised in object-orient programming.</p>

<h2>Pure Functions</h2>

<p>Pure functions are those that have no side effects and depend only on their argument values, not on any system information; consequently, they return the same value for a given set of parameter values every time. They have some unique properties useful for code optimisation and reasoning:</p>

<ul>
<li><p>If the result of a pure expression is not used, it can be removed without altering the code&rsquo;s behaviour.</p></li>
<li><p>If a pure function is called with arguments that are themselves pure functions, or don&rsquo;t have side effects, then the result can be cached and returned if the function is called with the same parameter values again.</p></li>
<li><p>If there is no dependency amongst a collection of functions, they can be run in any order with the same result.</p></li>
</ul>


<h2>Referential Transparency</h2>

<p>Referential transparency is a property of code that refers to whether or not it can be replaced with its calculated value without changing its behaviour. If this is indeed the case, the code is said to be <em>referentially transparent</em>; if the code cannot be replaced with its value without altering system behaviour then it is <em>referentially opaque</em>.</p>

<p>All pure function calls are referentially transparent as they do not depend on or change system behaviour and should always return the same result when given the same arguments.</p>

<h2>First-class Functions</h2>

<p>First-class functions are those which can appear anywhere in a program that other first-class entities (such as numbers) can. This notably includes as arguments and return values for other functions. They can also accept and return other functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imperative Programming vs Declarative Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming/"/>
    <updated>2014-08-31T10:37:39+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming</id>
    <content type="html"><![CDATA[<p>I was recently reading the Wikipedia articles of <a href="http://en.wikipedia.org/wiki/Imperative_programming">imperative programming</a> and <a href="http://en.wikipedia.org/wiki/Declarative_programming">declarative programming</a> to brush up on my understanding of the distinction.</p>

<h2>Imperative Programming</h2>

<p>Imperative programming is concerned with describing how a program should achieve its functionality; not only <em>what</em> should be done, but also <em>how</em> it should be done is encoded. The movement of data and execution of operations are explicitly specified, if only at an abstract level; that is to say, an imperative program is concerned with implementation as much as it is logic functionality.</p>

<p>Imperative programming has its roots in assembly language and machine code, however, modern high-level languages offer more human-friendly syntax and aggregate functionality. <a href="http://greena13.github.io/blog/2014/08/31/procedural-programming">Procedural programming</a> is a common paradigm that falls within imperative programming.</p>

<h2>Declarative Programming</h2>

<p>Declarative programming focuses on expressing the logic of a computation without needing to specify it in terms of low-level operations. Declarative programming emerged out of an attempt to minimise side-effects and focus on a program&rsquo;s primary function, leaving the implementation details to the language itself.</p>

<p>Common examples of declarative programming are SQL, regular expressions and functional programming.</p>

<p>It seems the difference between the two programming ideologies is largely concerned with the distribution of responsibility: in imperative programming the programmer is responsible for specifying logic functionality and implementation details while in declarative programming the language takes ownership of the implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procedural Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/31/procedural-programming/"/>
    <updated>2014-08-31T08:42:16+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/31/procedural-programming</id>
    <content type="html"><![CDATA[<p>I have been recently trying to improve my understanding of some of the fundamental concepts in computer science. I looked at <em>procedural programming</em> this time and attempted to extract the important points of the <a href="http://en.wikipedia.org/wiki/Procedural_programming">Wikipedia article</a>.</p>

<p>Procedural programming is derived from <a href="http://greena13.github.io/blog/2014/08/30/structured-programming">structured programming</a> and based on the concept of a procedure being a sequence of steps to be executed to achieve a reported goal. In this respect, procedural languages are also imperative languages because they contain not only what to do, but how to do it, by referencing the system state.</p>

<p>Structurally, there is considerable overlap between procedural programming and functional programming as they both originate in structured programming. Functional programs have <em>functions</em> as their routines while procedural programs have <em>procedures</em>. The intent behind functional languages is different, however, as most of the imperative elements are removed or made second-class citizens and functional control constructs are used instead. Procedural languages model programs as a list of imperative commands that may alter a system&rsquo;s state. Functional languages, on the other hand, are designed to support <em>pure functions</em>, or routines that depend <em>only on their inputs</em> and nothing else, and which <em>do not</em> alter the system state.</p>

<p>Procedural programming differs from object-oriented in the way data and functionality are bundled. Procedural programming deals with variables, data structures and subroutines; object-oriented programming uses objects that expose behaviour (methods) and data (attributes) via interfaces. In procedural programming, procedures operate on data structures while in object-oriented programming methods and data attributes are bundled together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Structured Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/30/structured-programming/"/>
    <updated>2014-08-30T22:11:41+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/30/structured-programming</id>
    <content type="html"><![CDATA[<p>I have been recently trying to get a better handle on some terms I possess a casual understanding of and use regularly in conversation, but suspect I don&rsquo;t really have a full appreciation for. <em>Structured programming</em> was the first of these terms. What follows is a summary of the more interesting bits of the <a href="http://en.wikipedia.org/wiki/Structured_programming">Wikipedia article</a>.</p>

<h2>Structured Programming</h2>

<p>Structured programming emerged, at least in part, from the Edsger Dijkstra&rsquo;s paper &lsquo;<em>GOTO Considered Harmful</em>&rsquo;, warning of the propensity for the <code>goto</code> control statement to lead to <em>Spaghetti Code</em>.</p>

<h3>Structured Programming Theory</h3>

<p>Structured program theory offers 3 ways of connecting statements, which are sufficient to express any computable function, or all of the operations of a <em>Turing Machine</em>:</p>

<ul>
<li>As <strong>Sequences</strong>: sequentially executed statements and subroutines</li>
<li>As <strong>Selections</strong>: conditionally executed statements and subroutines, depending on system state</li>
<li>As <strong>Iterations</strong>: repeatedly executed statements and subroutines until some system state is achieved or all members of a collection are exhausted</li>
</ul>


<h3>Structured Programming</h3>

<p>Structured programming implements the 3 ways of connecting statements using 3 control structures:</p>

<ul>
<li><strong>Subroutines</strong>: groupings of code that can be evoked using a single statement, eg. procedures, functions or methods</li>
<li><strong>Block Structures</strong>: collection of statements evoked together under the same conditions, eg. blocks designated with <code>if</code> and <code>end</code>.</li>
<li><strong>Loops</strong>: collection of statements that are evoked repeatedly together until a particular state is reached, eg <code>for</code> and <code>while</code> loops.</li>
</ul>


<h3>Single Exit Point Rule</h3>

<p>Structured programming advocates a single entry and exit point for each subroutine to make reasoning about them easier and reduce the potential for particular types of bugs to occur. Many have argued trying to abide by this principle can add unnecessary complexity and many programming languages facilitate subroutines with multiple exit points, eg. <code>return</code>, <code>break</code> and <code>continue</code>.</p>

<p>When coding subroutines with multiple exits, care must be taken to ensure that cleanup code is run at the end of all execution paths (think of the <code>finally</code> block provided by some programming languages for exception handling).</p>

<p>The computer scientist David Watt considered the justification for avoiding <code>goto</code> statements (Watts termed them <em>jump sequencers</em>) in <a href="http://www.amazon.co.uk/Programming-Language-Concepts-Computer-Science/dp/0470853204">his textbook</a>. He suggests <code>goto</code> are harmful to the understandability of code because the reader must first go to the memory address or subroutine definition to find out the intent behind the jump; however, Watt argues the intent behind what he terms <em>escape sequencers</em> (<code>return</code>, <code>continue</code> and <code>break</code>) is much clearer and therefore do not create the same problem.</p>

<h3>Exception Handling</h3>

<p>Exceptions pose a particular challenge for trying to abide by the single exit point rule. Watts notes that <em>exception sequencers</em> usually need the exception handler to reside at a more contextually aware area of the code, away from the low-level code where it occurs (the exception is <em>thrown</em> or <em>raised</em>). Kenneth Louden and Lambert add in <a href="http://www.amazon.com/Programming-Languages-Principles-Kenneth-Louden/dp/1111529418">their textbook</a> that exception handling is not structured programming because the setup of control and the actual transfer of control happen in different places in the code. Furthermore, <a href="http://en.wikipedia.org/wiki/Structured_programming#cite_note-Bansal2013-13">it has been noted by some</a> that exceptions can even cause control structures that would normally conform to the single exit rule to violate it: for example, a <code>for</code> loop where an exception is thrown in the instantiation of the first iteration - the loop would not get to run and exit as intended.</p>

<h3>Single Entry Point Rule</h3>

<p>Routines can also have multiple entry points and violate the single entry rule, most notably as re-entry into a <em>coroutine</em>; this happens when a subroutine yields control to another but maintains its own state and can be resumed where it was left off. This has applications in input/output and network streams as well as concurrency and state machines in general.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Spaced Repetition to Learn Programming Languages]]></title>
    <link href="http://greena13.github.io/blog/2014/08/28/using-spaced-repetition-to-learn-programming-languages/"/>
    <updated>2014-08-28T09:58:41+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/28/using-spaced-repetition-to-learn-programming-languages</id>
    <content type="html"><![CDATA[<p>I have already written on <a href="blog/2014/08/26/creating-cards-for-spaced-repetition">tips for creating spaced repetition cards</a>, but here I hope to summarise a few of Jack Kinsella&rsquo;s tips specific to <a href="http://www.jackkinsella.ie/2011/12/05/janki-method.html">memorising programming languages</a> (and <a href="http://www.oxbridgenotes.co.uk/articles/janki_method_refined">here</a> also).</p>

<h2>Use Screenshots</h2>

<p>Rather than typing out code manually onto your cards, screenshots should be used. Aside from the obvious and significant time saving, screenshots provide you with syntax highlighting with no additional effort, creating a richer image for the brain to process and remember, with the salient parts already highlighted. Kinsella also claims - perhaps rightly so - that taking screenshots of the original source may draw upon situational memory to help aid in recollection.</p>

<h2>Focus on What&rsquo;s Available - Not How to Use It</h2>

<p>When you are committing functions and methods to memory, focus on what they are called and what they do rather than concerning yourself with details of parameter order and return types. When you come to committing a second or third language to memory, this information will likely become conflicting content and cause you endless problems as you recall information for the wrong language.</p>

<p>When you sit down to program, what is of greatest use is what functions or methods are available in the language. This is to avoid naively reimplementing functionality already on offer, or recreating an existing and well-known solution. Once you know what functions you wish to use, a decent IDE will help you out with the rest.</p>

<h2>Make Clear What is Language Agnostic</h2>

<p>Often there are functions and methods with the same or similar names and functionality offered by different languages and libraries. Make sure to encode what these functions are, and any differences they may have between languages. It is often helpful to define other language&rsquo;s implementations relative to one you are already very familiar with.</p>

<h2>Create Cards From Good Code</h2>

<p>When you encounter a good piece of code - perhaps from a well-maintained open source repository or a well-reviewed tutorial - create cards from it and quiz yourself on its merits, or even pitfalls if you are able to find them. This will help with you ability to read and analyse code and will impart good practices with concrete examples.</p>

<h2>Process Information Can Be Difficult to Encode</h2>

<p>Processes and ordered information is difficult to store and remember in Anki because it suffers from the same problems as sets and enumerations. The process should be encoded as clozed deletions, or care should be taken to encoding a clear link between each step in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Cards for Spaced Repetition]]></title>
    <link href="http://greena13.github.io/blog/2014/08/26/creating-cards-for-spaced-repetition/"/>
    <updated>2014-08-26T14:44:22+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/26/creating-cards-for-spaced-repetition</id>
    <content type="html"><![CDATA[<p><em>Spaced repetition</em> is a revision technique that minimises the number of exposures to a piece of subject matter required to commit it to longterm memory. This is achieved by altering the frequency in which items of revision material are shown to the user based on how easily it was recalled last time; the content is shown to the user right before he or she is due to forget it - and not before, avoiding wasting time on premature revision. <a href="http://ankisrs.net/">Anki</a> is a free and popular tool available on Windows, Mac and mobile devices that allows you to synchronise your progress between all your devices via <a href="https://ankiweb.net">Ankiweb</a>.</p>

<p>Anki works by showing a user a series of <em>flash cards</em> in a <em>deck</em> and prompting for a response for each one. When the user comes up with an answer (or gives up), they press a button to reveal the correct response. The user then selects whether they wish to be quizzed on this again soon (because they got it wrong, or were not satisfied with how quickly they came up with the answer) or some time further in the future (because it was too easy). The algorithm for managing what material is presented and when, is very effective and can be customised based on the user&rsquo;s preferred amount of material and time available for revision each day. Anki also includes a number of more advanced features that won&rsquo;t really be covered here.</p>

<p>I have recently been looking into spaced repetition to <a href="http://www.smashingmagazine.com/2014/08/19/mastering-a-programming-language-using-spaced-repetition/">improve my recall of a number of programming languages</a>. I have encountered good advice on maximising the effectiveness of spaced repetition by ensuring the content and format of flashcards is conducive to fast and meaningful memorisation. Here is a summary of the advice that stood out to me, taken primarily from Mattan Griffel&rsquo;s <a href="http://www.smashingmagazine.com/2014/08/19/mastering-a-programming-language-using-spaced-repetition/">Tips For Mastering A Programming Language Using Spaced Repetition</a>, Jack Kinsella&rsquo;s <a href="http://www.jackkinsella.ie/2011/12/05/janki-method.html">Janki Method</a>, Derek Sivers&#8217; <a href="http://sivers.org/srs">Memorizing a programming language using spaced repetition software</a> and Dr Piotr Wozniak&rsquo;s <a href="http://www.supermemo.com/articles/20rules.htm">Twenty rules of formulating knowledge</a>. Each should be consulted in addition to reading this article for further examples and discussion.</p>

<h2>Common Memorisation Mistakes</h2>

<h3>Avoiding Activated Ignorance</h3>

<p>Spaced repetition and flash cards are for remembering things, <em>not learning them</em>. Subject material should only ever been encoded in cards after you have understood it. Committing anything that is poorly comprehended or misunderstood can be very damaging and will likely lead to <em>activated ignorance</em>, or information that has been memorised but is false or not completely true. This is a waste of time and will lead to the wrong information making itself available in your mind when it matters most; it also has the secondary and perhaps more damaging effect of providing you with a erroneous foundation in which to receive and process new information, creating more far-reaching errors in comprehension.</p>

<h3>Avoiding Inert Information</h3>

<p>Only add cards to your deck for knowledge you understand to avoid <em>inert information</em>, or information that is although memorised, has not been correctly understood &ndash; despite being under the impression you understand it. These facts or figures sit in your memory and dutifully present themselves when recalled, but when push comes to shove, offer no deeper understanding. An example of this would be slavishly memorising that TCP stands for <em>Transmission Control Protocol</em>, but having no knowledge of how this protocol actually functions or its place in communication.</p>

<p>To avoid this, you should develop a sound understanding of the full context of a subject before settling down to memorise its finer points. Particular attention and time should be spent on understanding the fundamentals to ensure a strong mental framework is in place to receive and evaluate new knowledge as it is encountered and memorised.</p>

<p>Spaced repetition should not be performed alone and content should not be memorised in isolation - learning without practicing the skills and information you are committing to memory will divorce the knowledge from its use and make it difficult to reconcile with how to make it work for you in your work and life. You need to use what you learn to discover important nuances or details in applying what you&rsquo;re memorising.</p>

<h2>Encoding Knowledge</h2>

<h3>Abstraction and Chunking</h3>

<p>Effectively encoding knowledge into Anki cards is vital to optimising how effective your revision sessions are. It is no surprise that simple material is easier to commit to memory and recall once its there, and so information should be formulated as simply and succinctly as possible. The number of words and concepts involved in each card should be kept to an absolute minimum.</p>

<p>It is possible to break a complicated concept up into smaller conceptual units through a process known as <em>chunking</em>. Your goal should be to create simple, unambiguous mental associations and neural pathways to follow each time you wish to recall something. Note that this is not the same as creating a single representation or association of a concept in your mind. On the contrary, it is beneficial to have as many of these simple pathways to the same concept as possible, to increase your chances and the number of contexts in which it is easy to recall the material.</p>

<p>Further to this end, concrete examples of concepts are better to encode on your cards than the abstract concepts themselves. Concrete examples stick in memory longer and if a series of examples are chosen wisely, it should be easier to induce the abstract concept when required rather than having to memorise it and use it to deduce applications later on. However, several similar cards should be created with slightly different answers when there is an important or subtle conceptual distinction or <em>gotcha</em> that you should know.</p>

<p>Not only does breaking up concepts into their smallest constituents benefit your brain&rsquo;s ability to recall it later, but it actually helps Anki&rsquo;s algorithm perform  more effectively because simple concepts are easier to schedule efficiently than larger, more abstract ones. This is because Anki is able to remind you of ony the concepts you have likely forgotten, leaving the ones you have memorised out. You are also more likely to forget all or part of a complicated idea and will need to be reminded of it more frequently, despite knowing some or most of the concept.</p>

<h3>Things You Should Avoid Memorising</h3>

<p>Sets, or groupings of items without a clear or predefined order, are very difficult to remember and encode. Where possible, these should be converted to <em>enumerations</em>, or ordered sets, by linking items up in a predefined and consistent order. Enumerations are easier to recall than sets because a clear link between consecutive items exists that you brain can easily traverse to retrieve all items in the group.  Order should be chosen carefully, however, as it is more difficult to retrieve individual items in an order different to the one you have encoded. This order can be arbitrary, but should be easy to remember and preferably have meaning within the context of the material you are memorising, or match the order in which you are likely to need to retrieve them.</p>

<p>Enumerations are still difficult to memorise and should be avoided. Where possible, enumerations should be converted to <em>cloze deletions</em>, or sentences where some words have been omitted and you must fill in the blanks. These are typically easier to remember than sets and enumerations and are based on the concept of <a href="http://www.supermemo.com/help/read.htm"><em>incremental reading</em></a>.</p>

<h3>Memory Conflicts</h3>

<p>When memorising many concepts, you need to be aware of inadvertantly memorising something that may conflict with something you already know. This often happens when memorising a lot of numbers, whether dates or quantities, people often find a long-held memory difficult or impossible to retrieve after learning a new peice of information. These conflicts are difficult to predict and are better to be avoided by making concepts you memorised as unambiguous and explicit as possible to minimise the chance of inadvertently reallocating a particular neural pathway to new conflicting information.</p>

<h3>Strengthening Memories</h3>

<p>A number of techniques exist for strengthening memories and increasing their intensity and duration. There is a great body of literature on mnemonics available for associating and linking items to make them easier to recall at later date. Alternatively, you may attempt to consciously integrate a new piece of information into you memory by linking it to a memory or memories you already have. Concepts are often easier to recall when they are defined relative to things we are already familiar with.</p>

<p>Furthermore, you can personalise information with experience or examples from your own life. The brain gives highest priority to information that has the greatest relevance to your life and relationships. By hooking a new piece of information to an existing memory with special significance or associated emotion, you are capitalising on this inherent prioritisation.</p>

<p>Memories can also be linked to contexts by creating something akin to different modes or domains for which your brain should draw memories from, given a certain environment or context. This often allows concepts to be expressed in fewer words and relative to other concepts already in a given context&rsquo;s conceptual landscape.</p>

<h3>Formatting</h3>

<p>The formatting of cards should aim to convey concepts as quickly and richly as possible. Key concepts or words should be <strong>emboldened</strong> to help them stand out and create a unique visual stimulus the brain can recognise from previous revision sessions and automatically retrieve the memory of what is on the card.</p>

<p>The usage of imagery enriches stimulus where text cannot and produces memories that are not only more evocative but more easily recalled due to the added sensory dimensions of sight embedded in the memory. Sounds and short video clips can be used to capitalise on this effect even further. Many individuals have predilections for certain sense and you may find, for example, auditory memories are stronger than visual ones.</p>

<h3>Prompts (Front of the Card)</h3>

<p>The question or prompt on the front of each card should be phrased to mimic how it will likely be retrieved when needed. The solution to a problem should be encoded with a prompt that matches how you are likely to encounter that problem during your day-to-day work, rather than extracted into an abstraction that is likely to require cognitive effort to rework it into actionable knowledge. This is a corollary of the fact that memories stored using simple and strong neural pathways are easiest to retrieve.</p>

<p>Jack Kinsella <a href="http://www.oxbridgenotes.co.uk/articles/janki_method_refined">suggests</a> that before creating a card, brainstorm possible uses for the knowledge and use this insight to cater how you record the information. This can be particularly effective when combined with cloze deletion; phrases can be created based on problems or situations you are likely face where you will need the information you are encoding. If it is proving difficult to come up with a situation where the material will be needed - it is probably the case that this information will not be worth remembering.</p>

<h3>Answer (Back of the Card)</h3>

<p>The amount of cognitive effort required to decide if you got the correct answer or not on a card should be kept at a minimum. Answers that take too long to confirm as correct (usually because of ambiguity or concepts expressed in a wordy way) will eat into your cognitive reserves and draw out revision sessions to be longer than they need to. It is also an indication that the concept being encoded is too complicated and should be broken down into smaller, simpler ones.</p>

<p>If the material cannot be simplified and it is still taking too long to confirm as correct, try putting the important parts in <strong>bold</strong> or a larger font size to stand out more.</p>

<h2>What to Encode</h2>

<h3>Finding Things to Remember</h3>

<p>To get the most out of revising, you should first decide what material is most useful to have memorised. This is usually things that will save you time and resources you would otherwise spend to look it up or find out; it is a good idea to save things you would normally have to bookmark or search for on a regular basis, or insights that save you considerable time but are difficult to remember because they are rarely used.</p>

<p>It is good to get into the habit of creating new Anki cards for every time you learn something new or are reminded of something important. It is often worth tagging these cards to describe their content to allow for focused review when the need later arrives.</p>

<p>It is also a good idea to create cards with what you learn from your mistakes; performing a post-mortem after a big project to identify what went well and what did not is a good way to identify lessons to be learnt (and remembered) to put in your Anki deck. It is an even better idea to analyse progress during regular intervals throughout a project to make sure you have not lost sight of a greater picture and add these insights to your deck. A similar approach can be applied to errors encountered in every day work; solutions to common or time-consuming problems are terrifically useful things to have memorised.</p>

<p>Restricting what you memorise to only what you need to complete a particular project is a good way to help focus your memorisation and avoid wasting time on material that will ultimately prove of little or no use.</p>

<h2>Practicing</h2>

<p>Spaced repetition software works by offering you a reminder of information just before you are most likely to forget it, both preventing you from wasting time revising the material before you need to, and avoiding you forgetting the concept completely and having to relearn it. In order for the algorithm to be the most effective, you must complete the suggested revision <em>every day</em>. This is less challenging than it sounds when you incorporate checking your deck into your daily routine. If left neglected for too long, the number of items due to be revised grows and it quickly becomes too difficult to catch up.</p>

<h2>Deck Maintenance</h2>

<p>A spaced repetition deck should not be thought of as a static resource, but instead should be maintained continuously. Cards should be updated that are no longer true or, given new insight, can be improved, split or merged.</p>

<p>Material that is proving difficult to memorise should be rephrased, reformatted or reworked to try and make it easier to remember. Conceptual links to related material should be highlighted to strengthen associations. The content should be carefully considered, practiced or tested to help find more effective ways of encoding it in the deck and make it easier to remember.</p>

<p>When creating cards, it is a good idea to provide references to the sources you used and the date you last checked or review it. This is to record where to go to get more information and to clarify or expand your knowledge of a given subject  and to guage how stable or obsolete a particular piece of knowledge is.</p>

<h2>Prioritising What You Should Practice</h2>

<p>Unless you want to be spending hours each day reviewing - and likely not even then - you will not have enough time to memorised every piece of knowledge you ever wanted at your fingertips. Material must be prioritised and those priorities, like the deck itself, should be regularly reviewed and adjusted. Anki&rsquo;s tags system can be used to filter out which cards are included or filtered out of your deck.</p>

<p>Material that is used regularly or is important for only a given period - perhaps while you complete a particular project - should be retired from your deck in favour of information more likely to be useful in the future. The excluded material can be re-included and rapidly re-learnt using Anki&rsquo;s drill feature, should there come a time when the material is required once more.</p>

<p>You will need to find your own balance of how long you are prepared to spend revising each day, and how useful the information you&rsquo;re committing to memory is likely to be.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Separating Classes Into Smaller Ones]]></title>
    <link href="http://greena13.github.io/blog/2014/08/22/separating-classes-into-smaller-ones/"/>
    <updated>2014-08-22T09:05:53+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/22/separating-classes-into-smaller-ones</id>
    <content type="html"><![CDATA[<p>One of the more useful things I took from Steve McConnel&rsquo;s <a href="http://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a> is a procedure for systematically extracting smaller classes from a large one.</p>

<p>A common object oriented antipattern is the <em>God Class</em> or <em>Blob Class</em> which occurs when a class grows to become a large, monolithic blob with no clear single responsibility, leading to problems with maintenance and understandability. At this point, the corrective course of action is to refine the single unwieldy class into multiple smaller ones with a more manageable size and clear responsibility. The exact number and shape of these refined classes is not always immediately apparent, however it is possible to break the process up into smaller steps, allowing you to focus on one stage at a time.</p>

<ol>
<li><p>Begin by looking at the methods themselves rather than the class and identify any that are particularly long or deal with multiple responsibilities. Separate them out into smaller self-contained chunks using vertical whitespace (empty lines); it may be necessary to shift the order of statements, particularly moving the initialisation of variables to just before they are first used &ndash; be careful not to inadvertently change system behaviour here.</p></li>
<li><p>The whitespace-separated chunks of functionality can now be extracted into their own methods. It can be helpful to first type out the reference to this new method immediately above the statements that it will contain. This makes it easier to see what parameters the method will need by going through its statements. Once you are comfortable with the method&rsquo;s name and parameters, copy the reference and method statements onto the class and convert it to a valid method definitions with an appropriate access modifier (usually <code>private</code> should be your first choice).</p></li>
<li><p>Once you have extracted as much code as possible into class or instance methods, examine each method&rsquo;s parameters and try to remove as many of them as possible by promoting local variables and arguments to instance or class variables so they will not need to be passed around between methods.</p></li>
<li><p>Once again, you should now attempt to separate out concerns, this time by grouping methods and instance and class variables concerned with the same functionality. Usually these can be identified simply as the methods that reference these variables.</p></li>
<li><p>Once you have identified one or more separate concerns, define a new class to encapsulate the related methods and variables. Define an instance of the new class on the blob class and instantiate it an appropriate place so you will be able to evoke the functionality of the new class from the blob class. Begin moving methods and instance variables to the new class, searching each time in the blob class for any references you may need to update (by pointing to the variable containing the instance of the new class). Continue this until you have extracted all the methods and instance variables you need to simplify the blob class.</p></li>
</ol>


<p>Ideally, all refactoring should be completed with a set of comprehensive unit tests at your back to verify no functionality was changed or lost in the restructuring. This is often not the case, in no small part because God Classes are notoriously difficult to write tests for. However, the same is not true of the new, slimmer classes and it is a good idea to see the refactoring as an opportunity to outfit the new classes with the full unit test treatment; you will thank yourself when it comes time to maintain them in the future.</p>
]]></content>
  </entry>
  
</feed>
