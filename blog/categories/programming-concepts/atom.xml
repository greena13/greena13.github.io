<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming Concepts | Key Shift in Cmd]]></title>
  <link href="http://greena13.github.io/blog/categories/programming-concepts/atom.xml" rel="self"/>
  <link href="http://greena13.github.io/"/>
  <updated>2014-09-01T16:27:53+01:00</updated>
  <id>http://greena13.github.io/</id>
  <author>
    <name><![CDATA[Aleck Greenham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functional Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/09/01/functional-programming/"/>
    <updated>2014-09-01T09:52:42+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/01/functional-programming</id>
    <content type="html"><![CDATA[<p>As part of my continuing efforts to clarify fundamental software engineering concepts, I recently read and summarised the most interesting points of the <a href="http://en.wikipedia.org/wiki/Functional_programming">functional programming</a> Wikipedia page.</p>

<p>Functional programming is a <a href="/blog/2014/08/31/imperative-programming-vs-declarative-programming">declarative programming</a> paradigm that treats computations as evaluations of mathematical functions and avoids referencing a system state and mutable data. It was developed, primarily, as an attempt to avoid side effects and make subroutines much easier to reason about. It introduces a number of interesting and useful concepts that are not often encountered or emphasised in object-orient programming.</p>

<h2>Pure Functions</h2>

<p>Pure functions are those that have no side effects and depend only on their argument values, not on any system information; consequently, they return the same value for a given set of parameter values every time. They have some unique properties useful for code optimisation and reasoning:</p>

<ul>
<li><p>If the result of a pure expression is not used, it can be removed without altering the code&rsquo;s behaviour.</p></li>
<li><p>If a pure function is called with arguments that are themselves pure functions, or don&rsquo;t have side effects, then the result can be cached and returned if the function is called with the same parameter values again.</p></li>
<li><p>If there is no dependency amongst a collection of functions, they can be run in any order with the same result.</p></li>
</ul>


<h2>Referential Transparency</h2>

<p>Referential transparency is a property of code that refers to whether or not it can be replaced with its calculated value without changing its behaviour. If this is indeed the case, the code is said to be <em>referentially transparent</em>; if the code cannot be replaced with its value without altering system behaviour then it is <em>referentially opaque</em>.</p>

<p>All pure function calls are referentially transparent as they do not depend on or change system behaviour and should always return the same result when given the same arguments.</p>

<h2>First-class Functions</h2>

<p>First-class functions are those which can appear anywhere in a program that other first-class entities (such as numbers) can. This notably includes as arguments and return values for other functions. They can also accept and return other functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imperative Programming vs Declarative Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming/"/>
    <updated>2014-08-31T10:37:39+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming</id>
    <content type="html"><![CDATA[<p>I was recently reading the Wikipedia articles of <a href="http://en.wikipedia.org/wiki/Imperative_programming">imperative programming</a> and <a href="http://en.wikipedia.org/wiki/Declarative_programming">declarative programming</a> to brush up on my understanding of the distinction.</p>

<h2>Imperative Programming</h2>

<p>Imperative programming is concerned with describing how a program should achieve its functionality; not only <em>what</em> should be done, but also <em>how</em> it should be done is encoded. The movement of data and execution of operations are explicitly specified, if only at an abstract level; that is to say, an imperative program is concerned with implementation as much as it is logic functionality.</p>

<p>Imperative programming has its roots in assembly language and machine code, however, modern high-level languages offer more human-friendly syntax and aggregate functionality. <a href="/blog/2014/08/31/procedural-programming">Procedural programming</a> is a common paradigm that falls within imperative programming.</p>

<h2>Declarative Programming</h2>

<p>Declarative programming focuses on expressing the logic of a computation without needing to specify it in terms of low-level operations. Declarative programming emerged out of an attempt to minimise side-effects and focus on a program&rsquo;s primary function, leaving the implementation details to the language itself.</p>

<p>Common examples of declarative programming are SQL, regular expressions and functional programming.</p>

<p>It seems the difference between the two programming ideologies is largely concerned with the distribution of responsibility: in imperative programming the programmer is responsible for specifying logic functionality and implementation details while in declarative programming the language takes ownership of the implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procedural Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/31/procedural-programming/"/>
    <updated>2014-08-31T08:42:16+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/31/procedural-programming</id>
    <content type="html"><![CDATA[<p>I have been recently trying to improve my understanding of some of the fundamental concepts in computer science. I looked at <em>procedural programming</em> this time and attempted to extract the important points of the <a href="http://en.wikipedia.org/wiki/Procedural_programming">Wikipedia article</a>.</p>

<p>Procedural programming is derived from <a href="/blog/2014/08/30/structured-programming">structured programming</a> and based on the concept of a procedure being a sequence of steps to be executed to achieve a reported goal. In this respect, procedural languages are also imperative languages because they contain not only what to do, but how to do it, by referencing the system state.</p>

<p>Structurally, there is considerable overlap between procedural programming and functional programming as they both originate in structured programming. Functional programs have <em>functions</em> as their routines while procedural programs have <em>procedures</em>. The intent behind functional languages is different, however, as most of the imperative elements are removed or made second-class citizens and functional control constructs are used instead. Procedural languages model programs as a list of imperative commands that may alter a system&rsquo;s state. Functional languages, on the other hand, are designed to support <em>pure functions</em>, or routines that depend <em>only on their inputs</em> and nothing else, and which <em>do not</em> alter the system state.</p>

<p>Procedural programming differs from object-oriented in the way data and functionality are bundled. Procedural programming deals with variables, data structures and subroutines; object-oriented programming uses objects that expose behaviour (methods) and data (attributes) via interfaces. In procedural programming, procedures operate on data structures while in object-oriented programming methods and data attributes are bundled together.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Structured Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/30/structured-programming/"/>
    <updated>2014-08-30T22:11:41+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/30/structured-programming</id>
    <content type="html"><![CDATA[<p>I have been recently trying to get a better handle on some terms I possess a casual understanding of and use regularly in conversation, but suspect I don&rsquo;t really have a full appreciation for. <em>Structured programming</em> was the first of these terms. What follows is a summary of the more interesting bits of the <a href="http://en.wikipedia.org/wiki/Structured_programming">Wikipedia article</a>.</p>

<h2>Structured Programming</h2>

<p>Structured programming emerged, at least in part, from the Edsger Dijkstra&rsquo;s paper &lsquo;<em>GOTO Considered Harmful</em>&rsquo;, warning of the propensity for the <code>goto</code> control statement to lead to <em>Spaghetti Code</em>.</p>

<h3>Structured Programming Theory</h3>

<p>Structured program theory offers 3 ways of connecting statements, which are sufficient to express any computable function, or all of the operations of a <em>Turing Machine</em>:</p>

<ul>
<li>As <strong>Sequences</strong>: sequentially executed statements and subroutines</li>
<li>As <strong>Selections</strong>: conditionally executed statements and subroutines, depending on system state</li>
<li>As <strong>Iterations</strong>: repeatedly executed statements and subroutines until some system state is achieved or all members of a collection are exhausted</li>
</ul>


<h3>Structured Programming</h3>

<p>Structured programming implements the 3 ways of connecting statements using 3 control structures:</p>

<ul>
<li><strong>Subroutines</strong>: groupings of code that can be evoked using a single statement, eg. procedures, functions or methods</li>
<li><strong>Block Structures</strong>: collection of statements evoked together under the same conditions, eg. blocks designated with <code>if</code> and <code>end</code>.</li>
<li><strong>Loops</strong>: collection of statements that are evoked repeatedly together until a particular state is reached, eg <code>for</code> and <code>while</code> loops.</li>
</ul>


<h3>Single Exit Point Rule</h3>

<p>Structured programming advocates a single entry and exit point for each subroutine to make reasoning about them easier and reduce the potential for particular types of bugs to occur. Many have argued trying to abide by this principle can add unnecessary complexity and many programming languages facilitate subroutines with multiple exit points, eg. <code>return</code>, <code>break</code> and <code>continue</code>.</p>

<p>When coding subroutines with multiple exits, care must be taken to ensure that cleanup code is run at the end of all execution paths (think of the <code>finally</code> block provided by some programming languages for exception handling).</p>

<p>The computer scientist David Watt considered the justification for avoiding <code>goto</code> statements (Watts termed them <em>jump sequencers</em>) in <a href="http://www.amazon.co.uk/Programming-Language-Concepts-Computer-Science/dp/0470853204">his textbook</a>. He suggests <code>goto</code> are harmful to the understandability of code because the reader must first go to the memory address or subroutine definition to find out the intent behind the jump; however, Watt argues the intent behind what he terms <em>escape sequencers</em> (<code>return</code>, <code>continue</code> and <code>break</code>) is much clearer and therefore do not create the same problem.</p>

<h3>Exception Handling</h3>

<p>Exceptions pose a particular challenge for trying to abide by the single exit point rule. Watts notes that <em>exception sequencers</em> usually need the exception handler to reside at a more contextually aware area of the code, away from the low-level code where it occurs (the exception is <em>thrown</em> or <em>raised</em>). Kenneth Louden and Lambert add in <a href="http://www.amazon.com/Programming-Languages-Principles-Kenneth-Louden/dp/1111529418">their textbook</a> that exception handling is not structured programming because the setup of control and the actual transfer of control happen in different places in the code. Furthermore, <a href="http://en.wikipedia.org/wiki/Structured_programming#cite_note-Bansal2013-13">it has been noted by some</a> that exceptions can even cause control structures that would normally conform to the single exit rule to violate it: for example, a <code>for</code> loop where an exception is thrown in the instantiation of the first iteration - the loop would not get to run and exit as intended.</p>

<h3>Single Entry Point Rule</h3>

<p>Routines can also have multiple entry points and violate the single entry rule, most notably as re-entry into a <em>coroutine</em>; this happens when a subroutine yields control to another but maintains its own state and can be resumed where it was left off. This has applications in input/output and network streams as well as concurrency and state machines in general.</p>
]]></content>
  </entry>
  
</feed>
