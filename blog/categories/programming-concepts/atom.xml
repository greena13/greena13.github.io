<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming Concepts | Key Shift in Cmd]]></title>
  <link href="http://greena13.github.io/blog/categories/programming-concepts/atom.xml" rel="self"/>
  <link href="http://greena13.github.io/"/>
  <updated>2020-12-12T12:43:55+00:00</updated>
  <id>http://greena13.github.io/</id>
  <author>
    <name><![CDATA[Aleck Greenham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dependency Injection]]></title>
    <link href="http://greena13.github.io/blog/2014/09/02/dependency-injection/"/>
    <updated>2014-09-02T10:56:14+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/02/dependency-injection</id>
    <content type="html"><![CDATA[<p><em>Dependency Injection</em> is a software design pattern that works by <em>injecting</em> a reference to a dependency object into a dependent one, where it is stored and made part of the dependent object&rsquo;s state and behaviour. This separates the creation of the dependency object from the dependent object&rsquo;s code.</p>

<!--more-->


<p>In doing so, it more loosely couples the two objects and abides by the principles of <a href="/blog/2014/09/01/first-five-principles-of-object-oriented-programming">Dependency Inversion</a> (because the dependent object is coupled with the dependency object&rsquo;s interface, rather than directly) and <a href="/blog/2014/09/01/first-five-principles-of-object-oriented-programming">Single Responsibility</a> (because the dependent object is only responsible for its own behaviour, not the creation of the dependency object).</p>

<h2>Design Pattern Elements</h2>

<p>The pattern involves 4 elements:</p>

<ul>
<li><strong>Dependency Object</strong>: A concrete dependency object</li>
<li><strong>Dependent Object</strong>: A concrete dependent object that relies on the dependency one</li>
<li><strong>Dependency Interface</strong>: An interface used by the dependent object to communicate with the dependency object</li>
<li><strong>Injector Object</strong>: A concrete injector object responsible for injecting the dependency object into the dependent one</li>
</ul>


<p>The implementation of the Dependency Injection pattern is similar to that of the Strategy pattern, but the semantics differ. The same dependency object is intended to be used for the duration of the dependent object&rsquo;s lifetime, while a strategy often needs to be interchanged throughout an object&rsquo;s lifetime.</p>

<h2>Depdency Injection Techniques</h2>

<p>Martin Fowler defined 3 ways of injecting a dependency:</p>

<ul>
<li><strong>Constructor Injection</strong>: Dependencies are provided to the dependent object&rsquo;s constructor at the time of creation. This requires the dependency object to be instantiated before the dependent instance and is the preferred method because it avoids the dependent instance ever being in an invalid state. Dependencies injected in this way, however, don&rsquo;t permit the interchanging of the dependency instance.</li>
<li><strong>Setter Injection</strong>: The dependent object provides a setter method that accepts the dependency. This can lead to the problem of needing to make sure the dependency has been set before the dependent object is used; furthermore, it does not explicitly state the relationship between the dependent and dependency object, which is <a href="/blog/2014/08/21/reducing-code-complexity">considered bad practice</a>. It does, however, allow changing the dependency object later in the dependent object&rsquo;s lifetime.</li>
<li><strong>Interface Injection</strong>: The dependency interface provides a method that accepts the dependent object, for the dependency object to inject itself into the dependent object. For this to work, the dependent object must also have a setter method for the dependency object to use to inject itself. This differs from the <em>Setter Injection</em> technique because it goes one step further and makes the dependency object itself a <em>Dependency Injector</em>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Covariance and Contravariance]]></title>
    <link href="http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance/"/>
    <updated>2014-09-01T16:37:28+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/01/covariance-and-contravariance</id>
    <content type="html"><![CDATA[<p>I have found variance one of the more difficult things to get my head around in computer science, so I have tried to document the basics as a way of teaching myself.</p>

<!--more-->


<p><em>Variance</em> in object-oriented programming refers to how subtyping works between complex types. For example, if <em>B</em> is a subtype of <em>A</em> and <em>CA</em> and <em>CB</em> are enumerable collections (our complex types) that contain items of type <em>A</em> and <em>B</em>, respectively, is the collection <em>CB</em> a subtype of the collection <em>CA</em>?</p>

<ul>
<li>If the enumerable collection is <strong>covariant</strong> then <em>CB</em> is a subtype of <em>CA</em> and the subtyping relation is said to be <strong>preserved</strong>.</li>
<li>If the enumerable collection is <strong>contravariant</strong> then <em>CB</em> is a subtype of <em>CA</em> and the subtyping relation is said to be <strong>reversed</strong>.</li>
<li>If the enumerable collection is <strong>invariant</strong> then <em>CA</em> and <em>CB</em> are not related by type at all and the subtyping relation is said to be <strong>ignored</strong>.</li>
</ul>


<h2>Argument And Return Type Variance</h2>

<p>When inheriting from a parent class and overwriting a method, a programmer is faced with a number of options for the argument and return types of that method, depending on the programming language being used.</p>

<p>Considering the argument type first, programming languages will either offer invariant, contravariant or covariant argument types. A language that offers <em>invariant argument types</em> (C++, Java, C#) requires the arguments of the overriding method to be of the same type as the overridden method. Languages that offer <em>contravariant argument types</em> allow arguments to be supertypes of the overridden method&rsquo;s arguments. Similarly, languages offering <em>covariant argument types</em> permit arguments of subtypes of those for the overridden method.</p>

<p>Return types are much the same; languages offer either covariant (C++, Java) or invariant (C#) return types.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/09/01/functional-programming/"/>
    <updated>2014-09-01T09:52:42+01:00</updated>
    <id>http://greena13.github.io/blog/2014/09/01/functional-programming</id>
    <content type="html"><![CDATA[<p>As part of my continuing efforts to clarify fundamental software engineering concepts, I recently read and summarised the most interesting points of the <a href="http://en.wikipedia.org/wiki/Functional_programming">functional programming</a> Wikipedia page.</p>

<!--more-->


<p>Functional programming is a <a href="/blog/2014/08/31/imperative-programming-vs-declarative-programming">declarative programming</a> paradigm that treats computations as evaluations of mathematical functions and avoids referencing a system state and mutable data. It was developed, primarily, as an attempt to avoid side effects and make subroutines much easier to reason about. It introduces a number of interesting and useful concepts that are not often encountered or emphasised in object-orient programming.</p>

<h2>Pure Functions</h2>

<p>Pure functions are those that have no side effects and depend only on their argument values, not on any system information; consequently, they return the same value for a given set of parameter values every time. They have some unique properties useful for code optimisation and reasoning:</p>

<ul>
<li>If the result of a pure expression is not used, it can be removed without altering the code&rsquo;s behaviour.</li>
<li>If a pure function is called with arguments that are themselves pure functions, or don&rsquo;t have side effects, then the result can be cached and returned if the function is called with the same parameter values again.</li>
<li>If there is no dependency amongst a collection of functions, they can be run in any order with the same result.</li>
</ul>


<h2>Referential Transparency</h2>

<p>Referential transparency is a property of code that refers to whether or not it can be replaced with its calculated value without changing its behaviour. If this is indeed the case, the code is said to be <em>referentially transparent</em>; if the code cannot be replaced with its value without altering system behaviour then it is <em>referentially opaque</em>.</p>

<p>All pure function calls are referentially transparent as they do not depend on or change system behaviour and should always return the same result when given the same arguments.</p>

<h2>First-class Functions</h2>

<p>First-class functions are those which can appear anywhere in a program that other first-class entities (such as numbers) can. This notably includes as arguments and return values for other functions. They can also accept and return other functions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Imperative Programming vs Declarative Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming/"/>
    <updated>2014-08-31T10:37:39+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/31/imperative-programming-vs-declarative-programming</id>
    <content type="html"><![CDATA[<p>I was recently reading the Wikipedia articles of <a href="http://en.wikipedia.org/wiki/Imperative_programming">imperative programming</a> and <a href="http://en.wikipedia.org/wiki/Declarative_programming">declarative programming</a> to brush up on my understanding of the distinction.</p>

<!--more-->


<h2>Imperative Programming</h2>

<p>Imperative programming is concerned with describing how a program should achieve its functionality; not only <em>what</em> should be done, but also <em>how</em> it should be done is encoded. The movement of data and execution of operations are explicitly specified, if only at an abstract level; that is to say, an imperative program is concerned with implementation as much as it is logic functionality.</p>

<p>Imperative programming has its roots in assembly language and machine code, however, modern high-level languages offer more human-friendly syntax and aggregate functionality. <a href="/blog/2014/08/31/procedural-programming">Procedural programming</a> is a common paradigm that falls within imperative programming.</p>

<h2>Declarative Programming</h2>

<p>Declarative programming focuses on expressing the logic of a computation without needing to specify it in terms of low-level operations. Declarative programming emerged out of an attempt to minimise side-effects and focus on a program&rsquo;s primary function, leaving the implementation details to the language itself.</p>

<p>Common examples of declarative programming are SQL, regular expressions and functional programming.</p>

<p>It seems the difference between the two programming ideologies is largely concerned with the distribution of responsibility: in imperative programming the programmer is responsible for specifying logic functionality and implementation details while in declarative programming the language takes ownership of the implementation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Procedural Programming]]></title>
    <link href="http://greena13.github.io/blog/2014/08/31/procedural-programming/"/>
    <updated>2014-08-31T08:42:16+01:00</updated>
    <id>http://greena13.github.io/blog/2014/08/31/procedural-programming</id>
    <content type="html"><![CDATA[<p>I have been recently trying to improve my understanding of some of the fundamental concepts in computer science. I looked at <em>procedural programming</em> this time and attempted to extract the important points of the <a href="http://en.wikipedia.org/wiki/Procedural_programming">Wikipedia article</a>.</p>

<!--more-->


<p>Procedural programming is derived from <a href="/blog/2014/08/30/structured-programming">structured programming</a> and based on the concept of a procedure being a sequence of steps to be executed to achieve a reported goal. In this respect, procedural languages are also imperative languages because they contain not only what to do, but how to do it, by referencing the system state.</p>

<p>Structurally, there is considerable overlap between procedural programming and functional programming as they both originate in structured programming. Functional programs have <em>functions</em> as their routines while procedural programs have <em>procedures</em>. The intent behind functional languages is different, however, as most of the imperative elements are removed or made second-class citizens and functional control constructs are used instead. Procedural languages model programs as a list of imperative commands that may alter a system&rsquo;s state. Functional languages, on the other hand, are designed to support <em>pure functions</em>, or routines that depend <em>only on their inputs</em> and nothing else, and which <em>do not</em> alter the system state.</p>

<p>Procedural programming differs from object-oriented in the way data and functionality are bundled. Procedural programming deals with variables, data structures and subroutines; object-oriented programming uses objects that expose behaviour (methods) and data (attributes) via interfaces. In procedural programming, procedures operate on data structures while in object-oriented programming methods and data attributes are bundled together.</p>
]]></content>
  </entry>
  
</feed>
